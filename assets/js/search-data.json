{
  
    
        "post0": {
            "title": "UML(Unified Modeling Language)의 개요",
            "content": "1. UML(Unified Modeling Language) : 공통된 표현법 . 시스템 분석, 설계, 구현 등 시스템 개발 과정에서 시스템 개발자와 고객 또는 개발자 상호 간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어 | Rumbaugh(OMT), Booch, Jacobason 등의 객체지향 방법론의 장점 통합 | OMG(Object Management Group)에서 표준으로 지정하였음 | UML의 구성 요소 사관다 사물(Things) | 관계(Relationships) | 다이어그램(Diagram) | . | . 2. 사물(객체) . 다이어그램 안에서 관계가 형성될 수 있는 대상 | 모델을 구성하는 가장 중요한 기본 요소 | 사물의 종류 구조 사물(Structural Things) 시스템의 개념적, 물리적 요소 표현 | 클래스, 유스케이스, 컴포넌트, 노드 등 | . | 행동 사물(Behavioral Things) 시간과 공간에 따른 요소들의 행위를 표현 | 상호작용, 상태 머신 등 | . | 그룹 사물(Grouping Things) 요소들을 그룹으로 묶어서 표현 | 패키지 | . | 주해 사물(Annotation Things) 부가적인 `설명이나 제약조건 등을 표현 | 노트 | . | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/10/theory10.html",
            "relUrl": "/theory/2021/03/10/theory10.html",
            "date": " • Mar 10, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "요구사항 분석 CASE와 HIPO",
            "content": "1. 요구사항 분석용 CASE(자동화 도구) . 요구사항을 자동으로 분석하고, 요구사항 분석 명세서 기술하도록 개발된 도구 . sadt -시스템 정의, 요구사항 분석, 시스템/소프트웨어 설계를 위한 도구-SoftTecth 사에서 개발-구조적 요구 분석을 하기 위해 블록 다이어그램을 채택한 자동화 도구 . SREM =RSL/REVS | -TRW 사가 실시간 처리 소프트웨어 시스템에서 요구사항을 명확히 기술하도록 할 목적으로 개발한 도구-RSL과 REVS를 사용하는 자동화 도구 | . PSL/PSA | -PSL과 PSA를 사용하는 자동화 도구-미시간 대학에서 개발 | . TAGS | -시스템 공학 방법 응용에 대한 자동 접근 방법-개발 주기의 전 과정에 이용할 수 있는 통합 자동화 도구 | . | . 2. HIPO(Hierarchy Input Process Output) . 시스템의 분석 및 설계 또는 문서화에 사용되는 기법으로, 시스템 실행 과정인 입력.처리.출력의 기능을 표현한 것 . | 하향식 소프트웨어 개발을 위한 문서화 도구 . | 기능과 자료의 의존 관계 동시에 표현 가능 . | 기호, 도표를 이용하여 보기 쉽고 이해하기 쉬움 . | HIPO Chart: 시스템의 기능을 여러 개의 고유 모듈로 분할하여 이들 간의 인터페이스를 계층 구조로 표현한 것 . 가시적 도표(Visual Table of Contents, 도식 목차) | 총체적 도표(Overview Diagram, 총괄 도표, 개요 도표) | 세부적 도표(Detail Diagram, 상세 도표) | . ​ . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/09/theory9.html",
            "relUrl": "/theory/2021/03/09/theory9.html",
            "date": " • Mar 9, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "요구사항 분석",
            "content": "1. 요구사항 분석 . 소프트웨어 개발의 실제적인 첫 단계 | 개발 대상에 대한 사용자의 요구사항을 이해하고 문서화하는 활동 | 사용자 요구의 타당성을 조사, 비용.일정에 대한 제약 설정 | 사용자 요구를 정확하게 추출하여 목표 정함 | . 2. 구조적 분석 기법 . 자료의 흐름과 처리를 중심으로 하는 요구사항 분석 방법 | 도형 중심의 분석용 도구와 분석 절차를 이용하여 사용자의 요구사항 파악, 문서화 | 하향식 방법(전체-&gt;상세)을 사용하여 시스템을 세분화 | 분석의 중복 배제 | 주요 구조적 분석 기법 도구 자료 흐름도(DFD) | 자료 사전(DD) | 소단위 명세서(Mini-Spec.) | 개체 관계도(ERD) | 상태 전이도(STD) | 제어 명세서 | . | . 3. 자료 흐름도(DFD) . 자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술 | 자료 흐름 그래프, 버블 차트라고도 함 | 자료 흐름과 처리를 중심으로 하는 구조적 분석 기법에 이용됨 | . 4. 자료 흐름도 기본 기호 . 기호 의미 . 프로세스(Process) | 자료를 변환시키는 시스템의 한 부분(처리 과정)을 나타내며 처리, 기능, 변환, 버블이라고도 함 | . 자료 흐름(Data Flow) | 자료의 이동(흐름)이나 연관관계를 나타냄 | . 자료 저장소(Data Store) | 시스템에서의 자료 저장소(파일, 데이터베이스)를 나타냄 | . 단말(Terminator) | 시스템과 교신하는 외부 개체로, 입력 데이터가 만들어지고 출력 데이터를 받음 | . . 5. 자료 사전(DD) . 자료 흐름도에 있는 자료를 더 자세히 정의하고 기록한 것 . | 메타데이터: 데이터를 설명하는 데이터. 데이터의 데이터 . | 기호 의미 . = | 정의: ~로 구성되어 있다 | . + | 연결: 그리고 | . () | 생략: 생략 가능한 자료 | . [] | 선택: 또는 | . {} | 반복: 아래에 최소, 위에 최대 횟수 표시 | . * * | 설명: 주석 | .   |   | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/08/theory8.html",
            "relUrl": "/theory/2021/03/08/theory8.html",
            "date": " • Mar 8, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://eunkyung99.github.io/gang/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://eunkyung99.github.io/gang/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "김은경 . 한국외국어대학교 컴퓨터.전자시스템공학부 18학번 데이터와 웹 개발, 교육에 관심이 많은 개발자입니다. . 📧 kek9520@naver.com . 🔗 깃허브 페이지 . ✍🏻 블로그 페이지 . . 🔎한 눈에 보기 . *자세히 보기: 원본 페이지 . *하이퍼링크 항목을 클릭하면 상세 설명 페이지로 이동합니다. . . 👩🏻‍🎓 현재 . 한국외국어대학교 글로벌캠퍼스 컴퓨터.전자시스템공학부 4학년 | 데이터, 웹 개발에 관심이 많은 개발자 | 전공심화+스페인어통.번역학과 부전공 | 총 학점: 4.2 / 4.5 (130학점 이수) | 전공 학점: 4.25 / 4.5 (74학점 이수) | . 👩🏻‍💼 프로젝트 . 2020.07-2020.08 제이엠스마트 현장 실습(2개월) | 웹 개발 업무 수행 php, HTML, javascript 사용 | . | 2020.11~2021.08 학부연구생 연구 진행(10개월) . 압축 적용 Erasure coding 성능 실험 . | RISC-V VP 기반 CNN 딥러닝 가속기 시스템에서 Object Detection 일부 구현 . | . | 2021.01-2021.02 SJSU SVSTIP 해외교육 카페 추천 앱 개발 프로젝트 | 무료 호스팅 사이트 서버 구축 및 DB 관리 | Java 기반 안드로이드 앱 개발 | 팀 2등 상, 개인 우수상(3명 중 1명) 수상 | . | 2021.03-2021.05 캡스톤 프로젝트 키오스크 대치 앱 시스템 개발 | AWS 서버, 데이터베이스 구축 및 관리 | kotlin 기반 안드로이드 앱 개발 | . | 2021.09- 메디칼스탠다드 인턴(4개월) 웹 개발 업무 수행 - 하이퍼링크 수정 | node.js 사용 | . | . 🌟 외부 활동 . 2018.11 교내 이공계 학술제 참가 | 교내 빅데이터 학회 소속 - 데이터 분석 공부 dacon 대회 공부 | . | 2021.07 삼성 SDS 알고리즘 교육 수료 | 2021.08 교내 알고리즘 특강 교육 수료 | . 🎖️ 자격증 . 토익 895 / 990 2021.04 취득 | 오픽 IH 2021.08 취득 | ADsP(데이터 분석 준전문가) 2021.03 취득 | SQLD(SQL 개발자) 2021.03 취득 | 정보처리기사 2021.08 취득 | . 👩🏻‍🏫 교육 활동 . 2019.03-2019.06 교내 튜터링 프로그램 참가 과 후배들에게 C 언어 튜터링 진행 | . | 2019.07-2019.08 월드프렌즈 봉사활동 코스타리카🇨🇷에서 IT 교육 진행 | . | 2021.07~ 한국외대 SW 봉사단 초등학생 대상 sw 관련 수업 보조 sw와 3D 입체 교육 수업 | sw와 환경 융합 교육 수업 | . | . | . 🏆 수상 내역 . 교내 TOPCIT 성적 우수상(2021.05 응시) | . 👩🏻‍🎨 성격 . 부족한 점 → 배우려는 자세 | 정리, 발표하는 습관 → 원활한 소통 | 다양한 분야에 관심이 많음 | 응용하는 것을 좋아함 | . . Web Programming . AI &amp; Data Study . Application . Education . 전공이수학점 내역 .",
          "url": "https://eunkyung99.github.io/gang/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Pages",
          "content": "준비중입니다 :) .",
          "url": "https://eunkyung99.github.io/gang/pages/",
          "relUrl": "/pages/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://eunkyung99.github.io/gang/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}