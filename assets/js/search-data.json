{
  
    
        "post0": {
            "title": "UML(Unified Modeling Language)의 개요",
            "content": "1. UML(Unified Modeling Language) : 공통된 표현법 . 시스템 분석, 설계, 구현 등 시스템 개발 과정에서 시스템 개발자와 고객 또는 개발자 상호 간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어 | Rumbaugh(OMT), Booch, Jacobason 등의 객체지향 방법론의 장점 통합 | OMG(Object Management Group)에서 표준으로 지정하였음 | UML의 구성 요소 사관다 사물(Things) | 관계(Relationships) | 다이어그램(Diagram) | . | . 2. 사물(객체) . 다이어그램 안에서 관계가 형성될 수 있는 대상 | 모델을 구성하는 가장 중요한 기본 요소 | 사물의 종류 구조 사물(Structural Things) 시스템의 개념적, 물리적 요소 표현 | 클래스, 유스케이스, 컴포넌트, 노드 등 | . | 행동 사물(Behavioral Things) 시간과 공간에 따른 요소들의 행위를 표현 | 상호작용, 상태 머신 등 | . | 그룹 사물(Grouping Things) 요소들을 그룹으로 묶어서 표현 | 패키지 | . | 주해 사물(Annotation Things) 부가적인 `설명이나 제약조건 등을 표현 | 노트 | . | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/10/theory10.html",
            "relUrl": "/theory/2021/03/10/theory10.html",
            "date": " • Mar 10, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "요구사항 분석 CASE와 HIPO",
            "content": "1. 요구사항 분석용 CASE(자동화 도구) . 요구사항을 자동으로 분석하고, 요구사항 분석 명세서 기술하도록 개발된 도구 . sadt -시스템 정의, 요구사항 분석, 시스템/소프트웨어 설계를 위한 도구-SoftTecth 사에서 개발-구조적 요구 분석을 하기 위해 블록 다이어그램을 채택한 자동화 도구 . SREM =RSL/REVS | -TRW 사가 실시간 처리 소프트웨어 시스템에서 요구사항을 명확히 기술하도록 할 목적으로 개발한 도구-RSL과 REVS를 사용하는 자동화 도구 | . PSL/PSA | -PSL과 PSA를 사용하는 자동화 도구-미시간 대학에서 개발 | . TAGS | -시스템 공학 방법 응용에 대한 자동 접근 방법-개발 주기의 전 과정에 이용할 수 있는 통합 자동화 도구 | . | . 2. HIPO(Hierarchy Input Process Output) . 시스템의 분석 및 설계 또는 문서화에 사용되는 기법으로, 시스템 실행 과정인 입력.처리.출력의 기능을 표현한 것 . | 하향식 소프트웨어 개발을 위한 문서화 도구 . | 기능과 자료의 의존 관계 동시에 표현 가능 . | 기호, 도표를 이용하여 보기 쉽고 이해하기 쉬움 . | HIPO Chart: 시스템의 기능을 여러 개의 고유 모듈로 분할하여 이들 간의 인터페이스를 계층 구조로 표현한 것 . 가시적 도표(Visual Table of Contents, 도식 목차) | 총체적 도표(Overview Diagram, 총괄 도표, 개요 도표) | 세부적 도표(Detail Diagram, 상세 도표) | . ​ . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/09/theory9.html",
            "relUrl": "/theory/2021/03/09/theory9.html",
            "date": " • Mar 9, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "요구사항 분석",
            "content": "1. 요구사항 분석 . 소프트웨어 개발의 실제적인 첫 단계 | 개발 대상에 대한 사용자의 요구사항을 이해하고 문서화하는 활동 | 사용자 요구의 타당성을 조사, 비용.일정에 대한 제약 설정 | 사용자 요구를 정확하게 추출하여 목표 정함 | . 2. 구조적 분석 기법 . 자료의 흐름과 처리를 중심으로 하는 요구사항 분석 방법 | 도형 중심의 분석용 도구와 분석 절차를 이용하여 사용자의 요구사항 파악, 문서화 | 하향식 방법(전체-&gt;상세)을 사용하여 시스템을 세분화 | 분석의 중복 배제 | 주요 구조적 분석 기법 도구 자료 흐름도(DFD) | 자료 사전(DD) | 소단위 명세서(Mini-Spec.) | 개체 관계도(ERD) | 상태 전이도(STD) | 제어 명세서 | . | . 3. 자료 흐름도(DFD) . 자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술 | 자료 흐름 그래프, 버블 차트라고도 함 | 자료 흐름과 처리를 중심으로 하는 구조적 분석 기법에 이용됨 | . 4. 자료 흐름도 기본 기호 . 기호 의미 . 프로세스(Process) | 자료를 변환시키는 시스템의 한 부분(처리 과정)을 나타내며 처리, 기능, 변환, 버블이라고도 함 | . 자료 흐름(Data Flow) | 자료의 이동(흐름)이나 연관관계를 나타냄 | . 자료 저장소(Data Store) | 시스템에서의 자료 저장소(파일, 데이터베이스)를 나타냄 | . 단말(Terminator) | 시스템과 교신하는 외부 개체로, 입력 데이터가 만들어지고 출력 데이터를 받음 | . . 5. 자료 사전(DD) . 자료 흐름도에 있는 자료를 더 자세히 정의하고 기록한 것 . | 메타데이터: 데이터를 설명하는 데이터. 데이터의 데이터 . | 기호 의미 . = | 정의: ~로 구성되어 있다 | . + | 연결: 그리고 | . () | 생략: 생략 가능한 자료 | . [] | 선택: 또는 | . {} | 반복: 아래에 최소, 위에 최대 횟수 표시 | . * * | 설명: 주석 | .   |   | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/08/theory8.html",
            "relUrl": "/theory/2021/03/08/theory8.html",
            "date": " • Mar 8, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "요구사항 개발 프로세스",
            "content": "1. 요구사항 개발 프로세스 . 개발 대상에 대한 요구사항을 체계적으로 도출.분석한 후 명세서에 정리한 다음 확인 및 검증 하는 일련의 구조화된 활동 | 타당성 조사(Feasibility Study)가 선행되어야 함 | 요구사항 개발은 요구공학의 한 요소 | . 도출(Elicitation) -&gt; 분석(Analysis) -&gt; 명세(Specification) -&gt; 확인(Validation) . 2. 요구사항 도출(수집) . 시스템 개발에 관련된 사람들이 서로 의견을 교환하여 요구사항을 어떻게 수집할 것인지를 식별하고 이해하는 과정 | 개발자와 고객 사이의 관계가 만들어지고 이해관계자가 식별됨 | 소프트웨어 개발 생명 주기(SDLC) 동안 지속적으로 반복됨 | 주요 도출 기법 청취와 인터뷰 | 설문 | 브레인스토밍 | 워크샵 | 프로토타이핑 | 유스케이스 | . | . 3. 요구사항 분석 . 사용자의 요구사항 중 명확하지 않거나 모호하여 이해되지 않는 부분을 발견하고 이를 걸러내기 위한 과정 | 타당성을 조사하고 비용과 일정에 대한 제약 설정 | 상충되는 요구사항 중재 | 사용되는 도구 자료 흐름도(DFD) | 자료 사전(DD) | . | . 4. 요구사항 명세 . 분석된 요구사항을 바탕으로 모델을 작성하고 문서화하는 것 | 기능 요구사항 빠짐없이 기술 | 비기능 요구사항 필요한 것만 기술 | 소단위 명세가 사용될 수 있음 | . 5. 요구사항 확인(검증) . 개발 자원을 요구사항에 할당하기 전에 요구사항 명세서가 정확하고 완전하게 작성되었는지 검토하는 활동 | 이해관계자들이 검토해야 함 | 요구사항 관리 도구를 이용하여 요구사항 정의 문서들에 대해 형상 관리(SCM) 수행 | . 6. 요구공학 . 무엇을 개발해야 하는지 요구사항을 정의하고, 분석 및 관리하는 프로세스를 연구하는 학문 | 요구사항 변경의 원인과 처리 방법을 이해, 품질 개선하여 프로젝트 실패 최소화 | . 7. 요구사항 명세 기법 . 구분 정형 명세 기법 비정형 명세 기법 . 기법 | 수학적 원리, 모델 기반 | 상태/기능/객체 중심 | . 작성 방법 | 수학적 기호, 정형화된 표기법 | 일반 명사, 동사 등의 자연어 기반 서술/다이어그램 | . 특징 | -요구사항을 정확하고 간결하게 표현 가능-요구사항에 대한 결과 일관적이므로 완전성 검증 가능-표기법이 어려워 사용자가 이해하기 어려움 | -자연어의 사용으로 인해 일관성 떨어지고 해석 달라질 수 있음-내용의 이해가 쉬워 의사소통 용이 | . 종류 | VDM, Z, Petri-net, CSP | FSM, Decision Table, ER모델링, State Chart(SADT) | . 타당성 조사 . 개발 프로세스가 비즈니스 목적에 부합되는지, 예산은 적정한지 등에 대한 정보를 수집, 평가한 보고서를 토대로 수행 . 형상 관리(SCM) . 소프트웨어 개발 단계의 각 과정에서 만들어지는 프로그램, 설명 문서, 데이터 등을 통칭하여 형상이라고 함 . 형상 관리: 형상들의 변경 사항을 관리하는 일련의 활동 .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/07/theory7.html",
            "relUrl": "/theory/2021/03/07/theory7.html",
            "date": " • Mar 7, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "요구사항 정의",
            "content": "1. 요구사항 . 요구사항은 소프트웨어가 어떤 문제를 해결하기 위해 제공하는 서비스에 대한 설명 과 정상적으로 운영되는데 필요한 제약조건 | 소프트웨어 개발이나 유지 보수 과정에서 필요한 기준과 근거를 제공 | 개발에 참여하는 이해관계자들 간의 의사소통을 원활하게 하는 데 도움 | 유형 기능 요구사항(Functional requirements) | 비기능 요구사항(Non-functional requirements) | 사용자 요구사항(User requirements) | 시스템 요구사항(System requirements) | . | . 2. 기능 요구사항 . 시스템이 무엇을 하는지, 어떤 기능을 하는지 등의 기능이나 수행과 관련된 요구사항 | 시스템의 입력이나 출력으로 무엇이 포함되어야 하는지에 대한 사항 | 시스템이 어떤 데이터를 저장하거나 연산을 수행해야 하는지에 대한 사항 | 시스템이 반드시 수행해야 하는 기능 | 사용자가 시스템을 통해 제공받기 원하는 기능 | . 3. 비기능 요구사항 . 품질이나 제약사항과 관련된 요구사항 | 시스템 장비 구성 요구사항 | 성능 요구사항 | 인터페이스 요구사항 | 데이터 구축에 필요한 요구사항 | 테스트 요구사항 | 보안 요구사항 | 품질 요구사항: 가용성, 정합성, 상호 호환성, 대응성, 이식성, 확장성, 보안성 등 | 제약사항 | 프로젝트 관리 요구사항 | 프로젝트 자원 요구사항 | . 4. 사용자 요구사항 . 사용자 관점에서 본 시스템이 제공해야 할 요구사항 | 사용자를 위한 것으로, 친숙한 표현으로 이해하기 쉽게 작성 | . 5. 시스템 요구사항 . 개발자 관점에서 본 시스템 전체가 사용자와 다른 시스템에 제공해야 할 요구사항 | 전문적이고 기술적인 용어로 표현 | 소프트웨어 요구사항이라고도 함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/06/theory6.html",
            "relUrl": "/theory/2021/03/06/theory6.html",
            "date": " • Mar 6, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "개발 기술 환경 파악의 개요",
            "content": "1. 개발 기술 환경 파악의 개요 . 개발하고자 하는 소프트웨어와 관련된 운영체제(OS), 데이터베이스 관리 시스템(DBMS), 미들웨어 등을 선정할 때 고려해야 할 사항을 기술하고 오픈소스를 사용할 때 주의해야 할 내용 제시 . 2. 운영체제(OS) . 운영체제는 컴퓨터 시스템의 자원을 효율적으로 관리하며 사용자가 컴퓨터를 편리하고 효율적으로 사용할 수 있도록 환경을 제공하는 소프트웨어 | 컴퓨터 사용자와 컴퓨터 하드웨어 간의 인터페이스로서 동작하는 시스템 소프트웨어의 일종 | 다른 응용 프로그램이 유용한 작업을 할 수 있도록 환경 제공 | 운영체제 관련 요구사항 식별 시 고려사항 가용성 | 성능 | 기술 지원 | 구축 비용 | 주변 기기 | . | . 3. 데이터베이스 관리 시스템(DBMS) . 데이터베이스 관리 시스템은 사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성하고 데이터베이스를 관리해주는 소프트웨어 | 기존의 파일 시스템이 갖는 데이터의 종속성과 중복성의 문제를 해결하기 위해 제안된 시스템 | 모든 응용 프로그램들이 데이터베이스를 공용할 수 있도록 관리 | DBMS 관련 요구사항 식별 시 고려사항 가용성 | 성능 | 기술 지원 | 구축 비용 | 상호 호환성 | . | . 4. 웹 애플리케이션 서버(WAS) . 사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어 | 데이터 접근, 세션 관리, 트랜잭션 관리 등을 위한 라이브러리 제공 | 주로 데이터베이스 서버와 연동해서 사용 | WAS 관련 요구사항 식별 시 고려사항 가용성 | 성능 | 기술 지원 | 구축 비용 | . | . 5. 오픈 소스(Open Source) . 오픈 소스는 누구나 별다른 제한 없이 사용할 수 있도록 소스 코드를 공개한 소프트웨어 | 오픈 소스 라이선스 만족 | 오픈 소스 관련 요구사항 식별 시 고려사항 라이선스의 종류 | 사용자 수 | 기술의 지속 가능성 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/05/theory5.html",
            "relUrl": "/theory/2021/03/05/theory5.html",
            "date": " • Mar 5, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "현행 시스템 파악",
            "content": "1. 현행 시스템 파악 절차 . 프로세스 현행 시스템 내용 . 1단계 | 시스템 구성 파악 | 조직의 주요 업무를 담당하는 기간 업무와 이를 지원하는 지원 업무로 구분하여 기술 | .   | 시스템 기능 파악 | 현재 제공하는 기능들을 주요 기능과 하부 기능, 세부 기능으로 구분하여 계층형으로 표시 | .   | 시스템 인터페이스 파악 | 단위 업무 시스템 간에 주고받는 데이터의 종류, 형식, 프로토콜, 연계 유형, 주기 등을 명시 | . 2단계 | 아키텍처 구성 파악 | 최상위 수준에서 계층별로 표현한 아키텍처 구성도 작성 | .   | 소프트웨어 구성 파악 | 소프트웨어들의 제품명, 용도, 라이선스 적용 방식, 라이선스 수 등을 명시 | . 3단계 | 하드웨어 구성 파악 | 단위 업무 시스템들이 운용되는 서버의 주요 사양과 수량, 서버의 이중화 적용 여부 명시 | .   | 네트워크 구성 파악 | 서버의 위치, 서버 간의 네트워크 연결 방식을 네트워크 구성도로 작성 | . *서버의 주요 사양 . 서버의 CPU 처리 속도, 메모리 크기, 하드디스크의 용량 등을 파악해서 명시 . *서버의 이중화 . 운용 서버에 장애가 발생했을 때 대기 서버에서 서비스를 계속 유지할 수 있도록 대기 서버에도 동일하게 복제되도록 관리하는 것 .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/04/theory4.html",
            "relUrl": "/theory/2021/03/04/theory4.html",
            "date": " • Mar 4, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "XP 기법",
            "content": "1. XP(eXtreme Programming) . 수시로 발생하는 고객의 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성 향상 | 짧고 반복적 개발 주기, 단순한 설계, 고객의 적극적 참여를 통해 소프트웨어 빠르게 개발하는 것 목표 | 릴리즈 기간 짧게 반복 -&gt; 고객의 요구사항 반영에 대한 가시성 높임 | XP의 5가지 핵심 가치(용단의 피존) 용기 | 단순성 | 의사소통 | 피드백 | 존중 | . | . 2. XP 개발 프로세스 . 프로세스 내용 . 릴리즈 계획 수립 | -부분/전체 개발 완료 시점에 대한 일정 수립-부분적으로 기능이 완료된 제품 제공하는 것: 릴리즈 | . 이터레이션(주기) | 개발 작업 진행 과정 (1~3주) | . 승인 검사(인수 테스트) | 한 이터레이션 내 부분 완료 제품 구현되면 수행하는 테스트 | . 소규모 릴리즈 | 릴리즈의 규모를 축소한 것(요구사항에 유연하게 대응) | . 3. XP의 주요 실천 방법 . 실천 방법 내용 . 짝 프로그래밍(Pair Programming) | 다른 사람과 함께 프로그래밍 수행하여 개발 책임 나눠 갖는 환경 조성 | . 공동 코드 소유(Collective Ownership) | 개발 코드에 대한 권한과 책임 공동 소유 | . 테스트 주도 개발(Test-Driven Development) | -실제 코드 작성 전 테스트케이스 먼저 작성하여 무엇을 해야할지 정확히 파악-테스트가 지속적으로 진행될 수 있도록 자동화된 테스팅 도구(구조, 프레임워크) 사용 | . 전체 팀(Whole Team) | 개발에 참여하는 모든 구성원(고객 포함)들은 각자 자신의 역할이 있고 책임 가져야 함 | . 계속적인 통합(Continuous Integration) | 모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리될 때마다 지속적으로 통합됨 | . **리팩토링(Refactoring)** | -프로그램 기능의 변경 없이 시스템을 재구성-목적: 프로그램을 쉽게 이해하고 수정하여 빠르게 개발 | . 소규모 릴리즈(Small Release) | 릴리즈 기간을 짧게 반복하여 요구 변화에 신속히 대응 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/03/theory3.html",
            "relUrl": "/theory/2021/03/03/theory3.html",
            "date": " • Mar 3, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "스크럼 기법",
            "content": "1. 스크럼(Scrum) . 팀이 중심이 되어 개발의 효율성을 높이는 기법 | 팀원 스스로가 스크럼 팀을 구성하고 개발 작업 스스로 해결 | . 2. 스크럼 팀 . 구성원 역할 . 제품 책임자(PO) | -요구사항이 담긴 백로그를 작성하는 주체-이해관계자들 중 개발될 제품에 대한 이해도가 높고 요구사항을 책임지고 이해를 결정할 사람 | . 스크럼 마스터(SM) | 스크럼 팀의 가이드 역할 | . 개발팀(DT) | 위 구성원 제외 모든 팀원. 개발 수행 | . 백로그: 제품 개발에 필요한 모든 요구사항의 우선순위를 부여한 목록 . 3. 스크럼 개발 프로세스 . Product Backlog -&gt; Sprint Backlog(스프린트 계획 회의) -&gt; 스프린트 수행(매일 일일 스크럼 회의) -&gt; 스프린트 검토 회의, 스프린트 회고 . 프로세스 내용 . 스프린트 계획 회의 | 제품 백로그 중 이번 스프린트에서 수행할 작업 대상으로 단기 일정 수립 | . 스프린트 | 개발 작업 진행. 2~4주 기간 | . 일일 스크럼 회의 | - 모든 팀원이 매일 약 15분 동안 진행 상황 점검- 남은 작업 시간 소멸 차트에 표시 | . 스프린트 검토 회의 | 부분/전체 완성 제품이 요구사항에 잘 부합하는지 테스팅 | . 스프린트 회고 | 정해놓은 규칙 준수 여부 및 개선 사항 확인, 기록 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/02/theory2.html",
            "relUrl": "/theory/2021/03/02/theory2.html",
            "date": " • Mar 2, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "소프트웨어 생명 주기",
            "content": "1. 소프트웨어 생명 주기 . 소프트웨어를 개발하기 위한 설계, 운용, 유지보수 등의 과정을 각 단계별로 나눈 것 | sw 개발 단계 + 각 단계별 주요 활동 + 활동 결과 산출물 폭포수 모형 | 프로토타입 모형 | 나선형 모형 | 애자일 모형 | . | . 2. 폭포수 모형 . 각 단계를 확실히 매듭짓고 철저하게 검토 후 다음 단계로 진행 | 이전 단계로 돌아갈 수 없음 | 가장 오래되고 폭넓게 사용된 전통적인 모형 | 적용한 경험과 성공 사례 많음 | 각 단계 종료 시 명확한 결과물 산출 필요 | . 3. 프로토타입 모형 . 실제 개발될 소프트웨어에 대한 견본품(프로토타입)을 만들어 최종 결과물 예측하는 모형 | 사용자와 시스템 사이의 인터페이스에 중점을 두어 개발 | . 4. 나선형 모형 . 여러 번의 소프트웨어 개발 과정 반복하여 점진적으로 최종 완성하는 모형 | 보헴(Bohem)이 제안 | 폭포수, 프로토타입의 장점 + 위험 분석 기능 추가 | 누락되거나 추가된 요구사항 추가 가능 | 유지보수 과정 불필요 | . 계획 수립 -&gt; 위험 분석 -&gt; 개발 및 검증 -&gt; 고객 평가 -&gt; 계획 수립 .. . 5. 애자일 모형 . 고객의 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하며 개발하는 모형 | 고객과의 소통에 초점을 맞춘 방법론 통칭 | 폭포수 모형과 대조적 | 대표적 개발 모형 스크럼(Scrum) | XP(eXtreme Programming) | 칸반(Kanban) | Lean | 기능 중심 개발(FDD: Feature Driven Development) | . | 4가지 핵심 가치 개인과 상호작용 &gt; 프로세스, 도구 | 실행되는 SW &gt; 방대한 문서 | 고객과 협업 &gt; 계약 협상 | 변화에 반응 &gt; 계획 | . | . 6. 소프트웨어 공학 . 소프트웨어 위기를 극복하기 위한 방안으로 연구된 학문 . 여러 방법론과 도구, 관리 기법을 통한 SW의 품질과 생산성 향상 목적 | 기본 원칙 현대적인 프로그래밍 기술을 계속적으로 적용해야 한다. | 개발된 sw의 품질이 유지되도록 지속적으로 검증해야 한다. | sw 개발 관련 사항 및 결과에 대한 명확한 기록을 유지해야 한다. | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/01/theory1.html",
            "relUrl": "/theory/2021/03/01/theory1.html",
            "date": " • Mar 1, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://eunkyung99.github.io/gang/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://eunkyung99.github.io/gang/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "김은경 . 한국외국어대학교 컴퓨터.전자시스템공학부 18학번 데이터와 웹 개발, 교육에 관심이 많은 개발자입니다. . 📧 kek9520@naver.com . 🔗 깃허브 페이지 . ✍🏻 블로그 페이지 . . 🔎한 눈에 보기 . *자세히 보기: 원본 페이지 *하이퍼링크 항목을 클릭하면 상세 설명 페이지로 이동합니다. . . 👩🏻‍🎓 현재 . 한국외국어대학교 글로벌캠퍼스 컴퓨터.전자시스템공학부 4학년 | 데이터, 웹 개발에 관심이 많은 개발자 | 전공심화+스페인어통.번역학과 부전공 | 총 학점: 4.2 / 4.5 (130학점 이수) | 전공 학점: 4.25 / 4.5 (74학점 이수) | . 👩🏻‍💼 프로젝트 . 2020.07-2020.08 제이엠스마트 현장 실습(2개월) | 웹 개발 업무 수행 php, HTML, javascript 사용 | . | 2020.11~2021.08 학부연구생 연구 진행(10개월) . -압축 적용 Erasure coding 성능 실험 . -RISC-V VP 기반 CNN 딥러닝 가속기 시스템에서 Object Detection 일부 구현 . | 2021.01-2021.02 SJSU SVSTIP 해외교육 카페 추천 앱 개발 프로젝트 | 무료 호스팅 사이트 서버 구축 및 DB 관리 | Java 기반 안드로이드 앱 개발 | 팀 2등 상, 개인 우수상(3명 중 1명) 수상 | . | 2021.03-2021.05 캡스톤 프로젝트 키오스크 대치 앱 시스템 개발 | AWS 서버, 데이터베이스 구축 및 관리 | kotlin 기반 안드로이드 앱 개발 | . | 2021.09- 메디칼스탠다드 인턴(4개월) 웹 개발 업무 수행 - 하이퍼링크 수정 | node.js 사용 | . | . 🌟 외부 활동 . 2018.11 교내 이공계 학술제 참가 | 교내 빅데이터 학회 소속 - 데이터 분석 공부 dacon 대회 공부 | . | 2021.07 삼성 SDS 알고리즘 교육 수료 | 2021.08 교내 알고리즘 특강 교육 수료 | . 🎖️ 자격증 . 토익 895 / 990 2021.04 취득 | 오픽 IH 2021.08 취득 | ADsP(데이터 분석 준전문가) 2021.03 취득 | SQLD(SQL 개발자) 2021.03 취득 | 정보처리기사 2021.08 취득 | . 👩🏻‍🏫 교육 활동 . 2019.03-2019.06 교내 튜터링 프로그램 참가 과 후배들에게 C 언어 튜터링 진행 | . | 2019.07-2019.08 월드프렌즈 봉사활동 코스타리카🇨🇷에서 IT 교육 진행 | . | 2021.07~ 한국외대 SW 봉사단 초등학생 대상 sw 관련 수업 보조 sw와 3D 입체 교육 수업 | sw와 환경 융합 교육 수업 | . | . | . 🏆 수상 내역 . 교내 TOPCIT 성적 우수상(2021.05 응시) | . 👩🏻‍🎨 성격 . 부족한 점 → 배우려는 자세 | 정리, 발표하는 습관 → 원활한 소통 | 다양한 분야에 관심이 많음 | 응용하는 것을 좋아함 | . . Web Programming . AI &amp; Data Study . Application . Education . 전공이수학점 내역 .",
          "url": "https://eunkyung99.github.io/gang/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Pages",
          "content": "github . []: https://github.com/Eunkyung99 “github page” .",
          "url": "https://eunkyung99.github.io/gang/pages/",
          "relUrl": "/pages/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://eunkyung99.github.io/gang/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}