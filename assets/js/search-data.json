{
  
    
        "post0": {
            "title": "UI 표준 및 지침",
            "content": "1. UI 표준 및 지침 . UI 표준: 전체 시스템에 포함된 모든 UI에 공통적으로 적용될 내용으로, 화면 구성이나 화면 이동 등이 포함됨 | UI 지침: UI 요구사항, 구현 시 제약사항 등 UI 개발 과정에서 꼭 지켜야 할 공통의 조건 | . 2. UI 스타일 가이드 . 개발자나 디자이너들이 UI를 작성할 때 기준이 되는 규칙들 | 구동 환경, 레이아웃, 네비게이션 등을 정의 | . 3. UI 스타일 가이드 작성 순서 . 구동 환경 정의 . 컴퓨터 OS, 웹 브라우저, 모니터 해상도, 프레임 세트 등을 사용 환경에 적합하도록 규정함 | | 레이아웃 정의 . 화면 구조를 정의하고 각 영역의 메뉴를 구성 | | 네비게이션 정의 . 네비게이션의 메뉴 타입을 선택하여 적용 | | 기능 정의 . 시스템에 적용할 업무 과정에서 일어나는 모든 활동이나 필요한 데이터 간의 관계 등을 논리적인 모델로 상세화 | | 구성 요소 정의 . 화면에 표시할 그리드나 버튼 등을 정의 | |",
            "url": "https://eunkyung99.github.io/gang/theory/2021/06/10/theory100.html",
            "relUrl": "/theory/2021/06/10/theory100.html",
            "date": " • Jun 10, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "사용자 인터페이스",
            "content": "1. 사용자 인터페이스(UI, User Interface) . 사용자와 시스템 간의 상호작용이 원활하게 이뤄지도록 도와주는 장치나 소프트웨어 | 세 가지 분야 정보 제공과 전달을 위한 물리적 제어에 관한 분야 | 콘텐츠의 상세적인 표현과 전체적인 구성에 관한 분야 | 모든 사용자가 편리하고 간편하게 사용하도록 하는 기능에 관한 분야 | . | . 2. 사용자 인터페이스의 구분 . CLI(Command Line Interface) 명령과 출력이 텍스트 형태로 이뤄지는 인터페이스 | . | GUI(Graphical User Interface) 아이콘이나 메뉴를 마우스로 선택하여 작업을 수행하는 그래픽 환경의 인터페이스 | . | NUI(Natural User Interface) 사용자의 말이나 행동으로 기기를 조작하는 인터페이스 | . | . 3. 사용자 인터페이스의 기본 원리 . 직관성: 누구나 쉽게 이해하고 사용할 수 있어야 함 | 유효성: 사용자의 목적을 정확하고 완벽하게 달성해야 함 | 학습성: 누구나 쉽게 배우고 익힐 수 있어야 함 | 유연성: 사용자의 요구사항을 최대한 수용하고 실수를 최소화해야 함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/06/09/theory99.html",
            "relUrl": "/theory/2021/06/09/theory99.html",
            "date": " • Jun 9, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "인터페이스 구현 검증",
            "content": "1. 인터페이스 구현 검증 . 인터페이스가 정상적으로 문제 없이 작동하는지 확인하는 것 | 인터페이스 구현 검증 도구와 감시 도구를 이용하여 인터페이스의 동작 상태를 확인 | . 2. 인터페이스 구현 검증 도구 . 인터페이스 단위 기능과 시나리오 등을 기반으로 하는 통합 테스트가 필요함 | 통합 테스트를 수행하기 위해 사용하는 테스트 자동화 도구 | xUnit Java(Junit), C++(Cppunit), .Net(Nunit) 등 다양한 언어를 지원하는 단위 테스트 프레임워크 | . | STAF 서비스 호출 및 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크 | 크로스 플랫폼이나 분산 소프트웨어에서 테스트 환경을 조성할 수 있도록 지원 | 분산 소프트웨어의 경우 각 분산 환경에 설치된 데몬이 프로그램 테스트에 대한 응답을 대신하며, 테스트가 완료되면 이를 통합하고 자동화하여 프로그램을 완성함 | . | FitNesse 웹 기반 테스트 케이스 설계, 실행, 결과 확인 등을 지원하는 테스트 프레임워크 | . | NTAF Fitnesse의 장점인 협업 기능과 STAF의 장점인 재사용 및 확장성을 통합한 NHN(Naver)의 테스트 자동화 프레임워크 | . | Selenium 다양한 브라우저 및 개발 언어를 지원하는 웹 애플리케이션 테스트 프레임워크 | . | watir Ruby를 사용하는 애플리케이션 테스트 프레임워크 | . | . 3. 인터페이스 구현 감시 도구 . 인터페이스 동작 상태는 APM(애플리케이션 성능 관리)을 사용하여 감시할 수 있음 | APM을 통해 데이터베이스와 웹 애플리케이션의 트랜잭션, 변수값, 호출 함수, 로그 및 시스템 부하 등 종합적인 정보를 조회하고 분석할 수 있음 | 스카우터(Scouter) 애플리케이션 및 OS 자원에 대한 모니터링 기능을 제공하는 오픈소스 APM 소프트웨어 | . | 제니퍼(Jennifer) 애플리케이션의 개발부터 테스트, 오픈, 운영, 안정화까지, 전 단계에 걸쳐 성능을 모니터링하고 분석해주는 소프트웨어 | . | . 4. APM(Application Performance Management/Monitoring) . APM은 애플리케이션의 성능 관리를 위해 접속자, 자원 현황, 트랜잭션 수행 내역, 장애 진단 등 다양한 모니터링 기능을 제공하는 도구임 | 리소스 방식 Nagios, Zabbix, Cacti 등 | . | 엔드투엔드 방식 VisualVM, 제니퍼, 스카우터 등 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/06/08/theory98.html",
            "relUrl": "/theory/2021/06/08/theory98.html",
            "date": " • Jun 8, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "인터페이스 보안",
            "content": "1. 인터페이스 보안 . 인터페이스의 보안성 향상을 위해 인터페이스의 보안 취약점을 분석한 후 적절한 보안 기능을 적용하는 것 | . 2. 인터페이스 보안 기능 적용 . 네트워크 영역 인터페이스 송.수신 간 스니핑 등을 이용한 데이터 탈취 및 변조 위협을 방지하기 위해 네트워크 트래픽에 대한 암호화를 설정 | 암호화는 인터페이스 아키텍처에 따라 IPSec, SSL, S-HTTP 등의 다양한 방식으로 적용 | . | 애플리케이션 영역 소프트웨어 개발 보안 가이드를 참조하여 애플리케이션 코드 상의 보안 취약점을 보완하는 방향으로 애플리케이션 보안 기능 적용 | . | 데이터베이스 영역 데이터베이스, 스키마, 엔티티의 접근 권한과 프로시저, 트리거 등 데이터베이스 동작 객체의 보안 취약점에 보안 기능을 적용 | 개인 정보나 업무상 민감한 데이터의 경우 암호화나 익명화 등 데이터 자체의 보안 방안도 고려 | . | . 3. 데이터 무결성 검사 도구 . 인터페이스 보안 취약점을 분석하는데 사용되는 도구 | 데이터 무결성 검사 도구는 시스템 파일의 변경 유무를 확인하고, 파일이 변경되었을 경우 이를 관리자에게 알려줌 | 종류: Tripwire, AIDE, Samhain, Claymore, Slipwire, Fcheck 등 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/06/07/theory97.html",
            "relUrl": "/theory/2021/06/07/theory97.html",
            "date": " • Jun 7, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "인터페이스 예외 처리",
            "content": "1. 인터페이스 예외 처리 . 구현된 인터페이스가 동작하는 과정에서 기능상 예외 상황이 발생했을 때 이를 처리하는 절차 | 방법 데이터 통신을 이용한 방법 | 인터페이스 엔티티를 이용한 방법 | . | . 2. 데이터 통신을 이용한 인터페이스 예외 처리 . 인터페이스 객체의 송.수신 시 발생할 수 있는 예외 케이스를 정의하고 각 예외 케이스마다 예외 처리 방법 기술 | JSON, XML 등 인터페이스 객체를 이용해 구현한 인터페이스 동작이 실패할 경우를 대비한 것임 | . 3. 인터페이스 엔티티를 이용한 인터페이스 예외 처리 . 인터페이스 동작이 실패할 경우를 대비하여 해당 엔티티에 인터페이스의 실패 상황과 원인 등을 기록하고, 이에 대한 조치를 취할 수 있도록 사용자 및 관리자에서 알려주는 방식으로 예외 처리 방법 정의 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/06/06/theory96.html",
            "relUrl": "/theory/2021/06/06/theory96.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "인터페이스 구현",
            "content": "1. 인터페이스 구현 . 송.수신 시스템 간의 데이터 교환 및 처리를 실현해주는 작업 | 방법 데이터 통신을 이용한 인터페이스 구현 | 인터페이스 엔티티를 이용한 인터페이스 구현 | . | . 2. 데이터 통신을 이용한 인터페이스 구현 . 애플리케이션 영역에서 데이터 포맷을 인터페이스 대상으로 전송하면 이를 수신 측에서 파싱하여 해석하는 방식 | 주로 JSON이나 XML 형식의 데이터 포맷을 사용하여 인터페이스를 구현 | JSON을 이용한 인터페이스 구현 순서 송신 측에서 인터페이스 객체를 생성할 데이터를 각 시스템 환경에 맞게 선택 | JSON을 이용해 데이터를 인터페이스 객체로 만든다. | 인터페이스 객체를 AJAX 기술 등을 이용해 수신 측으로 보냄 | 수신 측에서 인터페이스 객체를 수신해 파싱한 후 처리 | 수신 측에서 송신 측으로 처리 결과 보냄 | | . 3. 인터페이스 엔티티를 이용한 인터페이스 구현 . 인터페이스가 필요한 시스템 사이에 별도의 인터페이스 엔티티를 두어 상호 연계하는 것 | 일반적으로 인터페이스 테이블을 엔티티로 활용 | 인터페이스 테이블을 이용한 인터페이스 구현 순서 송신 측에서 인터페이스 이벤트가 발생하면 인터페이스 테이블에 인터페이스 데이터를 기록(write) | 송신 측 인터페이스 테이블에서 정해진 주기에 따라 인터페이스 데이터를 전송 | 수신 측 인터페이스 테이블에 인터페이스 데이터가 입력되면 정해진 주기에 따라 인터페이스 데이터를 읽음(read) | 수신 측 인터페이스 테이블에서 인터페이스 데이터를 읽은 후 사전에 정의된 데이터 트랜잭션을 수행 | | . 4. JSON(JavaScript Object Notation) . JSON은 웹과 컴퓨터 프로그램에서 용량이 적은 데이터를 교환하기 위해 데이터 객체를 속성.값의 쌍(Attribute-Value Pairs) 형태로 표현하는 개방형 표준 포맷 | 비동기 처리에 사용되는 AJAX에서 XML을 대체하여 사용되고 있음 | . 5. AJAX(Asynchronous JavaScript and XML) . 자바 스크립트를 사용하여 클라이언트와 서버 간에 XML 데이터를 주고 받는 비동기 통신 기술 | 전체 페이지를 새로 고치지 않아도 웹 페이지 일부 영역만을 업데이트할 수 있음 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/06/05/theory95.html",
            "relUrl": "/theory/2021/06/05/theory95.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "인터페이스 기능 구현 정의",
            "content": "1. 인터페이스 기능 구현의 정의 . 인터페이스를 실제로 구현하기 위해 인터페이스 기능에 대한 구현 방법을 기능별로 기술하는 것 | 인터페이스 기능 구현 정의 절차 | . 컴포넌트 명세서 확인 컴포넌트의 개요, 내부 클래스의 클래스명과 설명 등을 통해 컴포넌트가 가지고 있는 주요 기능 확인 | 인터페이스 클래스를 통해 인터페이스에 필요한 주요 기능 확인 | | 인터페이스 명세서 확인 컴포넌트 명세서의 인터페이스 클래스에 명시된 인터페이스의 세부 조건 및 기능을 확인 | | 일관된 인터페이스 구현 정의 인터페이스의 기능, 데이터 표준, 모듈 세부 설계서를 통해 인터페이스의 기능 구현을 정의 | 정의한 인터페이스 기능 구현에 대해 송.수신 측에서 진행해야 할 절차까지 다시 세부적으로 정의 | | 정의된 인터페이스 기능 구현 정형화 정의한 인터페이스 기능 구현을 특정 하드웨어나 소프트웨어에 의존적이지 않게 사람들이 보기 쉽고 표준화되도록 정형화 | | 2. 모듈 세부 설계서 . 모듈의 구성 요소와 세부적인 동작 등을 정의한 설계서 . | 종류 . 컴포넌트 명세서 . 컴포넌트의 개요 및 내부 클래스의 동작, 인터페이스를 통해 외부와 통신하는 명세 등을 정의한 것 | . | 인터페이스 명세서 . 컴포넌트 명세서의 항목 중 인터페이스 클래스의 세부 조건 및 기능 등을 정의한 것 | . | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/06/04/theory94.html",
            "relUrl": "/theory/2021/06/04/theory94.html",
            "date": " • Jun 4, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "모듈 간 인터페이스 데이터 표준 확인",
            "content": "1. 인터페이스 데이터 표준 . 모듈 간 인터페이스에 사용되는 데이터의 형식을 표준화하는 것 | 기존의 데이터 중에서 공통 영역을 추출하거나 어느 한쪽의 데이터를 변환하여 정의 | 확인된 인터페이스 데이터 표준은 인터페이스 기능 구현을 정의하는데 사용됨 | . 2. 인터페이스 데이터 표준 확인 . 데이터 인터페이스 확인 데이터 표준을 위해 식별된 데이터 인터페이스에서 입.출력값의 의미와 데이터의 특성 등을 구체적으로 확인 | | 인터페이스 기능 확인 데이터 표준을 위해 식별된 인터페이스 기능을 기반으로 인터페이스 기능 구현을 위해 필요한 데이터 항목 확인 | | 인터페이스 데이터 표준 확인 데이터 인터페이스에서 확인된 데이터 표준과 인터페이스 기능을 통해 확인된 데이터 항목들을 검토하여 최종적으로 데이터 표준을 확인 | |",
            "url": "https://eunkyung99.github.io/gang/theory/2021/06/03/theory93.html",
            "relUrl": "/theory/2021/06/03/theory93.html",
            "date": " • Jun 3, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "모듈 연계를 위한 인터페이스 기능 식별",
            "content": "1. 모듈 연계 . 내부 모듈과 외부 모듈 또는 내부 모듈 간 데이터의 교환을 위해 관계를 설정하는 것 . 대표적인 모듈 연계 방법 EAI(Enterprise Application Integration) | ESB(Enterprise Service Bus) | 웹 서비스(Web Service) | . | . 2. EAI(Enterprise Application Integration) . 기업 내 각종 애플리케이션 및 플랫폼 간의 정보 전달, 연계, 통합 등 상호 연동이 가능하게 해주는 솔루션임 | 구축 유형 | Point-to-Point 가장 기본적인 애플리케이션 통합 방식 | 애플리케이션을 1:1로 연결 | 변경 및 재사용이 어려움 | | . | Hub &amp; Spoke 단일 접점인 허브 시스템을 통해 데티어를 전송하는 중앙 집중형 방식 | 확장 및 유지 보수가 용이함 | 허브 장애 발생 시 시스템 전체에 영향을 미침 | | . | Message Bus(ESB 방식) 애플리케이션 사이에 미들웨어를 두어 처리하는 방식 | 확장성이 뛰어나며 대용량 처리가 가능함 | | . | Hybrid Hub &amp; Spoke와 Message Bus의 혼합 방식 | 그룹 내에서는 허브 앤 스포크 방식을, 그룹 간에는 메시지 버스 방식을 사용 | 필요한 경우 한 가지 방식으로 EAI 구현이 가능 | 데이터 병목 현상 최소화 가능 | | . | . 3. ESB(Enterprise Service Bus) . 애플리케이션 간 연계, 데이터 변환, 웹 서비스 지원 등 표준 기반의 인터페이스를 제공하는 솔루션 | 애플리케이션 통합 측면에서 EAI와 유사하지만 애플리케이션 보다는 서비스 중심의 통합을 지향함 | 특정 서비스에 국한되지 않고 범용적으로 사용하기 위하여 애플리케이션과의 결합도를 약하게 유지함 | 관리 및 보안 유지가 쉬움 | 높은 수준의 품질 지원이 가능함 | | . 4. 웹 서비스 . 네트워크의 정보를 표준화된 서비스 형태로 만들어 공유하는 기술 | 서비스 지향 아키텍처(SOA) 개념을 실현하는 대표적인 방법 | 웹 서비스의 구성 SOAP HTTP, HTTPS, SMTP 등을 활용하여 XML 기반의 메시지를 네트워크 상에서 교환하는 프로토콜 | . | UDDI WSDL을 등록하여 서비스와 서비스 제공자를 검색하고 접근하는데 사용 | . | WSDL 웹 서비스명, 서비스 제공 위치, 프로토콜 등 웹 서비스에 대한 상세 정보를 XML 형식으로 구현함 | . | . | . 5. 모듈 간 연계 기능 식별 . 모듈과 연계된 기능을 시나리오 형태로 구체화하여 식별함 | 식별된 연계 기능은 인터페이스 기능을 식별하는데 사용됨 | . 6. 모듈 간 인터페이스 기능 식별 . 식별된 모듈 간 관련 기능을 검토하여 인터페이스 동작에 필요한 기능을 식별 | 외부 및 인터페이스 모듈 간 동작하는 기능을 통해 인터페이스 기능을 식별 | 해당 업무에 대한 시나리오를 통해 내부 모듈과 관련된 인터페이스 기능을 식별 | 식별된 인터페이스 기능 중에서 실제적으로 필요한 인터페이스 기능을 최종적으로 선별 | 식별된 인터페이스 기능은 인터페이스 기능 구현을 정의하는데 사용됨 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/06/02/theory92.html",
            "relUrl": "/theory/2021/06/02/theory92.html",
            "date": " • Jun 2, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "모듈 간 공통 기능 및 데이터 인터페이스 확인",
            "content": "1. 모듈 간 공통 기능 및 데이터 인터페이스 . 공통 기능은 모듈의 기능 중에서 공통적으로 제공되는 기능을 의미 | 데이터 인터페이스는 모듈 간 교환되는 데이터가 저장될 파라미터를 의미 | 모듈 간 공통 기능 및 데이터 인터페이스 확인 절차 | . 인터페이스 설계서를 통해 모듈별 기능을 확인 | 외부 및 내부 모듈을 기반으로 공통으로 제공되는 기능과 각 데이터의 인터페이스를 확인함 | 2. 인터페이스 설계서 . 시스템 사이의 데이터 교환 및 처리를 위해 교환 데이터 및 관련 업무, 송.수신 시스템 등에 대한 내용을 정의한 문서 | 인터페이스 설계서 종류 일반적인 인터페이스 설계서 시스템의 인터페이스 목록, 각 인터페이스의 상세 데이터 명세, 각 기능의 세부 인터페이스 정보를 정의한 문서 | 종류: 시스템 인터페이스 설계서, 상세 기능별 인터페이스 명세서 | . | 정적.동적 모형을 통한 인터페이스 설계서 정적.동적 모형으로 각 시스템의 구성 요소를 표현한 다이어그램을 이용하여 만든 문서 | 시스템을 구성하는 주요 구성 요소 간의 트랜잭션을 통해 해당 인터페이스가 시스템의 어느 부분에 속하고, 해당 인터페이스를 통해 상호 교환되는 트랜잭션의 종류를 확인할 수 있음 | . | . | . 3. 인터페이스 설계서별 모듈 기능 확인 . 인터페이스 설계서에 정의한 모듈을 기반으로 각 모듈의 기능을 확인 | . 구분 외부 모듈 내부 모듈 . 시스템 인터페이스 목록 | 송신 및 전달 부분 | 수신 부분 | . 시스템 인터페이스 설계서 | 데이터 송신 시스템 부분 | 데이터 수신 시스템 부분 | . 상세 기능 인터페이스 명세서 | 오퍼레이션, 사전 조건 | 사후 조건 | . 정적.동적 모형을 통한 인터페이스 설계서 | 인터페이스 영역 | 인터페이스 영역을 제외한 나머지 부분 | . 4. 모듈 간 공통 기능 및 데이터 인터페이스 확인 . 공통 기능: 내.외부 모듈 기능을 통해 공통으로 제공되는 기능 확인 | 데이터 인터페이스: 내.외부 모듈 기능과 공통 기능을 기반으로 필요한 데이터 인터페이스 항목 확인 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/06/01/theory91.html",
            "relUrl": "/theory/2021/06/01/theory91.html",
            "date": " • Jun 1, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "미들웨어 솔루션",
            "content": "1. 미들웨어(Middleware) . 운영체제와 응용 프로그램, 또는 서버와 클라이언트 사이에서 다양한 서비스를 제공하는 소프트웨어 | 표준화된 인터페이스를 제공함으로써 시스템 간의 데이터 교환에 일관성을 보장 | 종류 DB(DataBase) | RPC(Remote Procedure Call) | MOM(Message Oriented Middleware) | TP-Monitor(Transaction Processing Monitor) | ORB(Object Request Broker) | WAS(Web Application Server) | . | . 2. DB . 데이터베이스 벤더에서 제공하는 클라이언트에서 원격의 데이터베이스와 연결하는 미들웨어 | DB를 사용하여 시스템을 구축하는 경우 보통 2-Tier 아키텍처라고 함 | . 3. RPC(원격 프로시저 호출) . 응용 프로그램의 프로시저를 사용하여 원격 프로시저를 마치 로컬 프로시저처럼 호출하는 미들웨어 | . 4. MOM(메시지 지향 미들웨어) . 메시지 기반의 비동기형 메시지를 전달하는 미들웨어 | 온라인 업무보다는 이기종 분산 데이터 시스템의 데이터 동기를 위해 많이 사용 | . 5. TP-Monitor(트랜잭션 처리 모니터) . 온라인 트랜잭션 업무에서 트랜잭션을 처리 및 감시하는 미들웨어 | 항공기나 철도 예약 업무 등 사용자 수가 증가해도 빠른 응답 속도를 유지해야 하는 업무에 주로 사용 | . 6. ORB(객체 요청 브로커) . 코바(CORBA) 표준 스펙을 구현한 객체 지향 미들웨어 | 최근에는 TP-Monitor의 장점인 트랜잭션 처리와 모니터링 등을 추가로 구현한 제품도 있음 | . 7. WAS(웹 애플리케이션 서버) . 사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위한 미들웨어 | 클라이언트/서버 환경보다는 웹 환경을 구현하기 위한 미들웨어 | HTTP 세션 처리를 위한 웹 서버 기능뿐만 아니라 미션-크리티컬한 기업 업무까지 JAVA, EJB 컴포넌트 기반으로 구현이 가능함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/30/theory90.html",
            "relUrl": "/theory/2021/05/30/theory90.html",
            "date": " • May 30, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "인터페이스 방법 명세화",
            "content": "1. 인터페이스 방법 명세화 . 내.외부 시스템이 연계하여 작동할 때 인터페이스별 송.수신 방법, 송.수신 데이터, 오류 식별 및 처리 방안에 대한 내용을 문서로 정리하는 것 | 송.수신 방법 명세화: 내.외부 인터페이스 목록에 있는 각각의 인터페이스에 대해 연계 방식, 통신 및 처리 유형, 발생 주기 등의 송.수신 방법을 정의하고 명세를 작성하는 것 | 송.수신 데이터 명세화: 내.외부 인터페이스 목록에 있는 각각의 인터페이스에 대해 인터페이스 시 필요한 송.수신 데이터에 대한 명세를 작성하는 것 | 오류 식별 및 처리 방안 명세화: 내.외부 인터페이스 목록에 있는 각각의 인터페이스에 대해 인터페이스 시 발생할 수 있는 오류를 식별하고 오류 처리 방안에 대한 명세를 작성하는 것 | 인터페이스별로 송.수신 방법을 명세화하기 위해 필요한 정보 시스템 연계 기술 | 인터페이스 통신 유형 | 처리 유형 | 발생 주기 | . | . 2. 시스템 연계 기술 . DB Link: DB에서 제공하는 DB Link 객체를 이용하는 방식 | API/Open API: 송신 시스템의 데이터베이스에서 데이터를 읽어 와 제공하는 애플리케이션 프로그래밍 인터페이스 프로그램 | 연계 솔루션: EAI 서버와 송.수신 시스템에 설치되는 클라이언트를 이용하는 방식 | Socket: 서버가 통신을 위한 소켓을 생성하여 포트를 할당하고 클라이언트의 통신 요청 시 클라이언트와 연결하여 통신하는 네트워크 기술 | Web Service: 웹 서비스에서 WSDL, UDDI, SOAP 프로토콜을 이용하여 연계하는 서비스 | . 3. 인터페이스 통신 유형 . 단방향: 시스템에서 거래를 요청만 하고 응답이 없는 방식 | 동기: 시스템에서 거래를 요청하고 응답이 올 때까지 대기(Request-Reply)하는 방식 | 비동기: 시스템에서 거래를 요청하고 다른 작업을 수행하다 응답이 오면 처리하는 방식(Send-Recieve, Send-Receive-Acknowledge, Publish-Subscribe) | . 4. 인터페이스 처리 유형 . 실시간 방식: 사용자가 요청한 내용을 바로 처리해야 할 때 사용 | 지연 처리 방식: 데이터를 매건 단위로 처리할 경우 비용이 많이 발생할 때 사용 | 배치 방식: 대량의 데이터를 처리할 때 사용 | . 5. 인터페이스 발생 주기 . 개발할 시스템과 내.외부 시스템 간 송.수신 데이터가 전송되어 인터페이스가 사용되는 주기를 의미 | 업무의 성격과 송.수신 데이터 전송량을 고려하여 메일, 수시, 주 1회 등으로 구분 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/29/theory89.html",
            "relUrl": "/theory/2021/05/29/theory89.html",
            "date": " • May 29, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "송.수신 데이터 식별",
            "content": "1. 식별 대상 데이터 . 송.수신 시스템 사이에서 교환되는 데이터. 규격화된 표준 형식에 따라 전송됨 | 교환되는 데이터의 종류 인터페이스 표준 항목 | 송.수신 데이터 항목 | 공통 코드 | . | . 2. 인터페이스 표준 항목 . 송.수신 시스템을 연계하는데 표준적으로 필요한 데이터 | 시스템 공통부 시스템 간 연동 시 필요한 공통 정보 | 구성 정보: 인터페이스 ID, 전송 시스템 정보, 서비스 코드 정보, 응답 결과 정보, 장애 정보 등 | . | 거래 공통부 시스템들이 연동된 후 송.수신되는 데이터를 처리할 때 필요한 정보 | 구성 정보: 직원 정보, 승인자 정보, 기기 정보, 매체 정보 등 | . | . 3. 송.수신 데이터 항목 . 송.수신 시스템이 업무를 수행하는 데 사용하는 데이터 | 전송되는 데이터 항목과 순서는 인터페이스별로 다름 | . 4. 공통 코드 . 시스템들에서 공통으로 사용하는 코드 | 연계 시스템이나 연계 소프트웨어에서 사용하는 상태 및 오류 코드 등의 항목에 대해 코드값과 코드명, 코드 설명 등을 공통 코드로 관리함 | . 5. 정보 흐름 식별 . 개발할 시스템과 내.외부 시스템 사이에서 전송되는 정보들의 방향성을 식별함 | 개발할 시스템과 내.외부 시스템에 대한 각각의 인터페이스 목록을 확인하여 정보 흐름을 식별함 | 식별한 정보 흐름을 기반으로 송.수신 시스템 사이에서 교환되는 주요 데이터 항목이나 정보 그룹을 도출 | . 6. 송.수신 데이터 식별 . 개발할 시스템과 연계할 내.외부 시스템 사이의 정보 흐름과 데이터베이스 산출물을 기반으로 식별함 . | 송.수신 데이터의 종류에 따라 다음과 같이 식별함 . 인터페이스 표준 항목과 송.수신 데이터 항목 식별: 송.수신 시스템 사이의 교환 범위를 확인하고 인터페이스 표준 항목에 대해 송.수신 데이터 항목을 식별함 | 코드성 데이터 항목 식별: 코드성 데이터 항목에 대해 코드, 코드명, 코드 설명 등의 코드 정보를 식별함 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/28/theory88.html",
            "relUrl": "/theory/2021/05/28/theory88.html",
            "date": " • May 28, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "인터페이스 시스템 식별",
            "content": "1. 인터페이스 시스템 식별 . 인터페이스별로 인터페이스에 참여하는 시스템들을 송신 시스템과 수신 시스템으로 구분하여 작성하는 것 . 2. 인터페이스 시스템 식별을 위한 선행 작업 . 개발 시스템과 내.외부 시스템 식별: 개발할 시스템과 이와 연결할 내.외부 시스템의 상세 식별 정보를 정의하고 목록을 작성함 | 내.외부 시스템 환경 및 관리 주체 식별 실제 운용 환경과 하드웨어 관리 주체를 확인 | 내.외부 시스템 환경: 연계할 시스템 접속에 필요한 IP 또는 URL, Port 정보 등 시스템의 실제 운용 환경 | 내.외부 시스템 관리 주체: 하드웨어 관리 담당자 | . | 내.외부 시스템 네트워크 연결 정보 식별: 내.외부 시스템을 연계하는데 필요한 시스템 로그인 및 DB 정보 등의 네트워크 연결 정보를 확인함 | 인터페이스 식별: 개발할 시스템과 연계할 내.외부 시스템 사이의 인터페이스를 식별하고 인터페이스 목록을 작성함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/27/theory87.html",
            "relUrl": "/theory/2021/05/27/theory87.html",
            "date": " • May 27, 2021"
        }
        
    
  
    
        ,"post14": {
            "title": "시스템 인터페이스 요구사항 분석",
            "content": "1. 인터페이스 요구사항 검증 . 사용자들의 요구사항이 요구사항 명세서에 정확하고 완전하게 기술되었는지 검토하고 개발 범위의 기준인 베이스라인을 설정하는 것 | 수행 순서 | . 요구사항 검토 계획 수립 검토 기준 및 방법, 참여자, 체크리스트, 관련 자료, 일정 등의 검토 계획 수립 | | 검토 및 오류 수정 인터페이스 요구사항 명세서 검토 및 오류 목록과 시정 조치서 작성 | | 베이스라인 설정 검증된 인터페이스 요구사항을 승인받은 후 요구사항 명세서의 베이스라인 설정 | | 2. 요구사항 검증 방법 . 요구사항 검토: 요구사항 명세서의 오류 확인 및 표준 준수 여부 등의 결함 여부를 검토 담당자들이 수작업으로 분석하는 방법 | 동료 검토 요구사항 명세서 작성자가 명세서 내용을 직접 설명하고 동료들이 이를 들으면서 결함을 발견하는 형태의 검토 방법 | . | 워크스루 검토 회의 전에 요구사항 명세서를 미리 배포하여 사전 검토한 후에 짧은 검토 회의를 통해 결함을 발견하는 형태의 검토 방법 | . | 인스펙션 요구사항 명세서 작성자를 제외한 다른 검토 전문가들이 요구사항 명세서를 확인하면서 결함을 발견하는 형태의 검토 방법 | . | 프로토타이핑: 사용자의 요구사항을 정확히 파악하기 위해 실제 개발될 소프트웨어에 대한 견본품을 만들어 최종 결과물을 예측 . | 테스트 설계: 요구사항은 테스트할 수 있도록 작성되어야 하며, 이를 위해 테스트 케이스를 생성하여 요구사항이 현실적으로 테스트 가능한지를 검토 | CASE 도구 활용: 일관성 분석을 통해 요구사항 변경사항의 추적, 분석, 관리, 표준 준수 여부를 확인함 | . 3. 인터페이스 요구사항 검증의 주요 항목 . 완전성: 사용자의 모든 요구사항이 누락되지 않고 완전하게 반영되어 있는가? | 일관성: 요구사항이 모순되거나 충돌되는 점 없이 일관성을 유지하고 있는가? | 명확성: 모든 참여자가 요구사항을 명확히 이해할 수 있는가? | 기능성: 요구사항이 ‘어떻게’ 보다 ‘무엇을’에 중점을 두고 있는가? | 검증 가능성: 요구사항이 사용자의 요구를 모두 만족하고, 개발된 소프트웨어가 사용자의 요구 내용과 일치하는지를 검증할 수 있는가? | 추적 가능성: 요구사항 명세서와 설계서를 추적할 수 있는가? | 변경 용이성: 요구사항 명세서의 변경이 쉽도록 작성되었는가? | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/26/theory86.html",
            "relUrl": "/theory/2021/05/26/theory86.html",
            "date": " • May 26, 2021"
        }
        
    
  
    
        ,"post15": {
            "title": "시스템 인터페이스 요구사항 분석",
            "content": "1. 시스템 인터페이스 요구사항 . 개발할 시스템과 외부 시스템을 연동하는데 필요한 시스템 인터페이스에 대한 요구사항을 기술한 것 | 시스템 인터페이스 요구사항 명세서의 구성 요소 인터페이스 이름 | 연계 대상 시스템 | 연계 범위 및 내용 | 연계 방식 | 송신 데이터 | 인터페이스 주기 | 기타 고려사항 | . | . 2. 시스템 인터페이스 요구사항 분석 . 요구사항을 분류하고 구체적으로 명세한 후 이를 이해관계자에게 전달하는 일련의 과정임 | 소프트웨어 요구사항 분석 기법을 적절히 이용함 | 요구사항의 분해가 필요한 경우 적절한 수준으로 세분화함 | 요구사항 분석 시 누락된 요구사항이나 제한 조건을 추가함 | 요구사항에 대한 상대적 중요도를 평가하여 우선순위을 부여함 | . 3. 시스템 인터페이스 요구사항 분석 절차 . 시스템 인터페이스 관련 요구사항을 선별하여 별도로 요구사항 목록을 만든다. | 요구사항과 관련된 자료를 준비한다. | 기능적인 요구사항과 비기능적인 요구사항으로 분류한다. | 요구사항을 분석하고 요구사항 명세서에 내용을 추가하거나 수정한다. | 추가-수정한 요구사항 명세서와 요구사항 목록을 관련 이해관계자에게 전달한다. |",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/25/theory85.html",
            "relUrl": "/theory/2021/05/25/theory85.html",
            "date": " • May 25, 2021"
        }
        
    
  
    
        ,"post16": {
            "title": "패키지 소프트웨어",
            "content": "1. 패키지 소프트웨어 . 기업에서 일반적으로 사용하는 여러 기능을 통합하여 제공하는 소프트웨어 | 기업에서는 패키지 소프트웨어를 구입하여 기업 환경에 적합하게 커스터마이징하여 사용 | 패키지 소프트웨어를 이용하여 시스템을 구축하는 방식을 패키지 개발 방식이라고 함 | 기능 요구사항을 70% 이상 충족시키는 패키지 소프트웨어가 있을 때만 사용하는 것이 적합함 | 업무 특성에 맞게 전용으로 개발되는 소프트웨어와 비교하여 안정성, 라이선스, 생산성 등에서 차이가 있음 | . 2. 패키지 소프트웨어와 전용 개발 소프트웨어의 비교 .   패키지 소프트웨어 전용 개발 소프트웨어 . 기능 요구사항 | 70% 이상 충족시키는 패키지 소프트웨어가 있는 경우 이용 | 모든 기능 요구사항 반영 가능 | . 안정성 | 품질이 검증되었고 업계 표준 준용 | 개발자의 역량에 따라 달라짐 | . 라이선스 | 판매자 | 회사 | . 생산성 | 개발을 위한 인력과 시간이 절약됨 | 개발을 위한 인력과 시간 필요 | . 호환성 | 보장이 안 됨 | 설계 단계부터 고려하여 개발 | . 유지보수 | 결함 발생 시 즉시 대응이 어려움 | 결함 발생 시 즉시 대응 가능 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/24/theory84.html",
            "relUrl": "/theory/2021/05/24/theory84.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post17": {
            "title": "배치 프로그램",
            "content": "1. 배치 프로그램 . 사용자와의 상호 작용 없이 여러 작업들을 미리 정해진 일련의 순서에 따라 일괄적으로 처리하도록 만든 프로그램 | 필수 요소 대용량 데이터 대량의 데이터를 가져오거나, 전달하거나, 계산하는 등의 처리가 가능해야 함 | . | 자동화 심각한 오류가 발생하는 상황을 제외하고는 사용자의 개입 없이 수행되어야 함 | . | 견고성 잘못된 데이터나 데이터 중복 등의 상황으로 중단되는 일 없이 수행되어야 함 | . | 안정성/신뢰성 오류가 발생하면 오류의 발생 위치, 시간 등을 추적할 수 있어야 함 | . | 성능 다른 응용 프로그램의 수행을 방해하지 않아야 함 | 지정된 시간 내에 처리가 완료되어야 함 | . | . | . 2. 배치 스케줄러 . 일괄 처리 작업이 설정된 주기에 맞춰 자동으로 수행되도록 지원해주는 도구 | 특정 업무(job)를 원하는 시간에 처리할 수 있도록 지원한다는 특성 때문에 잡 스케줄러(Job Scheduler)라고도 불림 | 종류 스프링 배치 Spring Source 사와 Accenture 사가 2007년 공동 개발한 오픈 소스 프레임워크 | 로그 관리, 추적, 트랜잭션 관리, 작업 처리 통계, 작업 재시작 등의 다양한 기능 제공 | . | Quartz 스프링 프레임워크로 개발되는 응용 프로그램들의 일괄 처리를 위한 다양한 기능을 제공하는 오픈 소스 라이브러리 | 수행할 작업과 수행 시간을 관리하는 요소들을 분리하여 일괄 처리 작업에 유연성을 제공 | . | Cron 리눅스의 기본 스케줄러 도구 | crontab 명령어를 통해 작업 예약 | . | . | . 3. crontab 명령어 작성 방법 . 작업 예약 형식 | | 분, 시, 일, 월, 요일에 ‘*‘를 입력하면 매 시기마다 수행함 ** * * * /root/com_1.sh -&gt; 매월 매일 매시 매분마다 com_1.sh 실행 | 30 1 * * * /root/com_2.sh -&gt; 매월 매일 1시 30분에 com_2.sh 실행 | . | 시기 우측에 ‘/[단위]’를 입력하면 시기를 단위로 나눈 나머지가 0일 때마다 명령어를 수행 30 */3 * * * /root/com_1.sh -&gt; 매월 매일 0:30부터 3시간 마다 com_1.sh를 실행함(0:30, 3:30, 6:30, …, 21:30) | . | ‘[시작 시기]-[종료 시기]’를 통해 특정 구간에만 반복하여 명령어 실행 가능 *18-23 20 * * /root/com_1.sh -&gt; 매월 20일 18시~23시 사이에 매분마다 com_1.sh를 실행 | . | 시기는 ‘[시기1], [시기2], [시기3] …‘를 통해 특정 시기에 명령어를 실행할 수 있음 30 23 25 4,9,11 * /root/com_1.sh -&gt; 4/9/11월의 25일 23시 30분에 com_1.sh를 실행 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/23/theory83.html",
            "relUrl": "/theory/2021/05/23/theory83.html",
            "date": " • May 23, 2021"
        }
        
    
  
    
        ,"post18": {
            "title": "보안 및 API",
            "content": "1. 소프트웨어 개발 보안 . 소프트웨어 개발 과정에서 발생할 수 있는 보안 취약점을 최소화하여 보안 위협으로부터 안전한 소프트웨어를 개발하기 위한 일련의 보안 활동 | 데이터의 기밀성, 무결성, 가용성 등의 보안 요소를 충족시키는 것을 목표로 함 | 정부에서 제공하는 소프트웨어 개발 보안 가이드를 참고하여 소프트웨어 개발 과정에서 점검해야 할 보안 항목들을 점검함 | . 2. 소프트웨어 개발 보안 점검 항목 . 세션 통제: 세션의 연결과 연결로 인해 발생하는 정보 관리 | 입력 데이터 검증 및 표현: 입력 데이터에 대한 유효성 검증체계를 갖추고, 검증 실패 시 이를 처리할 수 있도록 코딩 | 보안 기능: 인증, 접근제어, 기밀성, 암호화 등의 기능 | 시간 및 상태: 동시 수행을 지원하는 병렬 처리 시스템이나 다수의 프로세스가 동작하는 환경에서 시간과 실행 상태를 관리하여 시스템이 원활히 동작하도록 코딩 | 에러처리: 소프트웨어 실행 중 발생할 수 있는 오류들을 사전에 정의하여 에러로 인해 발생할 수 있는 문제들을 예방 | 코드 오류: 개발자들이 코딩 중 실수하기 쉬운 형 변환, 자원의 반환 등을 고려하며 코딩 | 캡슐화: 속성과 데이터를 처리하는 함수를 하나의 객체로 묶어 코딩 | API 오용: API를 잘못 사용하거나 보안에 취약한 API를 사용하지 않도록 고려하여 코딩 | . 3. API(Application Programming Interface) . API는 응용 프로그램 개발 시 운영체제나 프로그래밍 언어 등에 있는 라이브러리를 이용할 수 있도록 규칙 등을 정의해 놓은 인터페이스를 의미 | 라이브러리에 있는 다양한 기능들을 손쉽게 이용할 수 있도록 도와주므로 효율적인 개발이 가능함 | 누구나 무료로 사용할 수 있게 공개된 API를 Open API라고 함 | 종류 Windows API | 단일 유닉스 규격(SUS) | Java API | 웹 API | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/22/theory82.html",
            "relUrl": "/theory/2021/05/22/theory82.html",
            "date": " • May 22, 2021"
        }
        
    
  
    
        ,"post19": {
            "title": "서버 개발",
            "content": "1. 서버 개발 . 웹 애플리케이션의 로직을 구현할 서버 프로그램을 제작하여 웹 애플리케이션 서버(WAS)에 탑재하는 것을 의미 | 서버 개발에 사용되는 프로그래밍 언어에는 Java, JavaScript, Python, PHP, Ruby 등이 있음 | 각 프로그래밍 언어에는 해당 언어로 서버 프로그램을 개발할 수 있도록 지원하는 프레임워크가 있음 | . 2. 서버 개발 프레임워크 . 서버 프로그램 개발 시 다양한 네트워크 설정, 요청 및 응답 처리, 아키텍처 모델 구현 등을 손쉽게 처리할 수 있도록 클래스나 인터페이스를 제공하는 소프트웨어를 의미 | 서버 개발 프레임워크의 대부분은 모델-뷰-컨트롤러(MVC) 패턴을 기반으로 개발되었음 . | 종류 Spring JAVA를 기반으로 만든 프레임워크 | 전자정부 표준 프레임워크의 기반 기술로 사용되고 있음 | . | Node.js JavaScript를 기반으로 만든 프레임워크 | 비동기 입.출력 처리와 이벤트 위주의 높은 처리 성능을 갖고 있어 실시간으로 입.출력이 빈번한 애플리케이션에 적합 | . | Django Python을 기반으로 만든 프레임워크 | 컴포넌트의 재사용과 플러그인화를 강조하여 신속한 개발이 가능하도록 지원함 | . | Codeigniter PHP를 기반으로 만든 프레임워크 | 인터페이스가 간편하며 서버 자원을 적게 사용 | . | Ruby on Rails Ruby를 기반으로 만든 프레임워크 | 테스트를 위한 웹 서버를 지원하며 데이터베이스 작업을 단순화, 자동화시켜 개발 코드의 길이가 짧아지게 함으로써 신속한 개발이 가능함 | . | . | . 3. 서버 개발 과정 . DTO/VO, SQL, DAO, Service, Controller를 각각 구현하는 과정임 | 구현 순서는 개발자가 임의로 변경 가능 | 개발하려는 서버 프로그램의 목적, 개발 언어, 규모 등의 이유로 통합하거나 세분화할 수 있음 | 구현 과정 | DTO/VO 구현 데이터 교환을 위해 사용할 객체를 만드는 과정 | 송.수신할 데이터의 자료형에 맞는 변수 및 객체를 생성함 | . | SQL 구현 데이터의 삽입, 변경, 삭제 등의 작업을 수행할 SQL 문을 생성하는 과정 | SQL 문은 소스 코드 내에 직접 입력, 또는 별도의 XML 파일로 관리함 | . | DAO(데이터베이스에 접근하여 데이터 CRUD 작업 수행하는 객체)구현 데이터베이스에 접근하고, SQL을 활용하여 데이터를 실제로 조작하는 코드를 구현하는 과정 | . | Service 구현 사용자의 요청에 응답하기 위한 로직을 구현하는 과정 | . | Controller 구현 사용자의 요청에 적절한 서비스를 호출하여 그 결과를 사용자에게 반환하는 코드를 구현하는 과정 | . | 서버 개발 과정 도식화 | | . 웹 사이트로부터 사용자의 요청이 컨트롤러에 전달 | 컨트롤러는 해당 요청에 맞는 서비스 호출 | 서비스는 수행을 위한 데이터를 DAO에 요청 | ~ 6. DAO는 XML을 통해 Database로부터 서비스가 요청한 데이터를 가져옴 . | 가져온 데이터를 서비스에 반환 | 서비스의 수행 결과를 컨트롤러에 반환 | 컨트롤러의 수행 결과를 웹 사이트에 반환함 | DTO/VO는 1, 5, 9를 제외한 데이터 교환 전 과정에서 요청과 응답 시 사용 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/21/theory81.html",
            "relUrl": "/theory/2021/05/21/theory81.html",
            "date": " • May 21, 2021"
        }
        
    
  
    
        ,"post20": {
            "title": "개발 지원 도구",
            "content": "1. 통합 개발 환경(IDE) . 개발에 필요한 환경, 즉 편집기, 컴파일러, 디버거 등의 다양한 툴을 하나의 인터페이스로 통합하여 제공하는 환경 | 통합 개발 환경 도구는 통합 개발 환경을 제공하는 소프트웨어를 의미 | 코드를 실행하거나 테스트할 때 오류가 발생한 부분을 시각화하므로 수정이 용이 | . 2. 통합 개발 환경 도구의 종류 . 프로그램 개발사 플랫폼 운영체제 지원 언어 . 이클립스 | Eclipse Foundation, IBM | 크로스 플랫폼 | Windows, Linux, MacOS 등 | Java, C, C++, PHP, JSP 등 | . 비주얼 스튜디오 | Microsoft | Win32, Win64 | Windows | Basic, C, C++, C#, .NET 등 | . 엑스 코드 | Apple | Mac, iPhone | MacOS, iOS | C, C++, C#, Java, AppleScript 등 | . 안드로이드 스튜디오 | Google | Android | Windows, Linux, MacOS | Java, C, C++ | . IDEA | JetBrains | 크로스 플랫폼 | Windows, Linux, MacOS | Java, JSP, XML, Go, Kotlin, PHP 등 | . 3. 빌드 도구 . 빌드는 소스 코드 파일들을 컴퓨터에서 실행할 수 있는 제품 소프트웨어로 변환하는 과정 또는 결과물을 말함 | 빌드 도구는 전처리, 컴파일 등의 작업을 수행함 | 대표적인 빌드 도구 Ant(Another Neat Tool) 아파치 소프트웨어 재단에서 개발 | 자바 프로젝트의 공식적인 빌드 도구 | 정해진 규칙이나 표준이 없음 | . | Maven 아파치 소프트웨어 재단에서 Ant의 대안으로 개발 | 의존성을 설정하여 라이브러리를 관리함 | 규칙이나 표준이 존재하여 예외 사항만 기록 | . | Graddle 한스 도커가 Ant와 Maven을 보완하여 개발 | 안드로이드 스튜디오의 공식 빌드 도구 | 그루비 기반의 빌드 스크립트를 사용함 | . | . | . 4. 기타 협업 도구 . 협업 도구는 개발에 참여하는 사람들이 서로 다른 작업 환경에서 원활히 프로젝트를 수행할 수 있도록 도와주는 도구 | 협업 소프트웨어, 그룹웨어 등으로도 불림 | 일정 관리, 업무 흐름 관리, 정보 공유, 커뮤니케이션 등의 업무 보조 도구가 포함됨 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/20/theory80.html",
            "relUrl": "/theory/2021/05/20/theory80.html",
            "date": " • May 20, 2021"
        }
        
    
  
    
        ,"post21": {
            "title": "디자인 패턴",
            "content": "1. 디자인 패턴 . 모듈 간의 관계 및 인터페이스를 설계할 때 참조할 수 있는 전형적인 해결 방식 또는 예제 | 문제 및 배경, 실제 적용된 사례, 재사용이 가능한 샘플 코드 등으로 구성 | ‘바퀴를 다시 발명하지 마라’라는 말과 같이 개발 과정 중에 문제가 발생하면 새로 해결책을 구상하는 것보다 문제에 해당하는 디자인 패턴을 참고하여 적용하는 것이 더 효율적임 | GOF의 디자인 패턴은 생성 패턴, 구조 패턴, 행위 패턴으로 구분됨 | . 2. 생성 패턴 . 클래스나 객체의 생성과 참조 과정을 정의하는 패턴 | 추상 팩토리 구체적인 클래스에 의존하지 않고, 인터페이스를 통해 서로 연관.의존하는 객체들의 그룹으로 생성하여 추상적으로 표현 | 연관된 서브 클래스를 묶어 한 번에 교체하는 것이 가능함 | . | 빌더 작게 분리된 인스턴스를 건축하듯이 조합하여 객체를 생성 | 객체의 생성 과정과 표현 방법을 분리하고 있어, 동일한 객체 생성에서도 서로 다른 결과를 만들어 낼 수 있음 | . | 팩토리 메소드 객체 생성을 서브 클래스에서 처리하도록 분리하여 캡슐화한 패턴 | 상위 클래스에서 인터페이스만 정의하고 실제 생성은 서브 클래스가 담당함 | 가상 생성자 패턴이라고도 함 | . | 프로토타입 원본 객체를 복제하는 방법으로 객체를 생성하는 패턴 | 일반적인 방법으로 객체를 생성하며, 비용이 큰 경우 주로 이용함 | . | 싱글톤 하나의 객체를 생성하면 생성된 객체를 어디서든 참조할 수 있지만, 여러 프로세스가 동시에 참조할 수는 없음 | 클래스 내에서 인스턴스가 하나뿐임을 보장하며, 불필요한 메모리 낭비를 최소화할 수 있음 | . | 추상 팩토리는 서로 다른 부품을 조립만 하는 조립 공장, 빌더는 건축가각 블록을 조립하는 모습, 팩토리 메소드는 부품부터 완성까지 통째로 찍어내는 공장, 프로토타입은 원형을 두고 복제품을 만드는 것, 싱글톤은 식당에서 누구나 사용할 수 있지만 하나뿐인 정수기이다. | . 3. 구조 패턴 . 구조가 복잡한 시스템을 개발하기 쉽도록 클래스나 객체들을 조합하여 더 큰 구조로 만드는 패턴 | 어댑터 호환성이 없는 클래스들의 인터페이스를 다른 클래스가 이용할 수 있도록 변환해주는 패턴 | 기존의 클래스를 이용하고 싶지만 인터페이스가 일치하지 않을 때 이용함 | . | 브리지 구현부에서 추상층을 분리하여 서로가 독립적으로 확장할 수 있도록 구성한 패턴 | 기능과 구현을 두 개의 별도 클래스로 구현 | . | 컴포지트 여러 객체를 가진 복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용하는 패턴 | 객체들을 트리 구조로 구성하여 디렉터리 안에 디렉터리가 있듯이 복합 객체 안에 복합 객체가 포함되는 구조 구현 가능 | . | 데코레이터 객체 간의 결합을 통해 능동적으로 기능들을 확장할 수 있는 패턴 | 임의의 객체에 부가적인 기능을 추가하기 위해 다른 객체들을 덧붙이는 방식으로 구현 | . | 퍼싸드 복잡한 서브 클래스들을 피해 더 상위에 인터페이스를 구성함으로써 서브 클래스들의 기능을 간편하게 사용할 수 있도록 하는 패턴 | 서브 클래스들 사이의 통합 인터페이스를 제공하는 Wrapper 객체가 필요 | . | 플라이웨이트 인스턴스가 필요할 때마다 매번 생성하는 것이 아니고 가능한 한 공유해서 사용함으로써 메모리를 절약하는 패턴 | 다수의 유사 객체를 생성하거나 조작할 때 유용하게 사용할 수 있음 | . | 프록시 접근이 어려운 객체와 여기에 연결하려는 객체 사이에서 인터페이스 역할을 수행하는 패턴 | 네트워크 연결, 메모리의 대용량 객체로의 접근 등에 주로 이용 | . | 어댑터는 전압을 맞춰주는 변압기, 브리지는 두 섬을 연결하는 다리, 컴포지트는 폴더와 파일을 합성한 것, 데코레이터는 온갖 것으로 장식된 눈사람, 퍼싸드는 외부의 리모컨 버튼만으로 복잡한 명령들을 간편하게 수행하는 것, 플라이웨이트는 부담을 가볍게 하기 위해 물품을 공유하는 것, 프록시는 내가 하기 어려운 법률업무를 대리해서 처리해주는 변호사이다. | . 4. 행위 패턴 . 클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의하는 패턴 | 책임 연쇄 요청을 처리할 수 있는 객체가 둘 이상 존재하여 한 객체가 처리하지 못하면 다음 객체로 넘어가는 형태의 패턴 | 요청을 처리할 수 있는 각 객체들이 고리로 묶여 있어 요청이 해결될 때까지 고리를 따라 책임이 넘어감 | . | 커맨드 요청을 객체의 형태로 캡슐화하여 재이용하거나 취소할 수 있도록 요청에 필요한 정보를 저장하거나 로그에 남기는 패턴 | 요청에 사용되는 각종 명령어들을 추상 클래스와 구체 클래스로 분리하여 단순화함 | . | 인터프리터 언어에 문법 표현을 정의하는 패턴 | SQL이나 통신 프로토콜과 같은 것을 개발할 때 사용 | . | 반복자 자료 구조와 같이 접근이 잦은 객체에 대해 동일한 인터페이스를 사용하도록 하는 패턴 | 내부 표현 방법의 노출 없이 순차적인 접근이 가능 | . | 중재자 수많은 객체들 간의 복잡한 상호작용을 캡슐화하여 객체로 정의하는 패턴 | 객체 사이의 의존성을 줄여 결합도를 감소시킬 수 있음 | . | 메멘토 특정 시점에서의 객체 내부 상태를 객체화함으로써 이후 요청에 따라 객체를 해당 시점의 상태로 돌릴 수 있는 기능을 제공하는 패턴 | Ctrl+Z와 같은 되돌리기 기능을 개발할 때 주로 이용 | . | 옵서버 한 객체의 상태가 변화하면 객체에 상속되어 있는 다른 객체들에게 변화된 상태를 전달하는 패턴 | 일대다의 의존성을 정의함 | 주로 분산된 시스템 간에 이벤트를 생성.발행하고, 이를 수신해야 할 때 이용 | . | 상태 객체의 상태에 따라 동일한 동작을 다르게 처리해야 할 때 사용하는 패턴 | 객체 상태를 캡슐화하고 이를 참조하는 방식으로 처리 | . | 전략 동일한 계열의 알고리즘들을 개별적으로 캡슐화하여 상호 교환할 수 있게 정의하는 패턴 | 클라이언트는 독립적으로 원하는 알고리즘을 선택하여 사용할 수 있으며, 클라이언트에 영향 없이 알고리즘의 변경이 가능함 | . | 템플릿 메소드 상위 클래스에서 골격을 정의하고, 하위 클래스에서 세부 처리를 구체화하는 구조의 패턴 | 유사한 서브 클래스를 묶어 공통된 내용을 상위 클래스에서 정의함으로써 코드의 양을 줄이고 유지보수를 용이하게 해줌 | . | 방문자 각 클래스들의 데이터 구조에서 처리 기능을 분리하여 별도의 클래스로 구성하는 패턴 | 분리된 처리 기능은 각 클래스를 방문하여 수행함 | . | 책임 연쇄는 위에서 쏟아지는 물을 여러 물받이가 연속해서 나눠 받는 물레방아, 커맨드는 각종 명령어를 하나로 합쳐둔 것, 인터프리터는 언어 번역기, 반복자는 음악 파일의 다음 곡 재생처럼 같은 명령어 반복, 중재자는 물품 예매를 중개해주는 인터넷 사이트, 메멘토는 기억 속의 그 때로 돌아가는 것, 옵서버는 변화를 지켜보고 알려주는 것, 상태는 환자의 상태에 따라 치료방법이 다른 것, 전략은 여러 전략들을 정하고 필요할 때 원하는 전략을 선택하여 쓰는 것, 템플릿 메소드는 세모, 네모, 동그라미를 그리는 방법들을 도형이라는 하나의 큰 틀로 묶는 것, 방문자는 책을 만들기 위해 저자, 편집자, 홍보팀을 번갈아가며 방문하는 것이다. | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/19/theory79.html",
            "relUrl": "/theory/2021/05/19/theory79.html",
            "date": " • May 19, 2021"
        }
        
    
  
    
        ,"post22": {
            "title": "코드",
            "content": "1. 코드 . 자료의 분류.조합.집계.추출을 용이하게 하기 위해 사용하는 기호 | 정보를 신속.정확.명료하게 전달할 수 있게 함 | 일정한 규칙에 따라 작성됨 | 정보 처리의 효율과 처리된 정보의 가치에 많은 영향을 미침 | . 2. 코드의 주요 기능 . 식별 기능: 데이터 간의 성격에 따라 구분 가능 | 분류 기능: 특정 기준이나 동일한 유형에 해당하는 데이터를 그룹화할 수 있음 | 배열 기능: 의미를 부여하여 나열할 수 있음 | 표준화 기능: 다양한 데이터를 기준에 맞추어 표현할 수 있음 | 간소화 기능: 복잡한 데이터를 간소화할 수 있음 | . 3. 코드의 종류 . 순차 코드: 자료의 발생 순서, 크기 순서 등 일정 기준에 따라서 최초의 자료부터 차례로 일련번호를 부여하는 방법. 순서 코드/일련번호 코드라고도 함 1, 2, 3, 4 | . | 블록 코드: 코드화 대상 항목 중에서 공통성이 있는 것끼리 블록으로 구분하고, 각 블록 내에서 일련번호를 부여하는 방법. 구분 코드라고도 함 1001~1100: 총무부, 1101~1200: 영업부 | . | 10진 코드: 코드화 대상 항목을 0~9까지 10진 분할하고, 다시 그 각각에 대하여 10진 분할하는 방법을 필요한 만큼 반복하는 방법. 도서 분류식 코드라고도 함 1000: 공학, 1100: 소프트웨어 공학, 1110: 소프트웨어 설계 | . | 그룹 분류 코드: 코드화 대상 항목을 일정 기준에 따라 대분류, 중분류, 소분류 등으로 구분하고, 각 그룹 안에서 일련번호를 부여하는 방법 1-01-001: 본사-총무부-인사계, 2-01-001: 지사-총무부-인사계 | . | 연상 코드: 코드화 대상 항목의 명칭이나 약호와 관계있는 숫자나 문자, 기호를 이용하여 코드를 부여하는 방법 TV-40: 40인치 TV, L-15-220: 15W 220V의 램프 | . | 표의 숫자 코드: 코드화 대상 항목의 성질, 즉 길이, 넓이, 부피, 지름, 높이 등을 물리적 수치를 그대로 코드에 적용시키는 방법으로, 유효 숫자 코드라고도 함 120-720-1500: 두께x폭x길이가 120x720x1500인 강판 | . | 합성 코드: 필요한 기능을 하나의 코드로 수행하기 어려운 경우 2개 이상의 코드를 조합하여 만드는 방법 연상 코드+순차 코드 | KE-711: 대한항공 711기, AC-254: 에어캐나다 254기 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/18/theory78.html",
            "relUrl": "/theory/2021/05/18/theory78.html",
            "date": " • May 18, 2021"
        }
        
    
  
    
        ,"post23": {
            "title": "공통 모듈",
            "content": "1. 공통 모듈 . 여러 프로그램에서 공통으로 사용할 수 있는 모듈 | 자주 사용되는 계산식이나 매번 필요한 사용자 인증과 같은 기능들이 공통 모듈로 구성될 수 있음 | 해당 기능을 명확히 이해할 수 있도록 명세 기법을 준수해야 함 | . 2. 공통 모듈 명세 기법의 종류 . 정확성 시스템 구현 시 해당 기능이 필요하다는 것을 알 수 있도록 정확히 작성 | . | 명확성 해당 기능을 이해할 때 중의적으로 해석되지 않도록 명확하게 작성 | . | 완전성 시스템 구현을 위해 필요한 모든 것을 기술 | . | 일관성 공통 기능들 간 상호 충돌이 발생하지 않도록 작성 | . | 추적성 기능에 대한 요구사항의 출처, 관련 시스템 등의 관계를 파악할 수 있도록 작성 | . | . 3. 재사용 . 이미 개발된 기능들을 새로운 시스템이나 기능 개발에 사용하기 적합하도록 최적화하는 작업 | 새로 개발하는데 필요한 비용과 시간 절약 | 누구나 이해할 수 있고 사용이 가능하도록 사용법을 공개해야 함 . | 재사용 규모에 따른 분류 함수와 객체 클래스나 메소드 단위의 소스 코드 재사용 | . | 컴포넌트 컴포넌트 자체에 대한 수정 없이 인터페이스를 통해 통신하는 방식으로 재사용 | . | 애플리케이션 공통된 기능들을 제공하는 애플리케이션을 공유하는 방식으로 재사용 | . | . | . 4. 효과적인 모듈 설계 방안 . 결합도는 줄이고 응집도는 높여서 모듈의 독립성과 재사용성을 높임 | 복잡도와 중복성을 줄이고 일관성 유지 | 모듈의 기능은 예측이 가능해야 하며 지나치게 제한적이어서는 안 됨 | 모듈 크기는 시스템의 전반적인 기능과 구조를 이해하기 쉬운 크기로 분해 | 효과적인 제어를 위해 모듈 간의 계층적 관계를 정의하는 자료가 제시되어야 함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/17/theory77.html",
            "relUrl": "/theory/2021/05/17/theory77.html",
            "date": " • May 17, 2021"
        }
        
    
  
    
        ,"post24": {
            "title": "단위 모듈",
            "content": "1. 단위 모듈 . 소프트웨어 구현에 필요한 여러 동작 중 한 가지 동작을 수행하는 기능을 모듈로 구현한 것 | 단위 모듈로 구현되는 하나의 기능을 단위 기능이라고 부름 | 독립적인 컴파일이 가능하며, 다른 모듈에 호출되거나 삽입되기도 함 | 구현 과정 | . 단위 기능 명세서 작성: 기능 및 코드 명세서나 설계 지침과 같은 단위 기능을 명세화하는 단계 | 입.출력 기능 구현: 입.출력 기능을 위한 알고리즘 및 데이터를 구현하는 단계 | 알고리즘 구현: 단위 기능별로 모듈을 구현하는 단계 | 2. IPC(Inter-Process Communication) . 모듈 간 통신 방식을 구현하기 위해 사용되는 대표적인 프로그래밍 인터페이스 집합 | 복수의 프로세스를 수행하며 이뤄지는 프로세스 간 통신까지 구현이 가능함 | 대표 메소드 Shared Memory 공유 가능한 메모리를 구성하여 다수의 프로세스가 통신하는 방식 | . | Socket 네트워크 소켓을 이용하여 네트워크를 경유하는 프로세스 간에 통신하는 방식 | . | Semaphores 공유 자원에 대한 접근 제어를 통해 통신하는 방식 | . | Pipes&amp;named Pipes pipe라고 불리는 선입선출 형태로 구성된 메모리를 여러 프로세스가 공유하여 통신하는 방식 | pipe는 하나의 프로세스가 이용 중이라면 다른 프로세스는 접근할 수 없음 | . | Message Queueing 메시지가 발생하면 이를 전달하는 방식으로 통신하는 방식 | . | . | . 3. 단위 모듈 테스트 . 프로그램의 단위 기능으로 구현된 모듈이 정해진 기능을 정확히 수행하는지 검증하는 것 | 단위 테스트라고도 불림 | 단위 모듈 테스트의 기준은 단위 모듈에 대한 코드이므로 시스템 수준의 오류는 잡아낼 수 없음 | . 4. 테스트 케이스 . 구현된 소프트웨어가 사용자의 요구사항을 정확하게 준수했는지를 확인하기 위한 테스트 항목에 대한 명세서 . | 테스트 케이스를 이용하지 않은 테스트는 특정 요소에 대한 검증이 누락되거나 불필요한 검증의 반복으로 인해 인력과 시간을 낭비할 수 있음 . | ISO/IEC/IEEE 29119-3 표준에 따른 테스트 케이스의 구성 요소 . 식별자: 항목 식별자, 일련번호 . | 테스트 항목: 테스트 대상(모듈 또는 기능) . | 입력 명세: 입력 데이터 또는 테스트 조건 . | 출력 명세: 테스트 케이스 수행 시 예상되는 출력 결과 . | 환경 설정: 필요한 하드웨어나 소프트웨어의 환경 . | 특수 절차 요구: 테스트 케이스 수행 시 특별히 요구되는 절차 . | 의존성 기술: 테스트 케이스 간의 의존성 . | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/16/theory76.html",
            "relUrl": "/theory/2021/05/16/theory76.html",
            "date": " • May 16, 2021"
        }
        
    
  
    
        ,"post25": {
            "title": "모듈",
            "content": "1. 모듈 . 모듈화를 통해 분리된 시스템의 각 기능으로, 서브루틴, 서브시스템, 소프트웨어 내의 프로그램, 작업 단위 등을 의미함 | 모듈의 기능적 독립성은 소프트웨어를 구성하는 각 모듈의 기능이 서로 독립됨을 의미함 | 모듈의 독립성은 결합도와 응집도에 의해 측정됨 | . 2. 결합도(Coupling) 내공외제스자 . 모듈 간에 상호 의존하는 정도 또는 두 모듈 사이의 연관 관계 . | 결합도가 약할수록 품질이 높음 | 내용 결합도 (결합도 강함) | 공통 결합도 | 외부 결합도 | 제어 결합도 | 스탬프 결합도 | 자료 결합도 (결합도 약함!! 좋음) | . 3. 결합도의 종류 . 내용 결합도: 한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 직접 참조하거나 수정할 때의 결합도 | 공통 결합도: 공유되는 공통 데이터 영역을 여러 모듈이 사용할 때의 결합도 | 외부 결합도: 어떤 모듈에서 선언한 데이터(변수)를 외부의 다른 모듈에서 참조할 때의 결합도 | 제어 결합도: 어떤 모듈이 다른 모듈 내부의 논리적인 흐름을 제어하기 위해 제어 신호나 제어 요소를 전달하는 결합도. 하위 모듈에서 상위 모듈로 제어 신호가 이동하여 하위 모듈이 상위 모듈에게 처리 명령을 내리는 권리 전도 현상이 발생하게 됨 | 스탬프 결합도: 모듈 간의 인터페이스로 배열이나 레코드 등의 자료 구조가 전달될 때의 결합도 | 자료 결합도: 모듈 간의 인터페이스가 자료 요소로만 구성될 때의 결합도 | . 4. 응집도(Cohesion) . 모듈의 내부 요소들이 서로 관련되어 있는 정도 | 응집도가 강할수록 품질이 높음 | 우연적 응집도(응집도 약함) | 논리적 응집도 | 시간적 응집도 | 절차적 응집도 | 통신적 응집도 | 순차적 응집도 | 기능적 응집도(응집도 강함!! 좋음) | . 5. 응집도의 종류 . 우연적 응집도: 모듈 내부의 각 구성 요소들이 서로 관련 없는 요소로만 구성된 경우의 응집도 | 논리적 응집도: 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소들로 하나의 모듈이 형성되는 경우의 응집도 | 시간적 응집도: 특정 시간에 처리되는 몇 개의 기능을 모아 하나의 모듈로 작성할 경우의 응집도 | 절차적 응집도: 모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성 요소들이 그 기능을 순차적으로 수행할 경우의 응집도 | 통신적 응집도: 동일한 입력과 출력을 사용하여 서로 다른 기능을 수행하는 구성 요소들이 모였을 경우의 응집도 | 순차적 응집도: 모듈 내 하나의 활동으로부터 나온 출력 데이터를 그 다음 활동의 입력 데이터로 사용할 경우의 응집도 | 기능적 응집도: 모듈 내부의 모든 기능 요소들이 단일 문제와 연관되어 수행될 경우의 응집도 | . 6. 팬인/팬아웃 . 팬인(모듈에 들어오는 개수): 어떤 모듈을 제어하는 모듈의 수 | 팬아웃(모듈에서 나가는 것): 어떤 모듈에 의해 제어되는 모듈의 수 | 팬인이 높다는 것은 재사용 측면에서 설계가 잘 되어있다고 볼 수 있음 | 팬인이 높은 경우 단일 장애점이 발생할 수 있으므로 중점적인 관리 및 테스트가 필요함 | 다음의 시스템 구조도에서 각 모듈의 팬인과 팬아웃을 구하시오. | | 팬인 A: 0 B, C, D, E, G: 1 F, H, I: 2 | 팬아웃 H, I: 0 C, E, F, G: 1 B, D: 2 A: 3 | . 7. N-S 차트(Nassi-Schneiderman Chart) . 논리의 기술에 중점을 두고 도형을 이용해 표현하는 방법 | 박스 다이어그램, Chapin Chart라고도 함 | GOTO나 화살표를 사용하지 않음 | 연속, 선택 및 다중 선택, 반복의 3가지 제어 논리 구조로 표현함 | 조건이 복합되어 있는 곳의 처리를 시각적으로 명확히 식별하는 데 적합함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/15/theory75.html",
            "relUrl": "/theory/2021/05/15/theory75.html",
            "date": " • May 15, 2021"
        }
        
    
  
    
        ,"post26": {
            "title": "객체지향 분석 및 설계",
            "content": "1. 객체지향 분석(OOA; Object Oriented Analysis) . 사용자의 요구사항과 관련된 객체, 속성, 연산, 관계 등을 정의하여 모델링하는 작업 | 개발을 위한 업무를 객체와 속성, 클래스와 멤버, 전체와 부분 등으로 나누어서 분석함 | 클래스를 식별하는 것이 객체지향 분석의 주요 목적 | . 2. 객체지향 분석의 방법론 . 럼바우 방법(Rumbaugh) 분석 활동을 객체 모델, 동적 모델, 기능 모델로 나누어 수행 | . | 부치 방법(Booch) 미시적 개발 프로세스와 거시적 개발 프로세스를 모두 사용 | 클래스와 객체들을 분석 및 식별하고 클래스의 속성과 연산을 정의 | . | Jacobson 방법 유스케이스를 강조하여 사용함 | . | Coad와 Yourdon 방법 E-R 다이어그램을 사용하여 객체의 행위를 모델링 | 객체 식별, 구조 식별, 주제 정의, 속성과 인스턴스 연결 정의, 연산과 메시지 연결 정의 등의 과정으로 구성 | . | Wirls-Brock 방법 분석과 설계 간의 구분이 없고, 고객 명세서를 평가해서 설계 작업까지 연속적으로 수행함 | . | . 3. 럼바우(Rumbaugh)의 분석 기법 . 모든 소프트웨어 구성 요소를 그래픽 표기법을 이용하여 모델링하는 기법 | 객체 모델링 기법이라고도 함 | . 객체 모델링 -&gt; 동적 모델링 -&gt; 기능 모델링 . 객체 모델링: 정보 모델링이라고도 하며, 시스템에서 요구되는 객체를 찾아내어 속성과 연산 식별 및 객체들 간의 관계를 규정하여 객체 다이어그램으로 표시하는 것 | 동적 모델링: 상태 다이어그램을 이용하여 시간의 흐름에 따른 객체들 간의 제어 흐름, 상호 작용, 동작 순서 등의 동적인 행위를 표현하는 모델링 | 기능 모델링: 자료 흐름도(DFD)를 이용하여 다수의 프로세스들 간의 자료 흐름을 중심으로 처리 과정을 표현한 모델링 | . 4. 객체지향 설계 원칙 . 변경이나 확장에 유연한 시스템을 설계하기 위해 지켜져야 할 원칙임 . | SRP, OCP, LSP, ISP, DIP의 다섯 가지 원칙의 앞 글자를 따 SOLID 원칙이라고 부름 . | 단일 책임 원칙(SRP): 객체는 단 하나의 책임만 가져야 한다는 원칙 . | 개방-폐쇄 원칙(OCP): 기존의 코드를 변경하지 않고 기능을 추가할 수 있도록 설계해야 한다는 원칙 . | 리스코프 치환 원칙(LSP): 자식 클래스는 최소한 부모 클래스의 기능은 수행할 수 있어야 한다는 원칙 . | 인터페이스 분리 원칙(ISP): 자신이 사용하지 않는 인터페이스와 의존 관계를 맺거나 영향을 받지 않아야 한다는 원칙 . | 의존 역전 원칙(DIP): 의존 관계 성립 시 추상성이 높은 클래스와 의존 관계를 맺어야 한다는 원칙 . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/14/theory74.html",
            "relUrl": "/theory/2021/05/14/theory74.html",
            "date": " • May 14, 2021"
        }
        
    
  
    
        ,"post27": {
            "title": "객체지향",
            "content": "1. 객체지향 . 소프트웨어의 각 요소들을 객체로 만든 후, 객체들을 조립해서 소프트웨어를 개발하는 기법 | 구조적 기법의 문제점으로 인한 소프트웨어 위기의 해결책으로 채택되어 사용되고 있음 | 소프트웨어의 재사용 및 확장이 용이하여 고품질의 소프트웨어를 빠르게 발할 수 있고 유지보수가 쉬움 | 객체지향의 구성 요소 객체 | 클래스 | 메시지 | . | 특징 캡슐화 | 상속 | 다형성 | 연관성 | . | . 2. 객체 . 데이터와 이를 처리하기 위한 함수를 묶어 놓은 소프트웨어 모듈 | 데이터: 객체가 가지고 있는 정보(속성, 상태, 분류 등) | 함수: 객체가 수행하는 기능으로 객체가 갖는 데이터를 처리하는 알고리즘, 객체의 상태를 참조하거나 변경하는 수단 | . 3. 클래스 . 공통된 속성과 연산을 갖는 객체의 집합 | 각각의 객체들이 갖는 속성과 연산을 정의하고 있는 틀 | 클래스에 속한 각각의 객체를 인스턴스라고 함 | . 4. 메시지 . 객체들 간의 상호작용에 사용되는 수단으로 객체의 동작이나 연산을 일으키는 외부의 요구사항 | 메시지를 받은 객체는 대응하는 연산을 수행하여 예상된 결과를 반환 | . 5. 캡슐화 . 외부에서 접근을 제한하기 위해 인터페이스를 제외한 세부 내용을 은닉하는 것 | 캡슐화된 객체는 외부 모듈의 변경으로 인한 파급 효과가 적음 | 객체들 간에 메시지를 주고받을 때 상대 객체의 세부 내용은 알 필요가 없으므로 인터페이스가 단순해지고, 객체 간의 결합도가 낮아짐 | . 6. 상속 . 상위 클래스의 모든 속성과 연산을 하위 클래스가 물려받는 것 | 하위 클래스는 물려받은 속성과 연산을 다시 정의하지 않아도 즉시 자신의 속성으로 사용할 수 있음 | 하위 클래스는 상속받은 속성과 연산 외에 새로운 속성과 연산을 첨가하여 사용할 수 있음 | . 7. 다형성 . 하나의 메시지에 대해 각각의 객체가 가지고 있는 고유한 방법으로 응답할 수 있는 능력 | 객체들은 동일한 메소드명을 사용하여 같은 의미의 응답을 함 | ’+’ 연산자의 경우 숫자 클래스에서는 덧셈, 문자 클래스에서는 문자열의 연결 기능으로 사용 | . 8. 연관성 . 두 개 이상의 객체들이 상호 참조하는 관계 | . 종류 의미 특징 . is member of | 연관화 | 2개 이상의 객체가 상호 관련되어 있음 | . is instance of | 분류화 | 동일한 형의 특성을 갖는 객체들을 모아 구성하는 것 | . is part of | 집단화 | 관련 있는 객체들을 묶어 하나의 상위 객체를 구성하는 것 | . is a | 일반화 | 공통적인 성질들로 추상화한 상위 객체를 구성하는 것 | .   | 특수화/상세화 | 상위 객체를 구체화하여 하위 객체를 구성하는 것 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/13/theory73.html",
            "relUrl": "/theory/2021/05/13/theory73.html",
            "date": " • May 13, 2021"
        }
        
    
  
    
        ,"post28": {
            "title": "아키텍처 패턴",
            "content": "1. 아키텍처 패턴 . 아키텍처를 설계할 때 참조할 수 있는 전형적인 해결 방식 또는 예제 | 소프트웨어 시스템의 구조를 구성하기 위한 기본적인 윤곽을 제시 | 아키텍처 패턴에는 서브시스템들과 그 역할이 정의되어 있음 | 서브시스템 사이의 관계와 여러 규칙.지침 등이 포함 | 주요 아키텍처 패턴의 종류 레이어 패턴 | 클라이언트-서버 패턴 | 파이프-필터 패턴 | 모델-뷰-컨트롤러 패턴 | . | . 2. 레이어 패턴 . 시스템을 계층적으로 구분하여 구성하는 고전적인 방법의 패턴 | 상위 계층은 하위 계층에 대한 서비스 제공자가 되고 하위 계층은 상위 계층의 클라이언트가 됨 | 서로 마주보는 두 개의 계층 사이에서만 상호작용이 이루어짐 | 대표적으로 OSI 참조 모델이 있음 | . 3. 클라이언트-서버 패턴 . 하나의 서버 컴포넌트와 다수의 클라이언트 컴포넌트로 구성되는 패턴 | 사용자가 클라이언트를 통해 서버에 요청하면 클라이언트가 응답을 받아 사용자에게 제공하는 방식 | . 4. 파이프-필터 패턴 . 데이터 스트림 절차의 각 단계를 필터로 캡슐화하여 파이프를 통해 전송하는 패턴 | 앞 시스템의 처리 결과물을 파이프를 통해 전달받아 처리한 후 그 결과물을 다시 파이프를 통해 다음 시스템으로 넘겨주는 패턴을 반복 | 데이터 변환, 버퍼링, 동기화 등에 주로 사용 | 대표적으로 UNIX의 쉘이 있음 | . 5. 모델-뷰-컨트롤러 패턴 . 서브시스템을 모델, 뷰, 컨트롤러로 구조화하는 패턴 | 컨트롤러가 사용자의 요청을 받으면 핵심 기능과 데이터를 보관하는 모델을 이용하여 뷰에 정보를 출력 | 여러 개의 뷰를 만들 수 있음 | 한 개의 모델에 대해 여러 개의 뷰를 필요로 하는 대화형 애플리케이션에 적합함 | . 6. 기타 패턴 . 마스터-슬레이브 패턴 슬레이브 컴포넌트에서 처리된 결과물을 다시 돌려받는 방식으로 작업을 수행하는 패턴 | 장애 허용 시스템, 병렬 컴퓨팅 시스템 | . | 브로커 패턴 사용자가 원하는 서비스와 특성을 브로커 컴포넌트에 요청하면 브로크 컴포넌트가 요청에 맞는 컴포넌트와 사용자를 연결해주는 패턴 | 분산 환경 시스템 | . | 피어-투-피어 패턴 피어라 불리는 하나의 컴포넌트가 클라이언트가 될 수도, 서버가 될 수도 있는 패턴 | 파일 공유 네트워크 | . | 이벤트-버스 패턴 소스가 특정 채널에 이벤트 메시지를 발행하면, 해당 채널을 구독한 리스너들이 메시지를 받아 이벤트를 처리하는 패턴 | 알림 서비스 | . | 블랙보드 패턴 모든 컴포넌트들이 공유 데이터 저장소와 블랙보드 컴포넌트에 접근이 가능한 패턴 | 음성 인식, 차량 식별, 신호 해석 | . | 인터프리터 패턴 프로그램 코드의 각 라인을 수행하는 방법을 지정하고, 기호마다 클래스를 갖도록 구성된 패턴 | 번역기, 컴파일러, 인터프리터 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/12/theory72.html",
            "relUrl": "/theory/2021/05/12/theory72.html",
            "date": " • May 12, 2021"
        }
        
    
  
    
        ,"post29": {
            "title": "소프트웨어 아키텍처",
            "content": "1. 소프트웨어 아키텍처 . 소프트웨어를 구성하는 요소들 간의 관계를 표현하는 시스템의 구조 또는 구조체임 | 애플리케이션의 분할 방법과 분할된 모듈에 할당될 기능, 모듈 간의 인터페이스 등을 결정함 | 소프트웨어 아키텍처 설계의 기본 원리에는 모듈화, 추상화, 단계적 분해, 정보은닉이 있음 | . 2. 모듈화 . 소프트웨어의 성능 향상, 시스템의 수정 및 재사용, 유지 관리 등이 용이하도록 시스템의 기능들을 모듈 단위로 나누는 것을 의미 | 모듈의 크기를 너무 작게 나누면 개수가 많아져 모듈 간의 통합 비용이 많이 든다. | 모듈의 크기를 너무 크게 나누면 개수가 적어 통합 비용은 적게 들지만 모듈 하나의 개발 비용이 많이 든다. | . 3. 추상화 . 문제의 전체적이고 포괄적인 개념을 설계한 후 차례로 세분화하여 구체화시켜 나가는 것 | 완전한 시스템을 구축하기 전에 그 시스템과 유사한 모델을 만들어서 여러 가지 요인들을 테스트할 수 있음 | 유형 과정 추상화 자세한 수행 과정을 정의하지 않고, 전반적인 흐름만 파악할 수 있게 설계하는 방법 | . | 데이터 추상화 데이터의 세부적인 속성이나 용도를 정의하지 앟고, 데이터 구조를 대표할 수 있는 표현으로 대체하는 방법 | . | 제어 추상화 이벤트 발생의 정확한 절차나 방법을 정의하지 않고, 대표할 수 있는 표현으로 대체하는 방법 | . | . | . 4. 단계적 분해 . 문제를 상위의 중요 개념으로부터 하위의 개념으로 구체화시키는 분할 기법 | Niklaus Wirth에 의해 제안된 하향식 설계 전략 | 소프트웨어의 포괄적인 기능에서부터 시작하여 점차적으로 구체화하고, 알고리즘, 자료 구조 등 상세한 내역은 가능한 한 뒤로 미루어 진행함 | . 5. 정보 은닉 . 한 모듈 내부에 포함된 절차와 자료들의 정보가 감추어져 다른 모듈이 접근하거나 변경하지 못하도록 하는 기법 | 정보 은닉을 통해 모듈을 독립적으로 수행할 수 있음 | 하나의 모듈이 변경되더라도 다른 모듈에 영향을 주지 않으므로 수정, 시험, 유지보수가 용이함 | . 6. 상위 설계와 하위 설계 .   상위 설계 하위 설계 . 별칭 | 아키텍처 설계, 예비 설계 | 모듈 설계, 상세 설계 | . 설계 대상 | 시스템의 전체적인 구조 | 시스템의 내부 구조 및 행위 | . 세부 목록 | 구조, DB, 인터페이스 | 컴포넌트, 자료 구조, 알고리즘 | . 7. 소프트웨어 아키텍처의 품질 속성 . 소프트웨어 아키텍처가 이해 관계들이 요구하는 수준의 품질을 유지 및 보장할 수 있게 설계되었는지 확인하기 위해 품질 평가 요소들을 구체화시켜 놓은 것 | 시스템 측면 성능, 보안, 가용성, 기능성, 사용성, 변경 용이성, 확장성 등 | . | 비즈니스 측면 시장 적시성, 비용과 혜택, 예상 시스템 수명, 목표 시장, 공개 일정 등 | . | 아키텍처 측면 개념적 무결성, 정확성, 완결성, 구축 가능성, 변경성, 시험성 등 | . | . 8. 소프트웨어 아키텍처의 설계 과정 . 설계 목표 설정 . 요구사항을 분석하여 전체 시스템의 설계 목표 설정 . | 시스템 타입 설정 . 시스템과 서브시스템의 타입을 결정하고, 아키텍처 패턴 선택 . | 아키텍처 패턴 적용 . 시스템의 표준 아키텍처 설계 . | 서브시스템 구체화 . 서브시스템의 기능 및 서브시스템 간의 상호작용을 위한 동작과 인터페이스 정의 . | 검토 . 설계 목표, 요구사항, 설계의 기본 원리 등을 만족하는지 아키텍처 검토 . | 9. 협약에 의한 설계 . 컴포넌트를 설계할 때 클래스에 대한 여러 가정을 공유할 수 있도록 명세한 것 | 컴포넌트에 대한 정확한 인터페이스를 명세함 | 조건 선행 조건: 오퍼레이션이 호출되기 전에 참이 되어야 할 조건 | 결과 조건: 오퍼레이션이 수행된 후 만족되어야 할 조건 | 불변 조건: 오퍼레이션이 실행되는 동안 항상 만족되어야 할 조건 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/11/theory71.html",
            "relUrl": "/theory/2021/05/11/theory71.html",
            "date": " • May 11, 2021"
        }
        
    
  
    
        ,"post30": {
            "title": "개발 환경 구축",
            "content": "1. 개발 환경 구축 . 응용 소프트웨어 개발을 위해 개발 프로젝트를 이해하고 소프트웨어 및 하드웨어 장비를 구축하는 것을 의미 | 개발 환경은 응용 소프트웨어가 운영될 환경과 유사한 구조로 구축 | 분석 단계의 산출물을 바탕으로 개발에 필요한 하드웨어와 소프트웨어를 선정함 | 하드웨어와 소프트웨어의 성능, 편의성, 라이선스 등의 비즈니스 환경에 적합한 제품들을 최종적으로 결정하여 구축함 | . 2. 하드웨어 환경 . 사용자와의 인터페이스 역할을 하는 클라이언트 그리고 클라이언트와 통신하여 서비스를 제공하는 서버로 구성 | 클라이언트의 종류: 개인용 컴퓨터(pc), 스마트폰 등 | 서버의 종류 웹 서버(Web Server) 클라이언트로부터 직접 요청을 받아 처리함 | 저용량의 정적 파일들을 제공함 | . | 웹 애플리케이션 서버(WAS; Web Application Server) 동적 서비스를 제공하거나, 웹 서버와 데이터베이스 서버 또는 웹 서버와 파일 서버 사이에서 인터페이스 역할을 수행함 | . | 데이터베이스 서버(DB Server) 데이터베이스와 이를 관리하는 DBMS를 운영함 | . | 파일 서버(File Server) 데이터베이스에 저장하기에는 비효율적이거나 서비스 제공을 목적으로 유지하는 파일들을 저장함 | . | . | . 3. 소프트웨어 환경 . 클라이언트와 서버 운영을 위한 시스템 소프트웨어와 개발에 사용되는 개발 소프트웨어로 구성 . | 시스템 소프트웨어의 종류: 운영체제(OS), 웹 서버 및 WAS 운용을 위한 서버 프로그램, DBMS 등 . | 개발 소프트웨어의 종류 . 요구사항 관리 도구 . 요구사항의 수집과 분석, 추적 등을 편리하게 도와주는 소프트웨어 . | 설계/모델링 도구 . UML(통합 모델링 언어)을 지원하며, 개발의 전 과정에서 설계 및 모델링을 도와주는 소프트웨어 | . | 구현 도구 . 개발 언어를 통해 애플리케이션의 실제 구현을 지원하는 소프트웨어 | . | 빌드 도구 . 구현 도구를 통해 작성된 소스의 빌드 및 배포, 라이브러리 관리를 지원하는 소프트웨어 | . | 테스트 도구 . 모듈들이 요구사항에 적합하게 구현되었는지 테스트하는 소프트웨어 | . | 형상 관리 도구 . 산출물들을 버전별로 관리하여 품질 향상을 지원하는 소프트웨어 | . | . | . 4. 웹 서버의 기능 . HTTP/HTTPS 지원 브라우저로부터 요청을 받아 응답할 때 사용되는 프로토콜 | . | 통신 기록 처리한 요청들을 로그 파일로 기록하는 기능 | . | 정적 파일 관리 HTML, CSS, 이미지 등의 정적 파일들을 저장하고 관리하는 기능 | . | 대역폭 제한 네트워크 트래픽의 포화를 방지하기 위해 응답 속도를 제한하는 기능 | . | 가상 호스팅 하나의 서버로 여러 개의 도메인 이름을 연결하는 기능 | . | 인증 사용자가 합법적인 사용자인지를 확인하는 기능 | . | . 5. 개발 언어의 선정 기준 . 적정성: 개발하려는 소프트웨어의 목적에 적합해야 함 | 효율성: 코드의 작성 및 구현이 효율적이어야 함 | 이식성: 다양한 시스템 및 환경에 적용이 가능해야 함 | 친밀성: 개발 언어에 대한 개발자들의 이해도와 활용도가 높아야 함 | 범용성: 다른 개발 사례가 존재하고 여러 분야에서 활용되고 있어야 함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/10/theory70.html",
            "relUrl": "/theory/2021/05/10/theory70.html",
            "date": " • May 10, 2021"
        }
        
    
  
    
        ,"post31": {
            "title": "연계 테스트",
            "content": "1. 연계 테스트의 개요 . 구축된 연계 시스템과 연계 시스템의 구성 요소가 정상적으로 동작하는지 확인하는 활동 | 진행 순서 | . 연계 테스트 케이스 작성 . 연계 시스템 간의 데이터 및 프로세스의 흐름을 분석하여 필요한 테스트 항목을 도출함 | | 연계 테스트 환경 구축 . 테스트의 일정, 방법, 절차, 소요 시간 등을 송.수신 기관과의 협의를 통해 결정 | | 연계 테스트 수행 . 연계 응용 프로그램을 실행하여 연계 테스트 케이스의 시험 항목 및 처리 절차 등을 실제로 진행함 | | 연계 테스트 수행 결과 검증 . 연계 테스트 케이스의 시험 항목 및 처리 절차를 수행한 결과가 예상 결과와 동일한지 확인함 | |",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/09/theory69.html",
            "relUrl": "/theory/2021/05/09/theory69.html",
            "date": " • May 9, 2021"
        }
        
    
  
    
        ,"post32": {
            "title": "XML(eXtensible Markup Language)",
            "content": "1. XML . 특수한 목적을 갖는 마크업 언어를 만드는 데 사용되는 다목적 마크업 언어 | 웹브라우저 간 HTML 문법이 호환되지 않는 문제와 SGML의 복잡합을 해결하기 위하여 개발되었음 | 사용자가 직접 문서의 태그를 정의할 수 있으며, 다른 사용자가 정의한 태그를 사용할 수 있음 | 트리 구조로 구성되어 있어 상위 태그는 여러 개의 하위 태그를 가질 수 있음 | . 2. SOAP(Simple Object Access Protocol) . 컴퓨터 네트워크 상에서 HTTP/HTTPS, SMTP 등을 이용하여 XML을 교환하기 위한 통신 규약임 | 웹 서비스에서 사용되는 메시지의 형식과 처리 방법을 지정함 | 기본적으로 HTTP 기반에서 동작하기 때문에 프록시와 방화벽의 영향 없이 통신할 수 있음 | 최근에는 무거운 구조의 SOAP 대신 RESTful 프로토콜을 이용하기도 함 | . 3. WSDL(Web Services Description Language) . WSDL은 웹 서비스와 관련된 서식이나 프로토콜 등을 표준적인 방법으로 기술하고 게시하기 위한 언어 | XML로 작성되며, UDDI의 기초가 됨 | SOAP, XML 스키마와 결합하여 인터넷에서 웹 서비스를 제공하기 위해 사용됨 | 클라이언트는 WSDL 파일을 읽어 서버에서 어떠한 조작이 가능한지를 파악할 수 있음 | . 마크업 언어: 서식이나 문서 내.외의 다른 요소와의 연결 등을 표현하는 부호를 정의하여 다른 문서의 논리 구조나 체계를 정의하는 언어 .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/07/theory68.html",
            "relUrl": "/theory/2021/05/07/theory68.html",
            "date": " • May 7, 2021"
        }
        
    
  
    
        ,"post33": {
            "title": "연계 데이터 보안 적용",
            "content": "1. 연계 데이터 보안 . 송신 시스템에서 수신 시스템으로 전송되는 연계 데이터는 보안에 취약할 수 있으므로 데이터의 중요성을 고려하여 보안 적용해야 함 | 일반적인 연계 데이터의 보안 방식 전송 구간 보안 | 데이터 보안 | . | . 2. 전송 구간 보안 . 전송되는 데이터나 패킷을 쉽게 가로챌 수 없도록 암호화 기능이 포함된 프로토콜을 사용 | 데이터나 패킷을 가로채더라도 내용을 확인할 수 없게 데이터나 패킷을 암호화함 | . 3. 데이터 보안 . 송신 시스템에서 연계 데이터를 추출할 때와 수신 시스템에서 데이터를 운영 DB에 반영할 때 데이털를 암.복호화하는 것 . | 데이터의 암.복호화 처리 절차 . 송신 시스템 | . DB에서 연계 데이터 추출 | 보안 적용 대상 컬럼을 암호화 | 연계 데이터를 인터페이스 테이블 또는 파일에 등록 및 송신 | 수신 시스템 | . 수신된 데이터 중 암호화한 컬럼을 복호화 | 운영 DB에 반영 | | . 4. 암.복호화 적용 절차 . 암호화 적용 대상, 암호화 알고리즘, 암호화 키 선정 | 암호화 적용 대상 컬럼의 데이터 길이 변경 | 암호화 알고리즘 라이브러리 확보 및 설치 | 연계 응용 프로그램에서 암.복호화 처리 수행 |",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/07/theory67.html",
            "relUrl": "/theory/2021/05/07/theory67.html",
            "date": " • May 7, 2021"
        }
        
    
  
    
        ,"post34": {
            "title": "연계 장애 및 오류처리 구현",
            "content": "1. 연계 메커니즘 구간별 장애 및 오류 모니터링 현황 . 연계 메커니즘에서 오류 발생 시점, 오류 로그 기록 장소, 오류 로그 기록 주체는 크게 송.수신 시스템, 연계 서버 구간으로 구분됨 | 구간별 주요 오류 발생 시점 송신 시스템 데이터 생성 및 추출 시 | 코드 매핑 및 데이터 변환 시 | 인터페이스 테이블 또는 파일 등록 시 | . | 수신 시스템 연계 데이터 로드 시 | 코드 매핑 및 데이터 변환 시 | 운영 DB에 반영 시 | . | 연계 서버 연계 데이터 로드 및 전송 형식으로 변환 시 | 연계 데이터 송.수신 시 | 수신 시스템의 데이터 형식으로 변환 및 로드 시 | . | . | . 2. 장애 및 오류 유형과 처리방안 . 장애 및 오류 유형의 분류 송.수신 시스템의 연계 프로그램 오류 | 연계 서버의 오류 | 연계 데이터의 오류 | . | 송.수신 시스템의 연계 프로그램과 연계 서버에서 기록하는 로그를 통해 장애 및 오류 원인을 확인하고 분석하여 적절한 처리방안을 선택 | . 3. 장애 및 오류의 확인과 처리 절차 . 1차적으로 연계 서버에서 제공하는 장애 및 오류 현황 모니터링 화면을 통해 오류 원인 및 발생 현환을 확인함 | 1차에서 확인이 불가능한 경우 송.수신 시스템의 연계 프로그램과 연계 서버에서 기록한 오류 로그 테이블 또는 파일을 확인하여 오류 원인을 분석함 | 발생한 오류에 대한 원인이 확인되면 원인에 따른 적절한 조치를 취함 | . 4. 장애 및 오류의 정의와 설계 . 장애 및 오류 관리 대상 송.수신 시스템의 연계 프로그램에서 관리하는 장애 및 오류를 관리 대상으로 정의함 | . | 관리 대상의 장애 및 오류 코드와 메시지 관리 대상에서 식별한 오류 내용을 주제별로 분류한 후 각 오류 내용에 오류 코드를 부여하고 오류 메시지를 정의 | . | 장애 및 오류 코드와 메시지 관리 방식 관리 대상 오류 코드와 오류 메시지가 많은 경우에는 테이블 관리 방식을, 적은 경우에는 파일 관리 방식 선택함 | . | 장애 및 오류 기록 방식 오류 로그 테이블이나 파일은 기록 단위에 따라 인터페이스 테이블이나 파일에 대한 로그, 연계 데이터에 대한 로그로 설계 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/06/theory66.html",
            "relUrl": "/theory/2021/05/06/theory66.html",
            "date": " • May 6, 2021"
        }
        
    
  
    
        ,"post35": {
            "title": "연계 메커니즘",
            "content": "1. 연계 메커니즘 . 데이터의 생성 및 전송을 담당하는 송신 시스템과 데이터 수신 및 운영 DB 반영을 담당하는 수신 시스템으로 구성됨 | 송.수신 시스템 사이에는 데이터의 송.수신과 송.수신 시스템 현황을 모니터링하는 중계 시스템을 설치할 수 있음 | 연계 방식 직접 연계 방식 중간 매개체 없이 송.수신 시스템이 직접 연계하는 방식 | 종륨: DB Link, API/Open API, DB Connection, JDBC 등 | . | 간접 연계 방식 송.수신 시스템 사이에 중간 매개체를 두어 연계하는 방식 | 종류: 연계 솔루션, ESB, 소켓, 웹 서비스 등 | . | . | . 2. 연계 메커니즘의 과정 . . 3. 연계 메커니즘의 구성 . 연계 데이터 생성 및 추출 연계 솔루션과 관계없이 응용 시스템에서 연계 데이터를 생성하고 추출하는 과정 | . | 코드 매핑 및 데이터 변환 송신 시스템에서 사용하는 코드를 수신 시스템에서 사용하는 코드로 매핑 및 변환하는 과정 | . | 인터페이스 테이블 또는 파일 생성 연계 데이터를 인터페이스 테이블이나 파일 형식으로 생성하는 과정 | . | 로그 기록 송.수신 시스템에서 수행되는 모든 과정에 관한 결과 및 오류에 대한 정보를 로그 테이블이나 파일에 기록하는 과정 | . | 연계 서버 또는 송.수신 어댑터 연계 서버: 데이터를 전송 형식에 맞게 변환하고 송.수신을 수행하는 등 송.수신과 관련된 모든 처리 수행 | 송신 어댑터: 인터페이스 테이블 또는 파일의 데이터를 전송 형식에 맞도록 변환 및 송신 수행 | 수신 어댑터: 수신 데이터를 인터페이스 테이블이나 파일로 생성 | . | 전송 송신 시스템에서 생성된 연계 데이터를 네트워크 환경에 맞는 데이터로 변환한 후 수신 시스템으로 보내는 것 | . | 운영 DB에 연계 데이터 반영 수신된 인터페이스 테이블 또는 파일 구조의 데이터를 변환 프로그램을 이용하여 수신 시스템의 운영 DB에 반영하는 과정 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/05/theory65.html",
            "relUrl": "/theory/2021/05/05/theory65.html",
            "date": " • May 5, 2021"
        }
        
    
  
    
        ,"post36": {
            "title": "통합 구현",
            "content": "1. 통합 구현 . 사용자의 요구사항에 맞춰 송.수신 모듈과 중게 모듈 간의 연계를 구현하는 것을 의미함 | 송.수신 방식이나 시스템 아키텍처 구성, 송.수신 모듈 구현 방법 등에 따라 다르므로 사용자의 요구사항과 구축 환경에 적합한 방식을 설계해야 함 . | 일반적인 통합 구현은 송.수신 시스템과 모듈, 중계 시스템, 연계 데이터, 네트워크로 구성 | . 2. 통합 구현의 구성 요소 . 송신 시스템과 모듈 송신 시스템: 데이터를 생성 및 변환하여 전송하는 시스템. 송신 모듈과 모니터링 기능으로 구성 | 송신 모듈: 전송 데이터를 생성하고 필요에 따라 전송 데이터의 변환 등을 수행함 | . | 수신 시스템과 모듈 수신 시스템: 수신 받은 데이터를 정제 및 변환하는 시스템. 수신 모듈과 모니터링 기능으로 구성 | 수신 모듈: 수신 데이터를 정제하고 애플리케이션이나 데이터베이스 테이블에 적합한 데이터로 변환하는 작업 등을 수행함 | . | 중계 시스템 내.외부 시스템 간 또는 내부 시스템 간의 연계 시 사용되는 아키텍처 | . | 연계 데이터 송.수신 시스템 간 송.수신되는 데이터 | . | 네트워크 송신 시스템, 수신 시스템, 중계 시스템을 연결해주는 통신망 | . | . 3. 연계 요구사항 분석 . 통합 구현을 위해 사용자 요구사항을 분석하여 연계 데이터를 식별 및 표준화하여 연계 데이터를 정의하는 것 | 분석 절차 하드웨어 및 소프트웨어 구성, 네트워크 현황 확인 | 테이블 정의서, 코드 정의서 등의 문서 확인 | 체크리스트 작성 | 관련 문서 공유 및 인터뷰.설문 조사 실시 | 요구사항 정의서 작성 | | . 4. 연계 데이터 식별 및 표준화의 절차 . 연계 범위 및 항목 정의 시스템 간 연계할 정보를 상세화하여 정의 | . | 연계 코드 변환 및 매핑 연계 정보 중 코드로 관리되어야 할 항목을 찾아 코드로 변환 | . | 연계 데이터 식별자와 변경 구분 추가 연계 정보에 데이터 구분 식별자, 작업 구분 정보, 테이블/파일 관리 정보 등을 추가 | . | 연계 데이터 표현 방법 정의 연계 대상 범위, 대상 항목, 코드 변환 방식, 매핑 방식을 정의한 후 연계 데이터 구성 | . | 연계 정의서 및 명세서 작성 이전 과정에서 정의된 다양한 항목들과 파악된 현황들을 문서화함 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/04/theory64.html",
            "relUrl": "/theory/2021/05/04/theory64.html",
            "date": " • May 4, 2021"
        }
        
    
  
    
        ,"post37": {
            "title": "정렬",
            "content": "1. 삽입 정렬(Insertion Sort) . 가장 간단한 정렬 방식으로, 이미 순서화된 파일에 새로운 하나의 레코드를 순서에 맞게 삽입시켜 정렬하는 방식 | 평균과 최악 모두 수행 시간 복잡도는 O(N^2) | . . 2. 선택 정렬(Selection Sort) . n개의 레코드 중에서 최소값을 찾아 첫 번째 레코드 위치에 놓고 나머지 (n-1)개 중에서 다시 최소값을 찾아 두 번째 레코드 위치에 놓는 방식을 반복하여 정렬하는 방식 | 평균과 최악 모두 수행 시간 복잡도는 O(N^2) | . . 3. 버블 정렬(Bubble Sort) . 주어진 파일에서 인접한 두 개의 레코드 키 값을 비교하여 그 크기에 따라 레코드 위치를 서로 교환하는 정렬 방식 | 평균과 최악 모두 수행 시간 복잡도는 O(N^2) | . . 4. 쉘 정렬(Shell Sort) . 입력 파일을 어떤 매개변수의 값으로 서브파일을 구성하고, 각 서브파일을 Insertion 정렬 방식으로 순서 배열하는 과정을 반복하는 정렬 방식 | 삽입 정렬을 확장한 개념 | 평균 수행 시간 복잡도는 O(N^1.5)이고, 최악의 수행 시간 복잡도는 O(N^2) | . 5. 퀵 정렬(Quick Sort) . 키를 기준으로 작은 값은 왼쪽, 큰 값은 오른쪽 서브 파일에 분해시키는 과정을 반복시키는 정렬 방식 | 레코드의 많은 자료 이동을 없애고 하나의 파일을 부분적으로 나누어 가면서 정렬 | 평균 수행 시간 복잡도는 O(nlogn)이고, 최악의 수행 시간 복잡도는 O(N^2) | . 6. 힙 정렬(Heap Sort) . 전이진 트리를 이용한 정렬 방식 | 구성된 전이진 트리를 Heap Tree로 변환하여 정렬 | 평균과 최악 모두 시간 복잡도는 O(nlogn) | . 7. 2-Way 합병 정렬(Merge Sort) . 이미 정렬되어 있는 두 개의 파일을 한 개의 파일로 합병하는 정렬 방식 | 평균과 최악 모두 시간 복잡도는 O(nlogn) | . 8. 기수 정렬(Radix Sort) = Bucket Sort . Queue를 이용하여 자릿수별로 정렬하는 방식 | 레코드의 키 값을 분석하여 같은 수 또는 같은 문자끼리 그 순서에 맞는 버킷에 분배하였다가 버킷의 순서대로 레코드를 꺼내어 정렬한다. | 평균과 최악 모두 시간 복잡도는 O(dn) | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/03/theory63.html",
            "relUrl": "/theory/2021/05/03/theory63.html",
            "date": " • May 3, 2021"
        }
        
    
  
    
        ,"post38": {
            "title": "이진 트리(Tree)",
            "content": "1. 이진 트리 . 차수가 2 이하인 노드들로 구성된 트리. 즉 자식이 둘 이하인 노드들로만 구성된 트리 | 이진 트리의 레벨 i에서 최대 노드의 수는 2^(i-1)임 | 이진 트리에서 단말 노드 수가 n0, 차수가 2인 노드 수가 n2라 할 때 n0=n2+1이 됨 | 레벨 3에서 최대 노드의 수는 2^(3-1)=4임 | 단말 노드의 개수가 4개이고, 디그리가 2인 노드가 3개이므로 4=3+1에 의해 n0=n2+1이 성립함 | . | . 2. 트리의 운행법 . 트리를 구성하는 각 노드들을 찾아가는 방법을 운행법이라고 함 | 이진 트리를 운행하는 방법은 산술식의 표기법과 연관성을 가짐 | Preorder 운행: Root -&gt; Left -&gt; Right 순으로 운행 | Inorder 운행: Left -&gt; Root -&gt; Right 순으로 운행 | Postorder 운행: Left -&gt; Right -&gt; Root 순으로 운행 | . 3. Preorder 운행법 . 이진 트리를 Root -&gt; Left -&gt; Right 순으로 운행하며 노드들을 찾아가는 방법 | | 서브트리를 하나의 노드로 생각할 수 있도록 그림과 같이 서브트리 단위로 묶음. 다른 운행법 모두 공통으로 사용함 | . Preorder는 Root -&gt; Left -&gt; Right 순이므로 A13이 된다. | 1은 B2E이므로 AB2E3이 된다. | 2는 DHI이므로 ABDHIE3이 된다. | 3은 CFG이므로 ABDHIECFG가 된다. | 방문 순서: ABDHIECFG | . 4. Inorder 운행법 . 이진 트리를 Left -&gt; Root -&gt; Right 순으로 운행하며 노드들을 찾아가는 방법 | . Inorder는 Left -&gt; Root -&gt; Right 순이므로 1A3이 된다. | 1은 2BE이므로 2BEA3이 된다. | 2는 HDI이므로 HDIBEA3이 된다. | 3은 FCG이므로 HDIBEAFCG가 된다. | 방문 순서: HDIBEAFCG | . 5. Postorder 운행 . 이진 트리를 Left -&gt; Right -&gt; Root 순으로 운행 | . Postorder는 Left -&gt; Right -&gt; Root 순이므로 13A가 된다. | 1은 2EB이므로 2EB3A가 된다. | 2는 HID이므로 HIDEB3A가 된다. | 3은 FGC이므로 HIDEBFGCA가 된다. | 방문 순서: HIDEBFGCA | . 6. 수식의 표기법 . 이진 트리로 만들어진 수식을 인오더, 프리오더, 포스트오더 순으로 운행하면 각각 중위(Infix), 전위(Prefix), 후위(Postfix) 표기법이 됨 | 전위 표기법: 연산자 -&gt; Left -&gt; Right +AB | 중위 표기법: Left -&gt; 연산자 -&gt; Right A+B | 후위 표기법: Left -&gt; Right -&gt; 연산자 AB+ | . Infix 표기를 Postfix나 Prefix로 바꾸기 . postfix나 prefix는 스택을 이용하여 처리하므로 infix는 postfix나 prefix로 바꾸어 처리함 . | X=A/B*(C+D)+E . | Prefix로 변환하기 . 연산 우선순위에 따라 괄호로 묶는다. . (X = ( ( (A/B) * (C+D) ) + E ) ) . | 연산자를 해당 괄호의 앞으로 옮긴다. . = (X + (* (/ (A B) + (C D)) E)) . | 필요 없는 괄호를 제거한다. . = X + * / A B + C D E . | | Postfix로 변환하기 . 연산 우선순위에 따라 괄호로 묶는다. . (X = ( ( (A/B) * (C+D) ) + E ) ) . | 연산자를 해당 괄호의 뒤로 옮긴다. . (X ((A B) / (C D) + * E) +)= . | 필요 없는 괄호를 제거한다. . X A B / C D + * E + = . | | . Postfix나 Prefix로 표기된 수식을 Infix로 바꾸기 . Postfix는 Infix 표기법에서 연산자를 해당 피연산자 두 개의 뒤로 이동한 것이므로 연산자를 다시 해당 피연산자 두 개의 가운데로 옮기면 된다. | . 먼저 인접한 피연산자 두 개와 오른쪽의 연산자를 괄호로 묶는다. | 연산자를 해당 피연산자의 가운데로 이동시킨다. | 필요 없는 괄호를 제거한다. | Prefix는 Infix 표기법에서 연산자를 해당 피연산자 두 개의 앞으로 이동한 것이므로 연산자를 다시 해당 피연산자 두 개의 가운데로 옮기면 된다. | . 먼저 인접한 피연산자 두 개와 왼쪽의 연산자를 괄호로 묶는다. | 연산자를 해당 피연산자의 가운데로 이동시킨다. | 필요 없는 괄호를 제거한다. |",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/02/theory62.html",
            "relUrl": "/theory/2021/05/02/theory62.html",
            "date": " • May 2, 2021"
        }
        
    
  
    
        ,"post39": {
            "title": "트리(Tree)",
            "content": "1. 트리 . 정점(Node, 노드)과 선분(Branch, 가지)을 이용하여 사이클을 이루지 않도록 구성한 그래프의 특수한 형태 | 하나의 기억 공간을 노드라고 하며, 노드와 노드를 연결하는 선을 링크(Link)라고 함 | . 2. 트리 관련 용어 . . 노드: 트리의 기본 요소로서 자료 항목과 다른 항목에 대한 가지를 합친 것 A, B, C, D, E, F, G, H, I, J, K, L, M | . | 근 노드: 트리의 맨 위에 있는 노드 A | . | 디그리(차수): 각 노드에서 뻗어나온 가지의 수 A=3, B=2, C=1, D=3 | . | 단말 노드=잎 노드: 자식이 하나도 없는 노드, 즉 Degree가 0인 노드 K, L, F, G, M, I, J | . | 비단말 노드: 자식이 하나라도 있는 노드, 즉 Degree가 0이 아닌 노드 A, B, C, D, E, H | . | 조상 노드: 임의의 노드에서 근 노드에 이르는 경로상에 있는 느도들 M의 조상 노드는 H, D, A | . | 자식 노드: 어떤 노드에 연결된 다음 레벨의 노드들 D의 자식 노드: H, I, J | . | 부모 노드: 어떤 노드에 연결된 이전 레벨의 노드들 E, F의 부모 노드는 B | . | 형제 노드: 동일한 부모를 갖는 노드들 H의 형제 노드는 I, J | . | Level: 근 노드의 레벨을 1로 가정한 후 어떤 레벨이 L이면 자식 노드는 L+1 H의 레벨은 3 | . | 깊이: Tree에서 노드가 가질 수 있는 최대의 레벨 위 트리의 깊이는 4 | . | 숲: 여러 개의 트리가 모여 있는 것 위 트리에서 근 노드 A를 제거하면 B, C, D를 근 노드로 하는 세 개의 트리가 있는 숲이 생김 | . | 트리의 디그리: 노드들의 디그리 중에서 가장 많은 수 노드 A나 D가 세 개의 디그리를 가지므로 위 트리의 디그리는 3임 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/05/01/theory61.html",
            "relUrl": "/theory/2021/05/01/theory61.html",
            "date": " • May 1, 2021"
        }
        
    
  
    
        ,"post40": {
            "title": "자료 구조",
            "content": "1. 자료 구조 . 자료를 기억장치의 공간 내에 저장하는 방법과 자료 간의 관계, 처리 방법 등을 연구 분석하는 것 | 저장 공간의 효율성과 실행시간의 단축을 위해 사용 | 자료 구조의 분류 선형 구조(Linear Structre) 배열 | 선형 리스트 연속 리스트 | 연결 리스트 | . | 스택 | 큐 | 데크 | . | 비선형 구조(Non-Linear Structure) 트리 | 그래프 | . | . | . 2. 배열 . 크기와 형이 동일한 자료들이 순서대로 나열된 자료의 집합 | 반복적인 데이터 처리 작업에 적합한 구조 | 정적인 자료구조로, 기억장소의 추가가 어려움 | 데이터 삭제 시 기억장소가 빈 공간으로 남아있어 메모리의 낭비가 발생 | . 3. 연속 리스트 . 배열과 같이 연속되는 기억장소에 저장되는 자료구조 | 중간에 데이터를 삽입하기 위해서는 연속된 빈 공간이 있어야 함 | 삽입.삭제 시 자료의 이동이 필요 | . 4. 연결 리스트 . 자료들을 임의의 기억공간에 기억시키되, 자료 항목의 순서에 따라 노드의 포인터 부분을 이용하여 서로 연결시킨 자료 구조 | 연결을 위한 링크(포인터) 부분이 필요해 기억 공간의 이용 효율이 좋지 않음 | 접근 속도가 느리고 연결이 끊어지면 다음 노드를 찾기 어려움 | . 5. 스택 . 리스트의 한쪽 끝으로만 자료의 삽입, 삭제 작업이 이루어지는 자료 구조 | 후입선출(LIFO, Last In First Out) 방식으로 자료를 처리 | 저장할 기억 공간이 없는 상태에서 데이터가 삽입되면 오버플로가 발생 | 삭제할 데이터가 없는 상태에서 데이터를 삭제하면 언더플로 발생 | . . 6. 큐 . 리스트의 한쪽에서는 삽입 작업이 이루어지고 다른 한쪽에서는 삭제 작업이 이루어지는 자료 구조 | 선입선출(FIFO, First In First Out) 방식으로 자료를 처리 | 시작을 표시하는 프런트(Front) 포인터와 끝을 표시하는 리어(Rear) 포인터가 있음 | . . 7. 그래프 . 정점(Vertex)와 간선(Edge)의 두 집합으로 이루어지는 자료 구조 | 사이클이 없는 그래프를 트리라 함 | 간선의 방향성 유무에 따라 방향 그래프와 무방향 그래프로 구분됨 | . 8. 방향/무방향 그래프의 최대 간선 수 . 방향 그래프의 최대 간선 수: n(n-1) | 무방향 그래프에서의 최대 간선 수: n(n-1)/2 . | *n은 정점의 개수 . 정점이 4개인 경우 무방향 그래프와 방향 그래프의 최대 간선 수를 구하라 | | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/30/theory60.html",
            "relUrl": "/theory/2021/04/30/theory60.html",
            "date": " • Apr 30, 2021"
        }
        
    
  
    
        ,"post41": {
            "title": "물리 데이터 모델 품질 검토",
            "content": "1. 물리 데이터 모델 품질 검토 . 물리 데이터 모델을 설계하고 데이터베이스 객체를 생성한 후 개발 단계로 넘어가기 전에 모델러와 이해관계자들이 모여 수행함 | 목절: 데이터베이스의 성능 향상과 오류 예방 | 모든 이해관계자가 동의하는 검토 기준이 필요 | . 2. 물리 데이터 모델 품질 기준 . 정확성: 데이터 모델이 요구사항이나 업무 규칙, 표기법에 따라 정확하게 표현되었음 | 완전성: 데이터 모델이 데이터 모델의 구성 요소를 누락 없이 정의하고 요구사항이나 업무 영역을 누락 없이 반영하였음 | 준거성: 데이터 모델이 데이터 표준, 표준화 규칙, 법적 요건 등을 정확하게 준수하였음 | 최신성: 데이터 모델이 최근의 이슈나 현행 시스템을 반영하고 있음 | 일관성: 데이터 모델이 표현상의 일관성을 유지하고 있음 | 활용성: 작성된 모델과 설명을 사용자가 충분히 이해할 수 있고 업무 변화에 따른 데이터 구조의 변경이 최소화될 수 있도록 설계되었음 | . 3. 물리 데이터 모델 품질 검토 항목 . 물리 데이터 모델의 특성을 반영한 품질 기준을 작성한 후 이를 기반으로 작성 | 물리 데이터 모델에 정의된 테이블, 컬럼, 무결성 제약 조건 등 물리 데이터 모델의 주요 구성 요소와 반정규화, 인덱스, 스토리지 등 물리 데이터 모델의 전반적인 것을 검토 항목으로 작성 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/29/theory59.html",
            "relUrl": "/theory/2021/04/29/theory59.html",
            "date": " • Apr 29, 2021"
        }
        
    
  
    
        ,"post42": {
            "title": "논리 데이터 모델의 변환",
            "content": "1. 엔티티(Entity)를 테이블로 변환 . 논리 데이터 모델에서 정의된 엔티티를 물리 데이터 모델의 테이블로 변환하는 것 . | 변환 규칙 | 논리적 설계(데이터 모델링) 물리적 설계 . 엔티티 | 테이블 | . 속성 | 컬럼 | . 주 식별자 | 기본키 | . 외부 식별자 | 외래키 | . 관계 | 관계 | . | . 2. 슈퍼타입/서브타입을 테이블로 변환 . 슈퍼타입/서브타입은 논리 데이터 모델에서 이용되는 형태이므로 물리 데이터 모델을 설계할 대는 슈퍼타입/서브타입을 테이블로 변환해야 함 | 방법: 슈퍼타입 기준 테이블 변환, 서브타입 기준 테이블 변환, 개별타입 기준 테이블 변환 | . 3. 슈퍼타입 기준 테이블 변환 . 슈퍼타입 기준의 테이블 변환은 서브타입을 슈퍼타입에 통합하여 하나의 테이블로 만드는 것 | 서브타입에 속성이나 관계가 적을 경우에 적용하는 방법 | 하나로 통합된 테이블에는 서브타입의 모든 속성이 포함되어야 함 | | 서브타입의 개체에 있는 &#39;지점코드&#39;, &#39;담당부서&#39;와 개체에 있는 &#39;ID&#39;, &#39;수수료납부방법&#39;이 슈퍼타입인 개체에 통합되어 테이블로 변환됨 | . 4. 서브타입 기준 테이블 변환 . 서브타입 기준의 테이블 변환은 슈퍼타입 속성들을 각각의 서브타입에 추가하여 서브타입들을 개별적인 테이블로 만드는 것 | 서브타입에 속성이나 관계가 많이 포함된 경우 적용 . | | 슈퍼타입인 개체에 있는 &#39;신청자이름&#39;, &#39;접수일&#39;, &#39;수수료&#39;가 서브타입인 개체와 개체에 각각 추가되어 와 테이블로 변환됨 | . 5. 개별타입 기준 테이블 변환 . 슈퍼타입과 서브타입들을 각각의 개별적인 테이블로 변환하는 것 | 슈퍼타입과 서브타입 테이블들 사이에는 각각 1:1 관계가 형성됨 | | 슈퍼타입의 개체와 서브타입의 , 개체가 각각 , , 테이블로 변환됨 | . 6. 속성을 컬럼으로 변환 . 논리 데이터 모델에서 정의한 속성을 물리 데이터 모델의 컬럼으로 변환함 | 일반 속성 변환 속성과 컬럼은 명칭이 반드시 일치할 필요는 없으나, 개발자와 사용자 간 의사소통을 위하여 가능한 한 표준화된 약어를 사용하여 일치시키는 것이 좋음 | . | Primary UID를 기본키로 변환 논리 데이터 모델에서의 Primary UID는 물리 데이터 모델의 기본키로 만듦 | . | Primary UID(관계의 UID Bar)를 기본키로 변환 다른 엔티티와의 관계로 인해 생성된 Primary UID는 물리 데이터 모델의 기본키로 만듦 | . | Secondary(Alternate) UID를 유니크키로 변환 논리 모델링에서 정의된 Secondary UID 및 Alternate Key는 물리 모델에서 유니크키로 만듦 | . | | 엔티티의 &#39;부서번호&#39;, &#39;이름&#39;, &#39;주소&#39;, &#39;전화번호&#39;, &#39;이메일&#39; 속성이 테이블의 각각의 컬럼으로 변환되었으며, 예시를 위한 데이터가 들어있음 | . 7. 관계를 외래키로 변환 . 논리 데이터 모델에서 정의된 관계는 기본키와 이를 참조하는 외래키로 변환함 .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/28/theory58.html",
            "relUrl": "/theory/2021/04/28/theory58.html",
            "date": " • Apr 28, 2021"
        }
        
    
  
    
        ,"post43": {
            "title": "스토리지",
            "content": "1. 스토리지(Storage) . 단일 디스크로 처리할 수 없는 대용량의 데이터를 저장하기 위해 서버와 저장장치를 연결하는 기술 | 종류에는 DAS, NAS, SAN이 있음 | . 2. DAS(Direct Attached Storage) . 서버와 저장장치를 전용 케이블로 직접 연결하는 방식 | 일반 가정에서 컴퓨터에 외장하드를 연결하는 것 | 저장장치를 직접 연결하므로 속도가 빠르고 설치 및 운영이 쉬움 | 초기 구축 비용 및 유지보수 비용이 저렴함 | 직접 연결 방식이므로 다른 서버에 접근할 수 없고 파일을 공유할 수 없음 | 확장성 및 유연성이 떨어짐 | . 3. NAS(Network Attached Storage) . 서버와 저장장치를 네트워크를 통해 연결하는 방식 | 별도의 파일 관리 기능이 있는 NAS Storage가 내장된 저장장치를 직접 관리함 | Ethernet 스위치를 통해 다른 서버에서도 스토리지에 접근할 수 있어 파일 공유가 가능함 | 장소에 구애받지 않고 저장장치에 쉽게 접근할 수 있음 | DAS에 비해 확장성 및 유연성이 우수함 | . 4. SAN(Storage Area Network) . SAN은 DAS의 빠른 처리와 NAS의 파일 공유 장점을 혼합한 방식으로, 서버와 저장장치를 연결하는 전용 네트워크를 별도로 구성하는 방식임 . | 파이버 채널(FC) 스위치를 이용하여 네트워크를 구성함 . | 파이버 채널 스위치는 서버와 저장장치를 광케이블로 연결하므로 처리 속도가 빠름 . | 서버들이 저장장치 및 파일을 공유할 수 있음 . | 확장성, 유연성, 가용성이 뛰어남 . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/27/theory57.html",
            "relUrl": "/theory/2021/04/27/theory57.html",
            "date": " • Apr 27, 2021"
        }
        
    
  
    
        ,"post44": {
            "title": "데이터베이스 백업",
            "content": "1. 데이터베이스 백업 . 전산 장비의 장애에 대비하여 데이터베이스에 저장된 데이터를 보호하고 복구하기 위한 작업 | 치명적인 데이터 손실을 막기 위해서는 데이터베이스를 정기적으로 백업해야 함 | . 2. 로그 파일 . 데이터베이스의 처리 내용이나 이용 상황 등 상태 변화를 시간의 흐름에 따라 모두 기록한 파일 | 데이터베이스의 복구를 위해 필요한 가장 기본적인 자료임 | 로그 파일을 기반으로 데이터베이스를 과거 상태로 복구(UNDO)시키거나 현재 상태로 재생(REDO)시켜 데이터베이스 상태를 일관성 있게 유지할 수 있음 | 로그 파일은 트랜잭션 시작 시점, Rollback 시점, 데이터 입력, 수정 삭제 시점 등에서 기록됨 | . 3. 데이터베이스 복구 알고리즘 . NO-UNDO/REDO 데이터베이스 버퍼의 내용을 비동기적으로 갱신한 경우의 복구 알고리즘 | NO-UNDO: 트랜잭션 완료 전에는 변경 내용이 데이터베이스에 기록되지 않으므로 취소할 필요가 없음 | REDO: 트랜잭션 완료 후 데이터베이스 버퍼에는 기록되어 있고, 저장매체에는 기록되지 않았으므로 트랜잭션 내용을 다시 실행해야 함 | . | UNDO/NO-REDO 데이터베이스 버퍼의 내용을 동기적으로 갱신한 경우의 복구 알고리즘 | UNDO: 트랜잭션 완료 전에 시스템이 파손되었다면 변경된 내용을 취소함 | NO-REDO: 트랜잭션 완료 전에 데이터베이스 버퍼 내용을 이미 저장 매체에 기록했으므로 트랜잭션 내용을 다시 실행할 필요가 없음 | . | UNDO/REDO 데이터베이스 버퍼의 내용을 동기/비동기적으로 갱신한 경우의 복구 알고리즘 | 데이터베이스 기록 전에 트랜잭션이 완료될 수 있으므로 완료된 트랜잭션이 데이터베이스에 기록되지 못했다면 다시 실행해야 함 | . | NO-UNDO/NO-REDO 데이터베이스 버퍼의 내용을 동기적으로 저장 매체에 기록하지만 데이터베이스와는 다른 영역에 기록한 경우의 복구 알고리즘 | NO-UNDO: 변경 내용은 데이터베이스와 다른 영역에 기록되어 있으므로 취소할 필요가 없음 | NO-REDO: 다른 영역에 이미 기록되어 있으므로 트랜잭션을 다시 실행할 필요가 없음 | . | . 4. 백업 종류 . 복구 수준에 따라서 운영체제를 이용하는 물리 백업과 DBMS 유틸리티를 이용하는 논리 백업으로 나뉨 | 물리 백업 데이터베이스 파일을 백업하는 방법 | 백업 속도가 빠르고 작업이 단순하지만 문제 발생 시 원인 파악 및 문제 해결이 어려움 | . | 논리 백업 DB 내의 논리적 객체들을 백업하는 방법 | 복원 시 데이터 손상을 막고 문제 발생 시 원인 파악 및 해결이 수월하지만 백업/복원 시 시간이 많이 소요됨 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/26/theory56.html",
            "relUrl": "/theory/2021/04/26/theory56.html",
            "date": " • Apr 26, 2021"
        }
        
    
  
    
        ,"post45": {
            "title": "데이터베이스 보안",
            "content": "1. 데이터베이스 보안 . 데이터베이스의 일부 또는 전체에 대해서 권한이 없는 사용자가 액세스하는 것을 금지하기 위해 사용되는 기술 | 보안을 위한 데이터 단위는 테이블 전체로부터 특정 테이블의 특정 행과 열에 있는 데이터 값에 이르기까지 다양함 | . 2. 암호화(Encryption) . 데이터를 보낼 때 송신자가 지정한 수신자 이외에는 그 내용을 알 수 없도록 평문을 암호문으로 변환하는 것임 | 암호화(Encryption) 과정: 암호화되지 않은 평문을 암호문으로 바꾸는 과정 | 복호화(Decryption) 과정: 암호문을 원래의 평문으로 바꾸는 과정 | 암호화 기법 개인키 암호 방식(Private Key Encryption) | 공개키 암호 방식(Public Key Encryption) | . | . 3. 접근통제 . 데이터가 저장된 객체와 이를 사용하려는 주체 사이의 정보 흐름을 제한하는 것 | 접근통제 3요소 접근통제 정책 | 접근통제 매커니즘 | 접근통제 보안모델 | . | 접근통제 기술 임의 접근통제(DAC, Discretionary Access Control) 데이터에 접근하는 사용자의 신원에 따라 접근 권한 부여하는 방식 | 데이터 소유자가 접근통제 권한을 지정하고 제어함 | 객체를 생성한 사용자가 생성된 객체에 대한 모든 권한을 부여받고, 부여된 권한을 다른 사용자에게 허가할 수도 있음 | . | 강제 접근통제(MAC, Mandatory Access Control) 주체와 객체의 등급을 비교하여 접근 권한을 부여하는 방식 | 시스템이 접근통제 권한을 지정함 | 데이터베이스 객체별로 보안 등급을 부여할 수 있음 | 사용자별로 인가 등급을 부여할 수 있음 | . | 역할기반 접근통제(RBAC, Role Based Access Control) 사용자의 역할에 따라 접근 권한을 부여하는 방식 | 중앙관리자가 접근통제 권한 지정 | 임의 접근통제와 강제 접근통제의 단점을 보완 | 다중 프로그래밍 환경에 최적화된 방식 | . | . | . 4. 접근통제 정책 . 어떤 주체(who)가 언제(when), 어디서(where), 어떤 객체(what)에게, 어떤 행위(how)에 대한 허용 여부를 정의하는 것임 | 접근통제 정책의 종류 신분 기반 정책 주체나 그룹의 신분에 근거하여 객체의 접근을 제한하는 방법으로, IBP와 GBP가 있음 | IBP(Individual-Based Policy): 최소 권한 정책으로, 단일 주체에게 하나의 객체에 대한 허가 부여 | GBP(Group-Based Policy): 복수 주체에 하나의 객체에 대한 허가를 부여함 | . | 규칙 기반 정책 주체가 갖는 권한에 근거하여 객체의 접근을 제한하는 방법으로, MLP와 CBP가 있음 | MLP(Multi-Level Policy): 사용자나 객체별로 지정된 기밀 분류에 따른 정책 | CBP(Compartment-Based Policy): 집단별로 지정된 기밀 허가에 따른 정책 | . | 역할 기반 정책 GBP의 변형된 정책으로, 주체의 신분이 아니라 주체가 맡은 역할에 근거하여 객체의 접근을 제한하는 방법 | . | . | . 5. 접근통제 매커니즘 . 정의된 접근통제 정책을 구현하는 기술적인 방법 | 접근통제 목록, 능력 리스트, 보안 등급, 패스워드, 암호화 등이 있음 | . 6. 접근통제 보안 모델 . 보안 정책을 구현하기 위한 정형화된 모델임 | 종류 기밀성 모델 군사적인 목적으로 개발된 최초의 수학적 모델 | 기밀성 보장이 최우선임 | 군대 시스템 등 특수 환경에서 주로 사용됨 | . | 무결성 모델 기밀성 모델에서 발생하는 불법적인 정보 변경을 방지하기 위해 무결성을 기반으로 개발된 모델 | . | 접근통제 모델 접근통제 매커니즘을 보안 모델로 발전시킨 것 | 대표적으로 접근통제 행렬이 있음 | 접근통제 행렬: 임의적인 접근통제를 관리하기 위한 보안 모델로, 행은 주체, 열은 객체 즉, 행과 열로 주체와 객체의 권한 유형을 나타냄 | . | . | . 7. 접근통제 조건 . 접근통제 매커니즘의 취약점을 보완하기 위해 접근통제 정책에 부가하여 적용할 수 있는 조건임 | 값 종속 통제(Value-Dependent Control): 일반적으로는 객체에 저장된 값에 상관없이 접근통제를 동일하게 허용하지만, 값 종속 통제는 객체에 저장된 값에 따라 다르게 접근통제를 허용해야 하는 경우에 사용함 | 다중 사용자 통제(Multi-User Control): 지정된 객체에 다수의 사용자가 동시에 접근을 요구하는 경우에사용됨 | 컨텍스트 기반 통제(Context-Based Control): 특정 시간, 네트워크 주소, 접근 경로, 인증 수준 등에 근거하여 접근을 제어하는 방법. 다른 보안 정책과 결합하여 보안 시스템의 취약점을 보완할 때 사용함 | . 8. 감사 추적 . 사용자나 애플리케이션이 데이터베이스에 접근하여 수행한 모든 활동을 기록하는 기능임 | 오류가 발생한 데이터베이스를 복구하거나 부적절한 데이터 조작을 파악하기 위해 사용됨 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/25/theory55.html",
            "relUrl": "/theory/2021/04/25/theory55.html",
            "date": " • Apr 25, 2021"
        }
        
    
  
    
        ,"post46": {
            "title": "데이터베이스 이중화/서버 클러스터링",
            "content": "1. 데이터베이스 이중화(Database Replication) . 시스템 오류로 인한 데이터베이스 서비스 중단이나 물리적 손상 발생 시 이를 복구하기 위해 동일한 데이터베이스를 복제하여 관리하는 것 | 하나 이상의 데이터베이스가 항상 같은 상태를 유지하므로 데이터베이스에 문제가 발생하면 복제된 데이터베이스를 이용하여 즉시 문제 해결 가능 | 여러 개의 데이터베이스를 동시에 관리하므로 사용자가 수행하는 작업은 데이터베이스 이중화 시스템에 연결된 다른 데이터베이스에도 동일하게 적용함 | 애플리케이션을 여러 개의 데이터베이스에서 분산 처리하므로 데이터베이스의 부하를 줄일 수 있음 | 데이터베이스 이중화를 이용하면 손쉽게 백업 서버를 운영할 수 있음 | . 2. 데이터베이스 이중화의 분류 . Eager 기법 트랜잭션 수행 중 데이터 변경이 발생하면 이중화된 모든 데이터베이스에 즉시 전달하여 변경 내용이 즉시 적용되도록 하는 기법 | . | Lazy 기법 트랜잭션의 수행이 종료되면 변경 사실을 새로운 트랜잭션에 작성하여 각 데이터베이스에 전달되는 기법 | 데이터베이스마다 새로운 트랜잭션이 수행되는 것으로 간주됨 | . | . 3. 데이터베이스 이중화 구성 방법 . 활동-대기 방법 한 DB가 활성 상태로 서비스하고 있으면 다른 DB는 대기하고 있다가 활성 DB에 장애가 발생하면 대기 상태에 있던 DB가 자동으로 모든 서비스를 대신 수행 | 구성 방법과 관리가 쉬워 많은 기업에서 이용됨 | . | 활동-활동 방법 두 개의 DB가 서로 다른 서비스를 제공하다가 둘 중 한쪽 DB에 문제가 발생하면 나머지 다른 DB가 서비스를 제공 | 두 DB가 모두 처리를 하기 때문에 처리율이 높지만 구성 방법 및 설정이 복잡함 | . | . 4. 클러스터링(Clustering) . 두 대 이상의 서버를 하나의 서버처럼 운영하는 기술 | 서버 이중화 및 공유 스토리지를 사용하여 서버의 고가용성을 제공 | 종류 고가용성 클러스터링 하나의 서버에 장애가 발생하면 다른 노드(서버)가 받아 처리하여 서비스 중단을 방지하는 방식 | 일반적으로 언급되는 클러스터링 | . | 병렬 처리 클러스터링 전체 처리율을 높이기 위해 하나의 작업을 여러 개의 서버에서 분산하여 처리하는 방식 | . | . | . 5. RTO/RPO . RTO(Recovery Time Objective, 목표 복구 시간) 비상사태 또는 업무 중단 시점으로부터 복구되어 가동될 때까지의 소요 시간을 의미 | 장애 발생 후 6시간 내 복구 가능 | . | RPO(Recovery Point Objective, 목표 복구 시점) 비상사태 또는 업무 중단 시점으로부터 데이터를 복구할 수 있는 기준점을 읨 | 장애 발생 전인 지난 주 금요일에 백업시켜 둔 복원 시점으로 복구 가능 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/24/theory54.html",
            "relUrl": "/theory/2021/04/24/theory54.html",
            "date": " • Apr 24, 2021"
        }
        
    
  
    
        ,"post47": {
            "title": "분산 데이터베이스 설계",
            "content": "1. 데이터베이스 용량 설계 . 데이터가 저장될 공간을 정의하는 것 | 데이터베이스 용량을 설계할 때는 테이블에 저장될 데이터양과 인덱스, 클러스터 등이 차지하는 공간 등을 예측하여 반영해야 함 | 목적 용량을 정확히 산정하여 디스크의 저장 공간을 효과적으로 사용하고 확장성 및 가용성을 높임 | 디스크의 특성을 고려하여 설계함으로써 디스크의 입.출력 부하를 분산시키고 채널의 병목 현상을 최소화 | . | . 2. 분산 데이터베이스 설계 . 논리적으로는 하나의 시스템에 속하지만 물리적으로는 네트워크를 통해 연결된 여러 개의 사이트에 분산된 데이터베이스를 말함 | 분산 데이터베이스는 데이터의 처리나 이용이 많은 지역에 데이터베이스를 위치시킴으로써 데이터의 처리가 가능한 해당 지역에서 해결될 수 있도록 함 | 분산 데이터베이스 설계는 애플리케이션이나 사용자가 분산되어 저장된 데이터에 접근하게 하는 것을 목적으로 함 | . 3. 분산 데이터베이스의 목표 . 위치 투명성(Location Transparency) 액세스하려는 데이터베이스의 실제 위치를 알 필요 없이 단지 데이터베이스의 논리적인 명칭만으로 액세스할 수 있음 | . | 중복 투명성(Replication Transparency) 동일 데이터가 여러 곳에 중복되어 있더라도 사용자는 마치 하나의 데이터만 존재하는 것처럼 사용하고, 시스템은 자동으로 여러 자료에 대한 작업을 수행함 | . | 병행 투명성(Concurrency Transparency) 분산 데이터베이스와 관련된 다수의 트랜잭션들이 동시에 실현되더라도 그 트랜잭션의 결과는 영향을 받지 않음 | . | 장애 투명성(Failure Transparency) 트랜잭션, DBMS, 네트워크, 컴퓨터 장애에도 불구하고 트랜잭션을 정확하게 처리함 | . | . 4. 분산 설계 방법 . 테이블 위치 분산 데이터베이스의 테이블을 각기 다른 서버에 분산시켜 배치 | . | 분할(Fragmentation) 테이블의 데이터를 분할하여 분산시키는 것 | 분할 규칙: 완전성, 재구성, 상호 중첩 배제 | 주요 분할 방법 수평 분할: 특정 속성의 값을 기준으로 행 단위로 분할 | 수직 분할: 데이터 칼럼(속성) 단위로 분할 | . | . | 할당(Allocation) 동일한 분할을 여러 개의 서버에 생성하는 분산 방법 | 중복이 없는 할당과 중복이 있는 할당으로 나뉨 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/23/theory53.html",
            "relUrl": "/theory/2021/04/23/theory53.html",
            "date": " • Apr 23, 2021"
        }
        
    
  
    
        ,"post48": {
            "title": "파티션",
            "content": "1. 파티션 . 대용량의 테이블이나 인덱스를 작은 논리적 단위인 파티션으로 나누는 것을 말함 | 대용량 DB의 경우 몇 개의 중요한 테이블에만 집중되어 데이터가 증가되므로, 이런 테이블들을 작은 단위로 나눠 분산시키면 성능 저하를 방지할 뿐만 아니라 데이터 관리도 쉬워짐 | 데이터 처리는 테이블 단위로 이뤄지고, 데이터 저장은 파티션별로 수행됨 | . 2. 파티션의 장.단점 . 장점 데이터 접근 시 액세스 범위를 줄여 쿼리 성능이 향상됨 | 파티션별로 데이터가 분산되어 저장되므로 디스크의 성능이 향상됨 | 파티션별로 백업 및 복구를 수행하므로 속도가 빠름 | 시스템 장애 시 데이터 손상 정도를 최소화할 수 있음 | 데이터 가용성이 향상됨 | 파티션 단위로 입.출력을 분산시킬 수 있음 | . | 단점 하나의 테이블을 세분화하여 관리하므로 세심한 관리가 요구됨 | 테이블간 조인에 대한 비용이 증가함 | 용량이 작은 테이블에 파티셔닝을 수행하면 오히려 성능이 저하됨 | . | . 3. 파티션의 종류 . 범위 분할(Range Partitioning) 지정한 열의 값을 기준으로 분할 (일별, 월별, 분기별 등) | . | 해시 분할(Hash Partitioning) 해시 함수를 적용한 결과 값에 따라 데이터를 분할함 | 특정 파티션에 데이터가 집중되는 범위 분할의 단점을 보완한 것으로, 데이터를 고르게 분산할 때 유용함 | 특정 데이터가 어디에 있는지 판단할 수 없음 | 고객번호, 주민번호 등과 같이 데이터가 고른 컬럼에 효과적임 | . | 조합 분할(Composite Partitioning) 범위 분할로 분할한 다음 해시 함수를 적용하여 다시 분할하는 방식 | 범위 분할한 파티션이 너무 커서 관리가 어려울 때 유용함 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/22/theory52.html",
            "relUrl": "/theory/2021/04/22/theory52.html",
            "date": " • Apr 22, 2021"
        }
        
    
  
    
        ,"post49": {
            "title": "뷰/클러스터",
            "content": "1. 뷰(View) . 사용자에게 접근이 허용된 자료만을 제한적으로 보여주기 위해 하나 이상의 기본 테이블로부터 유도된, 이름을 가지는 가상 테이블 | 저장장치 내에 물리적으로 존재하지 않지만, 사용자에게는 있는 것처럼 간주됨 | 뷰를 통해서만 데이터에 접근하게 하면 뷰에 나타나지 않는 데이터를 안전하게 보호하는 효율적인 기법으로 사용할 수 있음 | 뷰가 정의된 기본 테이블이나 뷰를 삭제하면 그 테이블이나 뷰를 기초로 정의된 다른 뷰도 자동으로 삭제됨 | 뷰를 정의할 때는 CREATE 문, 제거할 때는 DROP 문을 사용함 | . 2. 뷰의 장.단점 . 장점 논리적 데이터 독립성을 제공함 | 동일 데이터에 대해 동시에 여러 사용자의 상이한 응용이나 요구를 지원 | 사용자의 데이터 관리를 간단하게 해줌 | 접근 제어를 통한 자동 보안이 제공됨 | . | 단점 독립적인 인덱스를 가질 수 없음 | 뷰의 정의를 변경할 수 없음 | 뷰로 구성된 내용에 대한 삽입, 삭제, 갱신 연산에 제약이 따름 | . | . 3. 클러스터 . 데이터 저장 시 데이터 액세스 효율을 향상시키기 위해 동일한 성격의 데이터를 동일한 데이터 블록에 저장하는 물리적 저장 방법임 | 클러스터링 된 테이블은 데이터 조회 속도를 향상시키지만 입력, 수정, 삭제에 대한 작업 성능을 저하시킴 | 클러스터는 데이터의 분포도가 넓을수록 유리함 | 데이터 분포도가 넓은 테이블을 클러스터링 하면 저장 공간을 절약할 수 있음 | 처리 범위가 넓은 경우에는 단일 테이블 클러스터링을, 조인이 많이 발생하는 경우에는 다중 테이블 클러스터링을 사용함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/21/theory51.html",
            "relUrl": "/theory/2021/04/21/theory51.html",
            "date": " • Apr 21, 2021"
        }
        
    
  
    
        ,"post50": {
            "title": "인덱스",
            "content": "1. 인덱스 . 데이터 레코드를 빠르게 접근하기 위해 &lt;키 값, 포인터&gt; 쌍으로 구성되는 데이터 구조 | 인덱스는 레코드가 저장된 물리적 구조에 접근하는 방법을 제공함 | 인덱스를 통해서 파일의 레코드에 빠르게 액세스 할 수 있음 | 레코드의 삽입과 삭제가 수시로 일어나는 경우에는 인덱스의 개수를 최소로 하는 것이 효율적임 | . 2. 인덱스의 종류 . 트리 기반 인덱스 인덱스를 저장하는 블록들이 트리 구조를 이루고 있는 것 | . | 비트맵 인덱스 인덱스 컬럼의 데이터를 Bit 값인 0 또는 1로 변환하여 인덱스 키로 사용하는 방법 | . | 함수 기반 인덱스 컬럼의 값 대신 컬럼에 특정 함수나 수식을 적용하여 산출된 값을 사용하는 것 | . | 비트맵 조인 인덱스 다수의 조인된 객체로 구성된 인덱스 | . | 도메인 인덱스 개발자가 필요한 인덱스를 직접 만들어 사용하는 것 | . | . 3. 클러스터드/넌클러스터드 인덱스 . 클러스터드 인덱스(Clustered Index) . 인덱스 키의 순서에 따라 데이터가 정렬되어 저장되는 방식 | 실제 데이터가 순서대로 저장되어 있어 인덱스를 검색하지 않아도 원하는 데이터를 빠르게 찾을 수 있음 | . | 넌클러스터드 인덱스(Non-Clustered Index) . 인덱스의 키 값만 정렬되어 있고 실제 데이터는 정렬되지 않는 방식 | 데이터 삽입, 삭제 발생 시 순서를 유지하기 위해 데이터를 재정렬해야 함 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/20/theory50.html",
            "relUrl": "/theory/2021/04/20/theory50.html",
            "date": " • Apr 20, 2021"
        }
        
    
  
    
        ,"post51": {
            "title": "트랜잭션 분석/CRUD 분석",
            "content": "1. 트랜잭션 . 데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산들을 의미함 | 데이터베이스 시스템에서 병행 제어 및 회복 작업 시 처리되는 작업의 논리적 단위로 사용됨 | 사용자가 시스템에 대한 서비스 요구 시 시스템이 응답하기 위한 상태 변환 과정의 작업 단위로 사용됨 | . 2. 트랜잭션의 특징 ACID . 원자성(Atomicity) 트랜잭션의 연산은 데이터베이스에 모두 반영되도록 완료(commit)되든지 아니면 전혀 반영되지 않도록 복구(rollback)되어야 함 | . | 일관성(Consistency) 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환함 | . | 독립성.격리성.순차성(Isolation) 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 어느 하나의 트랜잭션 실행 중에 다른 트랜잭션의 연산이 끼어들 수 없음 | . | 영속성.지속성(Durability) 성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 함 | . | . 3. CRUD 분석 . 프로세스와 테이블 간에 CRUD 매트릭스를 만들어서 트랜잭션을 분석하는 것임 . | CRUD 분석을 통해 많은 트랜잭션이 몰리는 테이블을 파악할 수 있으므로 디스크 구성 시 유용한 자료로 활용 가능 . | CRUD 매트릭스 . 2차원 형태의 표로서, 행에는 프로세스를, 열에는 테이블을, 행과 열이 만나는 위치에는 프로세스가 테이블에 발생시키는 변화를 표시하여 프로세스와 데이터 간의 관계를 분석하는 분석표 . | CRUD 매트릭스를 통해 트랜잭션이 테이블에 수행하는 작업을 검증 . | CRUD 매트릭스의 각 셀에는 Create, Read, Update, Delete의 앞 글자가 들어가며, 복수의 변화를 줄 때는 기본적으로 ‘C&gt;D&gt;U&gt;R’의 우선순위를 적용하여 한 가지만 적지만 활용 목적에 따라 모두 기록 가능 . ‘주문 변경’ 프로세스를 실행하려면 테이블의 데이터를 읽은(Read) 다음 수정(Update)해야 하므로 R(Read)과 U(Update)가 필요하지만 CRUD 매트릭스에는 우선순위가 높은 U만 표시 | . | CRUD 매트릭스가 완성되었다면 C, R, U, D 중 어느 것도 적히지 않은 행이나 열, C나 R이 없는 열을 확인하여 불필요하거나 누락된 테이블 또는 프로세스를 찾음 . 온라인 쇼핑몰의 CRUD 매트릭스 예시 . | 프로세스 테이블 회원 상품 주문 주문목록 제조사 . 신규 회원 등록 | C |   |   |   |   | . 회원정보 변경 | R, U |   |   |   |   | . 주문 요청 | R | R | C | C |   | . 주문 변경 |   |   | R | R, U |   | . 주문 취소 |   |   | R, D | R, D |   | . 상품 등록 |   | C |   |   | C, R | . 상품정보 변경 |   | R, U |   |   | R, U | . | . | . | . 4. 트랜잭션 분석 . CRUD 매트릭스를 기반으로 테이블에 발생하는 트랜잭션 양을 분석하여 테이블에 저장되는 데이터의 양을 유추하고 이를 근거로 DB의 용량 산정 및 구조의 최적화를 목적으로 함 . | 트랜잭션 분석은 업무 개발 담당자가 수행함 . | 트랜잭션 분석을 통해 프로세스가 과도하게 접근하는 테이블을 확인할 수 있으며, 이러한 집중 접근 테이블을 여러 디스크에 분산 배치함으로써 디스크 입.출력 향상을 통한 성능 향상을 가져올 수 있음 . | 트랜잭션 분석서 . 단위 프로세스와 CRUD 매트릭스를 이용하여 작성함 . | 구성 요소: 단위 프로세스, CRUD 연산, 테이블명, 컬럼명, 테이블 참조 횟수, 트랜잭션 수, 발생 주기 등 . | ‘주문 요청’ 프로세스에 대한 트랜잭션 분석서 예시 . | 프로세스 crud 테이블명 컬럼명 참조 횟수 트랜잭션 수 주기 . 주문 요청 | R | 회원 | 회원번호, 회원명, 주소 | 1 | 150 | 일 | .   | R | 상품 | 상품번호, 상품명, 재고량 | 1 | 150 |   | .   | C | 주문 | 주문번호, 일자, 회원번호 | 3 | 450 |   | .   | C | 주문목록 | 주문번호, 상품번호, 수량, 가격 | 5 | 750 |   | .   |   |   |   |   |   |   | . | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/19/theory49.html",
            "relUrl": "/theory/2021/04/19/theory49.html",
            "date": " • Apr 19, 2021"
        }
        
    
  
    
        ,"post52": {
            "title": "데이터베이스 저장 공간 설계",
            "content": "1. 데이터베이스 저장 공간 설계 . 데이터베이스에 데이터를 저장하려면 테이블이나 컬럼 등 실제 데이터가 저장되는 공간을 정의해야 함 . 객체 내용 . 테이블 | - 데이터베이스의 가장 기본적인 객체- 로우(행)와 컬럼(열)으로 구성- 데이터베이스의 모든 데이터는 테이블에 저장 | . 컬럼 | - 테이블의 열을 구성하는 요소- 데이터 타입, 길이 등으로 정의 | . 테이블스페이스 | - 테이블이 저장되는 논리적인 영역-한 개의 테이블스페이스에 한 개 이상의 테이블을 저장할 수 있음 | . 2. 테이블 종류 . 종류 내용 . 일반 테이블 | 대부분의 DBMS에서 표준 테이블로 사용되는 테이블의 형태 | . 클러스터드 인덱스 테이블 | - 기본키나 인덱스키의 순서에 따라 데이터가 저장되는 테이블- 일반적인 인덱스를 사용하는 테이블에 비해 접근 경로가 단축됨 | . 파티셔닝 테이블 | 대용량의 테이블을 작은 논리적 단위인 파티션으로 나눈 테이블 | . 외부 테이블 | - 데이터베이스에서 일반 테이블처럼 이용할 수 있는 외부 파일- 데이터베이스 내에 객체로 존재함 | . 임시 테이블 | - 트랜잭션이나 세션별로 데이터를 저장하고 처리할 수 있는 테이블- 임시 테이블에 저장된 데이터는 트랜잭션이 종료되면 삭제됨 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/18/theory48.html",
            "relUrl": "/theory/2021/04/18/theory48.html",
            "date": " • Apr 18, 2021"
        }
        
    
  
    
        ,"post53": {
            "title": "시스템 카탈로그",
            "content": "1. 시스템 카탈로그 . 시스템 그 자체에 관련이 있는 다양한 객체에 관한 정보를 포함하는 시스템 데이터베이스임 | 시스템 카탈로그 내의 각 테이블은 사용자를 포함하여 DBMS에서 지원하는 모든 데이터 객체에 대한 정의나 명세에 관한 정보를 유지 관리하는 시스템 테이블임 | 카탈로그들이 생성되면 데이터 사전에 저장되기 때문에 좁은 의미로는 카탈로그를 데이터 사전이라고도 함 | . 2. 메타 데이터 . 시스템 카탈로그에 저장된 정보를 의미 | 유형 데이터베이스 객체 정보: 테이블, 인덱스, 뷰 등의 구조 및 통계 정보 | 사용자 정보: 아이디, 패스워드, 접근 권한 등 | 테이블의 무결성 제약 조건 정보: 기본키, 외래키, NULL 값 허용 여부 등 | 함수, 프로시저, 트리거 등에 대한 정보 | . | . 3. 데이터 디렉터리 . 데이터 사전에 수록된 데이터에 접근하는 데 필요한 정보를 관리 유지하는 시스템 | 시스템 카탈로그는 사용자와 시스템 모두 접근할 수 있지만 데이터 디렉터리는 시스템만 접근할 수 있음 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/17/theory47.html",
            "relUrl": "/theory/2021/04/17/theory47.html",
            "date": " • Apr 17, 2021"
        }
        
    
  
    
        ,"post54": {
            "title": "반정규화",
            "content": "1. 반정규화 . 시스템의 성능을 향상하고 개발 및 운영의 편의성 등을 높이기 위해 정규화된 데이터 모델을 의도적으로 통합, 중복, 분리하여 정규화 원칙을 위배하는 행위임 | 반정규화를 수행하면 시스템의 성능이 향상되고 관리 효율성은 증가하지만 데이터의 일관성 및 정합성이 저하될 수 있음 | 과도한 반정규화는 오히려 성능을 저하시킬 수 있음 | 방법 테이블 통합 | 테이블 분할 | 중복 테이블 추가 | 중복 속성 추가 | . | . 2. 테이블 통합 . 두 개의 테이블이 조인되어 사용되는 경우가 많을 경우 성능 향상을 위해 아예 하나의 테이블로 만들어 사용하는 것 | 테이블 통합을 고려하는 경우 두 개의 테이블에서 발생하는 프로세스가 동일하게 자주 처리되는 경우 | 항상 두 개의 테이블을 이용하여 조회를 수행하는 경우 | . | 테이블 통합의 종류 1:1 관계 테이블 통합 | 1:N 관계 테이블 통합 | 슈퍼타입/서브타입 테이블 통합 | . | . 3. 테이블 분할 . 테이블을 수직 또는 수평으로 분할하는 것 . 수평 분할 레코드를 기준으로 테이블을 분할하는 것 | 레코들별로 사용 빈도의 차이가 큰 경우 사용 빈도에 따라 테이블을 분할 | . | 수직 분할 하나의 테이블에 속성이 너무 많을 경우 속성을 기준으로 테이블을 분할하는 것 | 종류: 갱신 위주의 속성 분할, 자주 조회되는 속성 분할, 크기가 큰 속성 분할, 보안을 적용해야 하는 속성 분할 | . | . 4. 중복 테이블 추가 . 작업의 효율성을 향상시키기 위해 테이블을 추가하는 것 | 중복 테이블을 추가하는 경우 여러 테이블에서 데이터를 추출해서 사용해야 할 경우 | 다른 서버에 저장된 테이블을 이용해야 하는 경우 | . | 방법 집게 테이블의 추가 집계 데이터를 위한 테이블을 생성하고, 각 원본 테이블에 트리거를 설정하여 사용하는 것 | . | 진행 테이블의 추가 이력 관리 등의 목적으로 추가하는 테이블 | . | 특정 부분만을 포함하는 테이블의 추가 데이터가 많은 테이블의 특정 부분만을 사용하는 경우 해당 부분만으로 새로운 테이블을 생성 | . | . | . 5. 중복 속성 추가 . 조인해서 데이터를 처리할 때 데이터를 조회하는 경로를 단축하기 위해 자주 사용하는 속성을 하나 더 추가하는 것임 . | 데이터의 무결성 확보가 어렵고, 디스크 공간이 추가로 필요함 . | 중복 속성을 추가하는 경우 . 조인이 자주 발생하는 속성인 경우 | 접근 경로가 복잡한 속성인 경우 | 액세스의 조건으로 자주 사용되는 속성인 경우 | 기본키의 형태가 적절하지 않거나 여러 개의 속성으로 구성된 경우 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/16/theory46.html",
            "relUrl": "/theory/2021/04/16/theory46.html",
            "date": " • Apr 16, 2021"
        }
        
    
  
    
        ,"post55": {
            "title": "정규화",
            "content": "1. 정규화(Normalization) . 테이블의 속성들이 상호 종속적인 관계를 갖는 특성을 이용하여 테이블을 무손실 분해하는 과정 | 목적은 가능한 한 중복을 제거하여 삽입, 삭제, 갱신 이상의 발생 가능성을 줄이는 것 | 제 1정규형(1NF), 제 2정규형(2NF), 제 3정규형(3NF), BCNF, 제 4정규형(4NF), 제 5정규형(5NF)이 있으며, 순서대로 정규화의 정도가 높아짐 | . 2. 정규화 과정 . 아래의 테이블을 가지고 정규화 과정을 살펴보자. 테이블의 기본키는 제품번호임 . . 제 1정규형 . 테이블 R에 속한 모든 속성의 도메인이 원자 값만으로 되어 있는 정규형임. 즉 테이블의 모든 속성 값이 원자 값으로만 되어 있는 정규형임 | 테이블에서는 하나의 제품에 대해 여러 개의 주문 관련 정보 (주문번호, 고객번호, 주소, 주문수량)가 발생하고 있음. 따라서 테이블은 제 1정규형이 아님 | . 테이블에서 반복되는 주문 관련 정보를 분리하여 제 1정규형으로 만드시오. . 테이블에서 반복되는 주문 관련 정보인 주문번호, 고객번호, 주소, 주문수량을 분리하면 위와 같이 제 1정규형인 테이블과 테이블이 만들어짐 - 1차 정규화 과정으로 생성된 테이블의 기본키는 (주문번호, 제품번호)이고, 다음과 같은 함수적 종속이 존재함 - 주문번호, 제품번호 -&gt;고객번호, 주소, 주문수량 - 주문번호-&gt;고객번호, 주소 - 고객번호-&gt;주소 | 2차 정규형 . 테이블 R이 제 1정규형이고, 기본키가 아닌 모든 속성이 기본키에 대하여 완전 함수적 종속을 만족하는 정규형임 | 테이블이 테이블과 테이블로 무손실 분해되면서 모두 제 1정규형이 되었지만 그 중 테이블에는 기본키인 (주문번호, 제품번호)에 완전 함수적 종속이 되지 않는 속성이 존재함. 즉 주문수량은 기본키에 대해 완전 함수적 종속이지만 고객번호와 주소는 주문번호에 의해서도 결정될 수 있으므로, 기본키에 대해 완전 함수적 종속이 아님. 따라서 테이블은 제 2정규형이 아님 | . 테이블에서 주문번호에 함수적 종속이 되는 속성들을 분리하여 제 2정규형을 만드시오. . 테이블에서 주문번호에 함수적 종속이 되는 속성인 고객번호와 주소를 분리(즉 부분 함수적 종속성을 제거)해 내면 위와 같이 제 2정규형인 테이블과 테이블로 무손실 분해됨. - 제 2정규화 과정을 거쳐 생성된 테이블의 기본키는 주문번호임. 그리고 테이블에는 아직도 다음과 같은 함수적 종속들이 존재함 - 주문번호-&gt;고객번호, 주소 - 고객번호-&gt;주소 | 제 3정규형 . 테이블 R이 제 2정규형이고 기본키가 아닌 모든 속성이 기본키에 대해 이행적 함수적 종속을 만족하지 않는 정규형임 | 테이블이 테이블과 테이블로 무손실 분해되면서 모두 제 2정규형이 되었음. 그러나 테이블에서 고객번호가 주문번호에 함수적 종속이고, 주소가 고객번호에 함수적 종속이므로 주소는 기본키인 주문번호에 대해 이행적 함수적 종속을 만족함. 즉 주문번호-&gt;고객번호이고, 고객번호-&gt;주소이므로 주문번호-&gt;주소는 이행적 함수적 종속이 됨. 따라서 테이블은 제 3정규형이 아님 | . 테이블에서 이행적 함수적 종속을 제거하여 제 3정규형을 만드시오. . 테이블에서 이행적 함수적 종속(즉 주문번호-&gt;주소)을 제거하여 무손실 분해함으로써 위와 같이 제 3정규형인 테이블과 테이블이 생성됨 | BCNF . BCNF는 테이블 R에서 모든 결정자가 후보키인 정규형임 . | 일반적으로 제 3정규형에 후보키가 여러 개 존재하고, 이러한 후보키들이 서로 중첩되어 나타나는 경우에 적용 가능함 . | 아래의 테이블(제 3정규형)은 함수적 종속{(학번, 과목명)-&gt; 담당교수, (학번, 담당교수)-&gt;과목명, 담당교수-&gt;과목명}을 만족하고 있음. 테이블의 후보키는 (학번, 과목명)과 (학번, 담당교수)임 . | . | 테이블에서 결정자 중 후보키가 아닌 속성이 존재함. 즉 함수적 종속 담당교수-&gt;과목명이 존재하는데, 담당교수가 테이블에서 후보키가 아니기 때문에 테이블은 BCNF가 아님 &gt; 테이블에서 결정자가 후보키가 아닌 속성을 분리하여 BCNF를 만드시오. ![스크린샷 2021-07-04 오후 3.54.16](https://tva1.sinaimg.cn/large/008i3skNgy1gs4x8ox25ej30ng0cywxl.jpg) &gt; 테이블에서 BCNF를 만족하지 못하게 하는 속성(즉 담당교수-&gt;과목명)을 분리해내면 위와 같이 BCNF인 테이블과 테이블로 무손실 분해됨 | 제 4정규형 . 테이블 R에 다중 값 종속(MVD) A-&gt;-&gt;B가 존재할 경우 R의 모든 속성이 A에 함수적 종속 관계를 만족하는 정규형임 | . | 제 5정규형 . 테이블 R의 모든 조인 종속(JD)이 R의 후보키를 통해서만 성립되는 정규형임 | . | . | . [정규화 과정 정리] . 비정규 릴레이션 –도메인이 원자값–&gt; . 1NF –부분적 함수 종속 제거–&gt; . 2NF –이행적 함수 종속 제거–&gt; . 3NF –결정자이면서 후보키가 아닌 것 제거–&gt; . BCNF –다치 종속 제거–&gt; . 4NF –조인 종속성 이용–&gt; . 5NF . *암기 요령: 두부이걸다줘? (도부이결다조) . 이행적 함수적 종속 . A-&gt;B이고 B-&gt;C일 때 A-&gt;C를 만족하는 관계를 이행적 함수적 종속이라고 함 .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/15/theory45.html",
            "relUrl": "/theory/2021/04/15/theory45.html",
            "date": " • Apr 15, 2021"
        }
        
    
  
    
        ,"post56": {
            "title": "이상/함수적 종속",
            "content": "1. 이상(Anomaly) . 테이블에서 일부 속성들의 종속으로 인해 데이터의 중복이 발생하고, 이 중복으로 인해 테이블 조작 시 문제가 발생하는 현상을 의미함 | 이상의 종류에는 테이블 조작 중에 발생하는 삽입 이상, 삭제 이상, 갱신 이상이 있음 | . . 삽입 이상(Insertion Anomaly): 테이블에 데이터를 삽입할 때 의도와는 상관 없이 원하지 않은 값들로 인해 삽입할 수 없게 되는 상황 . 테이블에서 학번이 &quot;600&quot;인 학생의 학년이 &quot;2&quot;라는 사실만을 삽입하고자 하는 경우, 삽입 이상이 발생한다. -&gt; 수강 테이블의 기본키는 학번과 과목번호이기 때문에 삽입할 때 반드시 과목번호가 있어야 한다. 즉, 데이터가 발생되는 시점에는 과목번호가 필요 없지만 테이블에 기록하고자 할 때 과목번호가 없어 등록할 수 없는 경우가 발생한다. | 삭제 이상(Deletion Anomaly): 테이블에서 한 튜플을 삭제할 때 의도하는 상관없는 값들도 함께 삭제되는, 즉 연쇄 삭제가 발생하는 현상임 . 테이블에서 학번이 &quot;200&quot;인 학생이 과목번호 &quot;C123&quot;의 등록을 취소하고자 하는 경우 삭제 이상이 발생한다. 학번이 &quot;200&quot;인 학생의 과목번호가 &quot;C123&quot;인 과목을 취소하고자 그 학생의 튜플을 삭제하면 학년 정보까지 같이 삭제된다. 과목만을 취소하고자 했지만 유지되어야 할 학년 정보까지 삭제되기 때문에 정보 손실이 발생한다. | 갱신 이상(Update Anomaly): 테이블에서 튜플에 있는 속성의 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 불일치성이 생기는 현상임 . 테이블에서 학번이 &quot;400&quot;인 학생의 학년을 &quot;4&quot;에서 &quot;3&quot;으로 변경하고자 하는 경우 갱신 이상이 발생할 수 있다. 학번이 &quot;400&quot;인 모든 튜플의 학년 값을 갱신해야 하는데 실수로 일부 튜플만 갱신하면, 학번이 &quot;400&quot;인 학생의 학년은 &quot;3&quot;과 &quot;4&quot; 즉 2가지 값을 가지게 되어 정보에 불일치성이 생기게 됨 | . 2. 함수적 종속(Functional Dependency) . 어떤 테이블 R에서 X와 Y를 각각 R의 속성 집합의 부분 집합이라 하자. 속성 X의 값 각각에 대해 시간에 관계없이 항상 속성 Y의 값이 오직 하나만 연관되어 있을 때 Y는 X에 함수적 종속 또는 X가 Y를 함수적으로 결정한다고 하고, X-&gt;Y로 표기한다. | 함수적 종속은 데이터의 의미를 표현하는 것으로, 현실 세계를 표현하는 제약 조건이 되는 동시에 데이터베이스에서 항상 유지되어야 할 조건이다. | . 다음의 테이블에서 함수적 종속을 살펴보자. . . 테이블에서 이름, 학년, 학과는 각각 학번 속성에 함수적 종속임. 이것을 기호로 표시하면 다음과 같음 - 학번-&gt;이름, 학년, 학과 - X-&gt;Y의 관계를 갖는 속성 X와 Y에서 X를 결정자라 하고, Y를 종속자라고 함. 예를 들어 학번-&gt;이름에서는 학번이 결정자이고, 이름이 종속자임 다음의 테이블에서 함수적 종속을 기호로 표시해 보자. - 학번, 과목번호-&gt;성적 - 학번-&gt;학년 - 테이블의 속성 중 성적은 (학번, 과목번호)에 완전 함수적 종속이라고 함 - 반면에 테이블의 속성 중 학년은 (학번, 과목번호)에 완전 함수적 종속이 아니므로 부분 함수적 종속이라고 함 *완전 함수적 종속 . 어떤 테이블 R에서 속성 Y가 다른 속성 집합 X 전체에 대해 함수적 종속이면서 속성 집합 X의 어떠한 진부분 집합 Z에도 함수적 종속이 아닐 때 속성 Y는 속성 집합 X에 완전 함수적 종속이라고 함 . *부분 함수적 종속 . 어떤 테이블 R에서 속성 Y가 다른 속성 집합 X 전체에 대해 함수적 종속이면서 속성 집합 X의 임의의 진부분 집합에 대해 함수적 종속일 때, 속성 Y는 속성 집합 X에 부분 함수적 종속이라고 함 . *완전/부분적 함수 종속의 이해 . 완전 함수적 종속이라는 말은 어떤 속성이 기본키에 대해 완전히 종속적일 때를 말함. 예를 들어 테이블은 (학번, 과목번호)가 기본키인데, 성적은 학번과 과목번호가 같을 경우에는 항상 같은 성적이 오므로, 즉 성적은 학번과 과목번호에 의해서만 결정되므로 성적은 기본키(학번, 과목번호)에 완전 함수적 종속이 되는 것임. 반면에 학년은 과목번호에 관계없이 학번이 같으면 항상 같은 학년이 오므로, 즉 기본키의 일부인 학번에 의해서 학년이 결정되므로 학년은 부분 함수적 종속이라고 함. .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/14/theory44.html",
            "relUrl": "/theory/2021/04/14/theory44.html",
            "date": " • Apr 14, 2021"
        }
        
    
  
    
        ,"post57": {
            "title": "관계대수 및 관계해석",
            "content": "1. 관계대수 . 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적인 언어임 | 릴레이션을 처리하기 위해 연산자와 연산규칙을 제공하며, 피연산자와 연산 결과가 모두 릴레이션임 | 질의에 대한 해를 구하기 위해 수행해야 할 연산의 순서를 명시함 | 관계 데이터베이스에 적용하기 위해 특별히 개발한 순수 관계 연산자와 수학적 집합 이론에서 사용하는 일반 집합 연산자가 있음 | . 2. 순수 관계 연산자 . Select 릴레이션에 존재하는 튜플 중에서 선택 조건을 만족하는 튜플의 부분집합을 구하여 새로운 릴레이션을 만드는 연산 | 릴레이션의 행에 해당하는 튜플(Tuple)을 구하는 것이므로 수평 연산이라고도 함 | . | Project 주어진 릴레이션에서 속성 리스트(Attribute List)에 제시된 속성 값만을 추출하여 새로운 릴레이션을 만드는 연산 | 연산 결과에 중복이 발생하면 중복이 제거됨 | 릴레이션의 열에 해당하는 속성을 추출하는 것이므로 수직 연산자라고도 함 | . | Join 공통 속성을 중심으로 두 개의 릴레이션을 하나로 합쳐서 새로운 릴레이션을 만드는 연산 | 조인의 결과는 Cartesian Product(교차곱)를 수행한 다음 Select를 수행한 것과 같음 | . | Division 부분 집합 관계에 속하는 두 릴레이션 R(X)와 S(Y)가 있을 때, R의 속성이 S의 속성값을 모두 가진 튜플에서 S가 가진 속성을 제외한 속성만을 구하는 연산 | . | . 3. 일반 집합 연산자 . 수학적 집합 이론에서 사용하는 연산자임 | 합집합(UNION), 교집합(INTERSECTION), 차집합(DIFFERENCE)을 처리하기 위해서는 합병 조건을 만족해야 함 | 합병 가능한 두 릴레이션 R과 S가 있을 때 각 연산의 특징을 요약하면 다음과 같음 | . 연산자 기능 및 수학적 표현 카디널리티 . 합집합 UNION | - 두 릴레이션에 존재하는 튜플의 합집합을 구하되, 결과로 생성된 릴레이션에서 중복되는 튜플은 제거- R ∪ S = { t | t ∈ R or t ∈ S }*t는 릴레이션 R 또는 S에 존재하는 튜플 | - |R ∪ S| ≤|R|+|S|-합집합의 카디널리티는 두 릴레이션 카디널리티의 합보다 크지 않음 | . 교집합 INTERSECTION | - 두 릴레이션에 존재하는 튜플의 교집합을 구하는 연산-R ∩ S = { t | t ∈ R and t ∈ S }*t는 릴레이션 R 그리고 S에 동시에 존재하는 튜플 | -|R ∩ S | ≤ MIN{|R|, |S|}-교집합의 카디널리티는 두 릴레이션 중 카디널리티가 적은 릴레이션의 카디널리티보다 크지 않음 | . 차집합 DIFFERENCE | - 두 릴레이션에 존재하는 튜플의 차집합을 구하는 연산- R - S ={ t | t ∈ R and t ∉ S }*t는 릴레이션 R에는 존재하고 S에 없는 튜플 | -|R - S| ≤ |R|-차집합의 카디널리티는 릴레이션 R의 카디널리티 보다 크지 않음 | . 교차곱 CARTESIAN PRODUCT | -두 릴레이션에 있는 튜플들의 순서쌍을 구하는 연산-R x S = { r·s | r ∈ R and s ∈ S }*r은 R에 존재하는 튜플이고, s는 S에 존재하는 튜플 | -| R X S | = |R| X |S|-교차곱은 두 릴레이션의 카디널리티를 곱한 것과 같음 | . 4. 관계 해석(Relational Calculus) . 관계 데이터의 연산을 표현하는 방법임 | 관계 데이터 모델의 제안자인 코드가 수학의 Predicate Calculus(술어 해석)에 기반을 두고 관계 데이터베이스를 위해 제안했음 | 관계해석은 원하는 정보가 무엇이라는 것만 정의하는 비절차적 특성을 지님 | 원하는 정보를 정의할 때는 계산 수식을 사용함 | . 합병 조건 . 합병하려는 두 릴레이션 간에 속성의 수가 같고, 대응되는 속성별로 도메인이 같아야 함 즉, 릴레이션 R과 S가 합병이 가능하다면, 릴레이션 R의 i번째 속성과 릴레이션 S의 i번째 속성의 도메인이 서로 같아야 함. 그러나 속성의 이름이 같아야 하는 것은 아님 .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/13/theory43.html",
            "relUrl": "/theory/2021/04/13/theory43.html",
            "date": " • Apr 13, 2021"
        }
        
    
  
    
        ,"post58": {
            "title": "관계형 데이터베이스의 제약 조건-무결성(Integrity)",
            "content": "1. 무결성(Integrity) . 데이터베이스에 저장된 데이터 값과 그것이 표현하는 현실 세계의 실제값이 일치하는 정확성을 의미 | 무결성 제약 조건은 데이터베이스에 들어 있는 데이터의 정확성을 보장하기 위해 부정확한 자료가 데이터베이스 내에 저장되는 것을 방지하기 위한 제약 조건을 말함 | . 2. 무결성의 종류 . 개체 무결성 기본 테이블의 기본키를 구성하는 어떤 속성도 Null 값이나 중복값을 가질 수 없다는 규정 | . | 참조 무결성 외래키 값은 Null이거나 참조 릴레이션의 기본키 값과 동일해야 함. 즉 릴레이션은 참조할 수 없는 외래키 값을 가질 수 없다는 규정 | . | 도메인 무결성 주어진 속성 값이 정의된 도메인에 속한 값이어야 한다는 규정 | . | 사용자 정의 무결성 속성 값들이 사용자가 정의한 제약조건에 만족되어야 한다는 규정 | . | NULL 무결성 릴레이션의 특정 속성 값이 NULL이 될 수 없도록 하는 규정 | . | 고유 무결성 릴레이션의 특정 속성에 대해 각 튜플이 갖는 속성값들이 서로 달라야 한다는 규정 | . | 키 무결성 하나의 릴레이션에는 적어도 하나의 키가 존재해야 한다는 규정 | . | 관계 무결성 릴레이션에 어느 한 튜플의 삽입 가능 여부 또는 한 릴레이션과 다른 릴레이션의 튜플들 사이의 관계에 대한 적절성 여부를 지정한 규정 | . | . 3. 데이터 무결성 강화 . 데이터 무결성은 데이터 품질에 직접적인 영향을 미치므로 데이터 특성에 맞는 적절한 무결성을 정의하고 강화해야 함 | 데이터 무결성은 애플리케이션, 데이터베이스 트리거, 제약 조건을 이용하여 강화할 수 있음 | 애플리케이션: 데이터 생성, 수정, 삭제 시 무결성 조건을 검증하는 코드를 프로그램 내에 추가함 | 데이터베이스 트리거: 트리거 이벤트에 무결성 조건을 실행하는 절차형 SQL을 추가함 | 제약 조건: 데이터베이스에 제약 조건을 설정하여 무결성을 유지함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/12/theory42.html",
            "relUrl": "/theory/2021/04/12/theory42.html",
            "date": " • Apr 12, 2021"
        }
        
    
  
    
        ,"post59": {
            "title": "관계형 데이터베이스의 제약 조건-키(Key)",
            "content": "1. 키(Key) . 데이터베이스에서 조건에 만족하는 튜플을 찾거나 순서대로 정립할 때 기준이 되는 속성 | 종류 후보키(Candidate Key) | 기본키(Primary Key) | 대체키(Alternate Key) | 슈퍼키(Super Key) | 외래키(Foreign Key) | . | . 2. 후보키(Candidate Key) . 릴레이션을 구성하는 속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합 | 기본키로 사용할 수 있는 속성들을 말함 | 후보키는 유일성(Unique)과 최소성(Minimality)을 모두 만족시켜야 함 | . 유일성: 하나의 키 값으로 하나의 튜플만을 유일하게 식별할 수 있어야 함 . 최소성: 키를 구성하는 속성 하나를 제거하면 유일하게 식별할 수 없도록 꼭 필요한 최소의 속성으로 구성해야 함 . 3. 기본키(Primary Key) . 후보키 중에서 특별히 선정된 주키임 | 중복된 값을 가질 수 없음 | 한 릴레이션에서 특정 튜플을 유일하게 구별할 수 있는 속성 | 기본키는 NULL 값을 가질 수 없음. 즉 튜플에서 기본키로 설정된 속성에는 NULL 값이 있어서는 안 됨 | . 4. 대체키(Alternate Key) . 후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키 | 보조키라고도 함 | . 5. 슈퍼키(Super Key) . 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키 | 릴레이션을 구성하는 모든 튜플 중 슈퍼키로 구성된 속성의 집합과 동일한 값은 나타나지 않음 | 릴레이션을 구성하는 모든 튜플에 대해 유일성을 만족하지만, 최소성은 만족하지 못함 | . 6. 외래키(Foreign Key) . 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합을 의미 | 한 릴레이션에 속한 속성 A와 참조 릴레이션의 기본키인 B가 동일한 도메인 상에서 정의되었을 때의 속성 A를 외래키라고 함 | 외래키로 지정되면 참조 릴레이션의 기본키에 없는 값은 입력할 수 없음 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/11/theory41.html",
            "relUrl": "/theory/2021/04/11/theory41.html",
            "date": " • Apr 11, 2021"
        }
        
    
  
    
        ,"post60": {
            "title": "관계형 데이터베이스의 구조/관계형 데이터 모델",
            "content": "1. 관계형 데이터베이스 . 2차원적인 표(Table)를 이용해서 데이터 상호 관계를 정의하는 데이터베이스 | 1970년 IBM에 근무하던 코드(E. F. Codd)에 의해 처음 제안되었음 | 개체(Entity)와 관계(Relationship)를 모두 릴레이션(Relation)이라는 표로 표현하기 때문에 개체 릴레이션과 관계 릴레이션이 존재함 | 장점: 간결하고 보기 편리하며, 다른 데이터베이스로의 변환이 용이 | 단점: 성능이 다소 떨어짐 | . 2. 관계형 데이터베이스의 릴레이션 구조 . 릴레이션은 데이터들을 표의 형태로 표현한 것으로, 구조를 나타내는 릴레이션 스키마와 실제 값들인 릴레이션 인스턴스로 구성됨 . 릴레이션 인스턴스: 데이터 개체를 구성하고 있는 속성들에 데이터 타입에 정의되어 구체적인 데이터 값을 가진 것을 말함 . 3. 튜플(Tuple) . 릴레이션을 구성하는 각각의 행을 말함 | 속성의 모임으로 구성됨 | 파일 구조에서 레코드와 같은 의미 | 튜플의 수를 카디너리티 또는 기수, 대응수라고 함 | . 4. 속성(Attribute) . 데이터베이스를 구성하는 가장 작은 논리적 단위 | 파일 구조상의 데이터 항목 또는 데이터 필드에 해당됨 | 속성은 개체 특성을 기술함 | 속성의 수를 디그리 또는 차수라고 함 | . 5. 도메인(Domain) . 하나의 애트리뷰트가 취할 수 있는 같은 타입의 원자(Atomic)값들의 집합임 | 실제 애트리뷰트 값이 나타날 때 그 값의 합법 여부를 시스템이 검사하는데에도 이용됨 성별 애트리뷰트의 도메인은 “남”과 “여”로, 그 외의 값은 입력될 수 없다. | . | . 6. 릴레이션의 특징 . 한 릴레이션에는 똑같은 튜플이 포함될 수 없으므로 릴레이션에 포함된 튜플들은 모두 상이함 | 한 릴레이션에 포함된 튜플 사이에는 순서가 없음 | 튜플들의 삽입, 삭제 등의 작업으로 인해 릴레이션은 시간에 따라 변함 | 릴레이션 스키마를 구성하는 속성들 간의 순서는 중요하지 않음 | 속성의 유일한 식별을 위해 속성의 명칭은 유일해야 하지만, 속성을 구성하는 값은 동일한 값이 있을 수 있음 | 릴레이션을 구성하는 튜플을 유일하게 식별하기 위해 속성들의 부분집합을 키로 설정함 | 속성의 값은 논리적으로 더 이상 쪼갤 수 없는 원자값만을 저장함 | . 7. 관계형 데이터 모델(Relational Data Model) . 2차원적인 표(Table)를 이용해서 데이터 상호 관계를 정의하는 DB 구조를 말함 . | 가장 널리 사용되는 데이터 모델 . | 파일 구조처럼 구성한 테이블들을 하나의 DB로 묶어서 테이블 내에 있는 속성들 간의 관계를 설정하거나 테이블 간의 관계를 설정하여 이용함 . | 기본키(Primary Key)와 이를 참조하는 외래키(Foreign Key)로 데이터 간의 관계를 표현함 . | 계층 모델과 망 모델의 복잡한 구조를 단순화시킨 모델 . | 관계형 모델의 대표적인 언어는 SQL임 . | 1:1, 1:N, N:M 관계를 자유롭게 표현할 수 있음 . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/10/theory40.html",
            "relUrl": "/theory/2021/04/10/theory40.html",
            "date": " • Apr 10, 2021"
        }
        
    
  
    
        ,"post61": {
            "title": "E-R(개체-관계) 모델",
            "content": "1. E-R(Entity-Relationship, 개체-관계) 모델 . E-R 모델은 개체와 개체 간의 관계를 기본 요소로 이용하여 현실 세계의 무질서한 데이터를 개념적인 논리 데이터로 표현하기 위한 방법임 | 1976년 피터 첸에 의해 제안되고 기본적인 구성 요소가 정립되었음 | 개념적 데이터 모델의 가장 대표적인 것임 | 개체 타입(Entity Type)과 이들 간의 관계 타입(Relationship Type)을 이용해 현실 세계를 개념적으로 표현 | 데이터를 개체(Entity), 관계(Relationship), 속성(Attribute)으로 묘사 | 1:1, 1:N, N:M 등의 관계 유형을 제한 없이 나타낼 수 있음 | . 2. E-R 다이어그램 . 사각형: 개체(Entity) 타입 . | 마름모: 관계(Relationship) 타입 . | 타원: 속성(Attribute) . | 이중 타원: 다중값 속성(복합 속성) . | 밑줄 타원: 기본키 속성 . | 복수 타원: 복합 속성 ex) 성명은 성과 이름으로 구성 . | 관계: 1:1, 1:N, N:M 등 개체 간 관계에 대한 대응수를 선 위에 기술함 . | 선, 링크: 개체 타입과 속성을 연결 . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/09/theory39.html",
            "relUrl": "/theory/2021/04/09/theory39.html",
            "date": " • Apr 9, 2021"
        }
        
    
  
    
        ,"post62": {
            "title": "식별자(Identifier)",
            "content": "1. 식별자 . 하나의 개체 내에서 각각의 인스턴스를 유일하게 구분할 수 있는 구분자 | 모든 개체는 한 개 이상의 식별자를 반드시 가져야 함 | . 2. 식별자의 분류 . 대표성 여부 주 식별자(Primary Identifier): 개체를 대표하는 유일한 식별자 | 보조 식별자(Alternate Identifier): 주 식별자를 대신하여 개체를 식별할 수 있는 속성 | . | 스스로 생성 여부 내부 식별자(Internal Identifier): 개체 내에서 스스로 만들어지는 식별자 | 외부 식별자(Foreign Identifier): 다른 개체와의 관계에 의해 외부 개체의 식별자를 가져와 사용하는 식별자 | . | 단일 속성 여부 단일 식별자(Single Identifier): 주 식별자가 한 가지 속성으로만 구성된 식별자 | 복합 식별자(Composit Identifier): 주 식별자가 두 개 이상의 속성으로 구성된 식별자 | . | 대체 여부 원조 식별자(Original Identifier): 업무에 의해 만들어지는 가공되지 않은 원래의 식별자로 본질 식별자라고도 함 | 대리 식별자(Surrogate Identifier): 주 식별자의 속성이 두 개 이상인 경우 속성들을 하나의 속성으로 묶어 사용하는 식별자로 인조 식별자라고도 함 | . | . 3. 후보 식별자 . 개체에서 각 인스턴스를 유일하게 식별할 수 있는 속성 또는 속성 집합 | 하나의 개체에는 한 개 이상의 후보 식별자가 존재할 수 있으며 이 중 개체의 대표성을 나타내는 식별자를 주 식별자로, 나머지는 보조 식별자로 지정 | . 4. 주 식별자의 특징 . 유일성: 개체 내의 모든 인스턴스들은 주 식별자에 의해 유일하게 구분되어야 함 | 최소성: 유일성을 만족시키기에 필요한 최소한의 속성으로만 구성되어야 함 | 불변성: 주 식별자가 특정 개체에 한 번 지정되면 그 식별자는 변하지 않아야 함 | 존재성: 주 식별자가 지정되면 식별자 속성에 반드시 데이터 값이 존재해야 함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/08/theory38.html",
            "relUrl": "/theory/2021/04/08/theory38.html",
            "date": " • Apr 8, 2021"
        }
        
    
  
    
        ,"post63": {
            "title": "데이터 모델의 구성 요소",
            "content": "1. 개체(Entity) . 데이터베이스에 표현하려는 것. 개념이나 정보 단위 같은 현실 세계의 대상체 | 실세계에 독립적으로 존재하는 유형, 무형의 정보. 서로 연관된 몇 개의 속성으로 구성됨 | 독립적으로 존재하거나 그 자체로서도 구별이 가능. 유일한 식별자에 의해 식별 | 다른 개체와 하나 이상의 관계가 있음 | . 속성: 개체가 가지고 있는 특성 . 개체 타입: 속성으로만 기술된 개체의 정의 . 개체 인스턴스: 개체를 구성하고 있는 각 속성들이 값을 가져 하나의 개체를 나타내는 것으로 개체 어커런스라고도 함 . 개체 세트: 개체 인스턴스의 집합 . 2. 속성(Attribute) . 데이터베이스를 구성하는 가장 작은 논리적 단위 | 파일 구조상의 데이터 항목 또는 데이터 필드에 해당 | 개체를 구성하는 항목으로 개체의 특성을 기술 | 속성의 수: 디그리 또는 차수라고 함 | 속성의 특성과 개체 구성 방식에 따라 분류함 | . 3. 속성의 특성에 따른 분류 . 기본 속성(Basic Attribute) 업무 분석을 통해 정의한 속성 | 속성 중 가장 많고 일반적임 | 업무상 코드로 정의한 속성은 기본 속성에서 제외 | . | 설계 속성(Designed Attribute) 원래 업무상 존재하지 않고 설계 과정에서 도출해내는 속성 | 업무에 필요한 데이터 외에 데이터 모델링을 위해 업무를 규칙화하려고 속성을 새로 만들거나 변형하여 정의하는 속성 | . | 파생 속성(Derived Attribute) 다른 속성으로부터 계산이나 변형 등의 영향을 받아 발생하는 속성 | 되도록 적은 수를 정의 | . | . 기본 속성인 ‘자동차명’, ‘제조일’, ‘연비’는 업무 분석을 통해 정의한 가장 일반적인 속성이고, 설계 속성인 ‘자동차코드’는 판매되는 자동차를 종류별로 구분하기 위해 업무에는 없지만 새롭게 정의한 속성이며, 파생 속성인 ‘총판매수량’과 ‘총판매금액’은 특정 기간동안 판매된 자동차의 수량과 금액의 합계 계산을 위해 정의한 속성임. . 4. 속성의 개체 구성 방식에 따른 분류 . 기본키 속성(Primary Key Attribute) 개체를 유일하게 식별할 수 있는 속성 | . | 외래키 속성(Foreign Key Attribute) 다른 개체와의 관계에서 포함된 속성 | . | 일반 속성 개체에 포함되어 있고 기본키, 외래키에 포함되지 않은 속성 | . | . 5. 관계(Relationship) . 개체와 개체 사이의 논리적인 연결을 의미 | 개체 간의 관계와 속성 간의 관계가 있음 | . 6. 관계의 형태 . 일 대 일(1:1): 개체 집합 A의 각 원소가 개체 집합 B의 원소 한 개와 대응하는 관계 | 일 대 다(1:N): 개체 집합 A의 각 원소는 개체 집합 B의 원소 여러 개와 대응하고 있지만, 개체 집합 B의 각 원소는 개체 집합 A의 원소 한 개와 대응하는 관계 | 다 대 다(N:M): 개체 집합 A의 각 원소는 개체 집합 B의 원소 여러 개와 대응하고, 개체 집합 B의 각 원소도 개체 집합 A의 원소 여러 개와 대응하는 관계 | . 7. 관계의 종류 . 종속 관계(Dependent Relationship) . 두 개체 사이의 주.종 관계를 표현한 것 | 식별 관계와 비식별 관계가 있음 | . | 중복 관계(Redundant Relationship) . 두 개체 사이에 2번 이상의 종속 관계가 발생하는 관계 | . | 재귀 관계(Recursive Relationship) . 개체가 자기 자신과 관계를 갖는 것으로, 순환 관계라고도 함 | . | 배타 관계(Exclusive Relationship) . 개체의 속성이나 구분자를 기준으로 개체의 특성을 분할하는 관계로, 배타 AND 관계와 배타 OR 관계로 구분 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/07/theory37.html",
            "relUrl": "/theory/2021/04/07/theory37.html",
            "date": " • Apr 7, 2021"
        }
        
    
  
    
        ,"post64": {
            "title": "데이터 모델의 개념",
            "content": "1. 데이터 모델 . 현실 세계의 정보들을 컴퓨터에 표현하기 위해 단순화, 추상화하여 체계적으로 표현한 개념적 모형 | 데이터, 데이터의 관계, 데이터의 의미 및 일관성, 제약 조건 등을 기술하기 위한 개념적 도구들로 구성 | 데이터베이스 설계 과정에서 데이터의 구조(Schema)를 논리적으로 표현하기 위해 지능적 도구로 사용 | 구성 요소: 개체, 속성, 관계 | 종류: 개념적 데이터 모델, 논리적 데이터 모델, 물리적 데이터 모델 | 표시할 요소: 구조, 연산, 제약 조건 | . 2. 개념적 데이터 모델 . 현실 세계에 대한 인간의 이해를 돕기 위해 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정 | 속성들로 기술된 개체 타입 + 개체 타입 간 관계 | 정보 모델이라고도 함 | 대표적 개념적 데이터 모델: ER 모델 | . 3. 논리적 데이터 모델 . 개념적 구조를 컴퓨터가 이해하고 처리할 수 있는 컴퓨터 세계의 환경에 맞도록 변환하는 과정 | 필드로 기술된 데이터 타입 + 데이터 타입 간 관계 | 단순히 데이터 모델이라고 하면 논리적 데이터 모델 의미 | 특정 DBMS는 특정 논리적 데이터 모델 하나만 선정하여 사용 | 데이터 간의 관계를 어떻게 표현하느냐에 따라 관계 모델, 계층 모델, 네트워크 모델로 구분 | . 4. 데이터 모델에 표시할 요소 . 구조(Structure) : 논리적으로 표현된 개체 타입들 간의 관계로서 데이터 구조 및 정적 성질 표현 | 연산(Operation) : 실제 데이터를 처리하는 작업에 대한 명세. 데이터베이스를 조작하는 기본 도구 | 제약 조건(Constraint) : 데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/06/theory36.html",
            "relUrl": "/theory/2021/04/06/theory36.html",
            "date": " • Apr 6, 2021"
        }
        
    
  
    
        ,"post65": {
            "title": "데이터베이스 설계",
            "content": "1. 데이터베이스 설계 . 사용자의 요구를 분석하여 그것들을 컴퓨터에 저장할 수 있는 데이터베이스의 구조에 맞게 변경한 후 DBMS로 데이터베이스를 구현하여 일반 사용자들이 사용하게 하는 것 | . 2. 데이터베이스 설계 시 고려사항 . 무결성 연산 후에도 저장된 데이터가 정해진 제약조건을 항상 만족 | . | 일관성 저장된 데이터들 사이나 특정 질의에 대한 응답이 처음부터 끝까지 변함 없이 일정해야 함 | . | 회복 시스템에 장애가 발생했을 때 장애 발생 직전의 상태로 복구할 수 있어야 함 | . | 보안 불법적인 데이터의 노출 또는 변경이나 손실로부터 보호 | . | 효율성 응답시간의 단축, 시스템의 생산성, 저장 공간의 최적화 등이 가능해야 함 | . | 데이터베이스 확장 데이터베이스 운영에 영향을 주지 않으면서 지속적으로 데이터를 추가할 수 있어야 함 | . | . 3. 데이터베이스 설계 순서 . 요구 조건 분석 . 요구 조건 명세서 작성 . | 개념적 설계 . 개념 스키마, 트랜잭션 모델링, E-R 모델 . | 논리적 설계 . 목표 DBMS에 맞는 논리 스키마 설계, 트랜잭션 인터페이스 설계 . | 물리적 설계 . 목표 DBMS에 맞는 물리적 구조의 데이터로 변환 . | 구현 . 목표 DBMS의 DDL(데이터 정의어)로 데이터베이스 생성, 트랜잭션 작성 . | 4. 요구 조건 분석 . 데이터베이스를 사용할 사람들로부터 필요한 용도 파악 | 데이터베이스 사용자에 따른 수행 업무와 필요한 데이터의 종류, 용도, 처리 형태, 흐름, 제약 조건 등을 수집 | 수집된 정보를 바탕으로 요구 조건 명세 작성 | . 5. 개념적 설계(정보 모델링, 개념화) . 정보의 구조를 얻기 위해 현실 세계의 무한성과 계속성을 이해하고 다른 사람과 통신하기 위하여 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정 | 개념 스키마 모델링+트랜잭션 모델링(병행 수행) | 요구 조건 명세를 DBMS에 독립적인 E-R 다이어그램으로 작성 | DBMS에 독립적인 개념 스키마 설계 | . 6. 논리적 설계(데이터 모델링) . 현실 세계에서 발생하는 자료를 컴퓨터가 이해하고 처리할 수 있는 물리적 저장장치에 저장할 수 있도록 변환하기 위해 특정 DBMS가 지원하는 논리적 자료 구조로 변환시키는 과정 . | 개념 세계의 데이터를 필드로 기술된 데이터 타입과 이 데이터 타입들 간의 관계로 표현되는 논리적 구조의 데이터로 모델화 | 개념 스키마를 평가 및 정제하고 DBMS에 따라 서로 다른 논리적 스키마를 설계 | 트랜잭션의 인터페이스 설계 | . 7. 물리적 설계(데이터 구조화) . 논리적 구조로 표현된 데이터를 디스크 등의 물리적 저장장치에 저장할 수 있는 물리적 구조의 데이터로 변환하는 과정 | 다양한 데이터베이스 응용에 대해 처리 성능을 얻기 위해 데이터베이스 파일의 저장 구조 및 액세스 경로를 결정 | 저장 레코드의 형식, 순서, 접근 경로, 조회 집중 레코드 등의 정보를 사용하여 데이터가 컴퓨터에 저장되는 방법 묘사 | . 8. 데이터베이스 구현 . 논리적 설계와 물리적 설계에서 도출된 데이터베이스 스키마를 파일로 생성하는 과정 | 사용하려는 특정 DBMS의 DDL(데이터 정의어)을 이용하여 데이터베이스 스키마를 기술한 후 컴파일하여 빈 데이터베이스 파일을 생성 | 응용 프로그램을 위한 트랜잭션 작성 | 데이터베이스 접근을 위한 응용 프로그램을 작성 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/05/theory35.html",
            "relUrl": "/theory/2021/04/05/theory35.html",
            "date": " • Apr 5, 2021"
        }
        
    
  
    
        ,"post66": {
            "title": "데이터베이스 개요",
            "content": "1. 데이터저장소 . 데이터들을 논리적인 구조로 조직화하거나 물리적인 공간에 구축한 것 | . 논리 데이터저장소: 데이터 및 데이터 간의 연관성, 제약조건을 식별하여 논리적인 구조로 조직화한 것 . 물리 데이터저장소: 논리 데이터저장소를 실제 저장장치에 저장한 것 . 2. 데이터베이스(Database) . 공동으로 사용될 데이터의 중복을 배제하여 통합하고, 쉽게 접근하여 처리할 수 있도록 저장장치에 저장하여 항상 사용할 수 있도록 운영하는 운영 데이터 | . 통합된 데이터(Integrated Data) : 자료의 중복을 배제한 데이터의 모임 | 저장된 데이터(Stored Data) : 컴퓨터가 접근할 수 있는 저장 매체에 저장된 자료 | 운영 데이터(Operated Data) : 조직의 고유한 업무를 수행하는 데 반드시 필요한 자료 | 공용 데이터(Shared Data) : 여러 응용 시스템들이 공동으로 소유하고 유지하는 자료 | 3. DBMS(DataBase Management System; 데이터베이스 관리 시스템) . 사용자의 요구에 따라 정보를 생성해주고, 데이터베이스를 관리해주는 소프트웨어 | 기존의 파일 시스템이 갖는 데이터의 종속성과 중복성의 문제 해결 가능 . | 필수 기능 . 정의(Definition) 기능 . 데이터의 형과 구조에 대한 정의, 이용 방식, 제약 조건 등 명시 . | 조작(Manipulation) 기능 . 데이터 검색, 갱신, 삽입, 삭제 인터페이스 제공 . | 제어(Control) 기능 . 데이터의 무결성, 보안, 권한 검사, 병행 제어 제공 . | | . 4. 데이터의 독립성 . 논리적 독립성 응용 프로그램과 데이터베이스 독립시킴 | 데이터의 논리적 구조를 변경해도 응용 프로그램은 영향 받지 않음 | . | 물리적 독립성 응용 프로그램과 물리적 장치 독립시킴 | 디스크를 추가/변경하더라도 응용 프로그램은 영향 받지 않음 | . | . 5. 스키마(Schema) . 데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술한 것 | . 외부 스키마 . 사용자나 응용 프로그래머가 각 개인의 입장에서 필요로 하는 데이터베이스의 논리적 구조 정의한 것 | | 개념 스키마 . 데이터베이스의 전체적인 논리적인 구조 | 모든 응용 프로그램이나 사용자들이 필요로 하는 데이터를 종합한 조직 전체의 데이터베이스로 하나만 존재 | | 내부 스키마 . 물리적 저장장치의 입장에서 본 데이터베이스 구조 . | 실제로 저장될 레코드의 형식, 저장 데이터 항목의 표현 방법, 내부 레코드의 물리적 순서 등 나타냄 . | |",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/04/theory34.html",
            "relUrl": "/theory/2021/04/04/theory34.html",
            "date": " • Apr 4, 2021"
        }
        
    
  
    
        ,"post67": {
            "title": "오류 데이터 측정 및 정제",
            "content": "1. 오류 데이터 측정 및 정제 . 고품질의 데이터를 운영 및 관리하기 위해 수행 | 진행 과정 데이터 품질 분석 오류 데이터 찾기 위해 원천 및 목적 시스템 데이터의 정합성 여부 확인 | . | 오류 데이터 측정 정상 데이터와 오류 데이터의 수를 측정하여 오류 관리 목록 작성 | . | 오류 데이터 정제 오류 관리 목록의 각 항목 분석하여 원천 데이터 정제/전환 프로그램 수정 | . | . | . 2. 오류 상태 . Open : 오류가 보고만 되고 분석되지 않은 상태 | Assigned : 개발자에게 오류 전달한 상태 | Fixed : 개발자가 오류 수정한 상태 | Closed : 수정된 오류를 다시 테스트했을 때 오류가 발견되지 않은 상태 | Deferred : 오류 수정 연기한 상태 | Classified : 보고된 오류를 관리자들이 오류가 아니라고 확인한 상태 | . 3. 데이터 정제요청서 . 데이터의 정제와 전환 프로그램 수정 위해 요청사항 및 조치사항 등 데이터 정제와 관련된 전반적인 내용을 문서로 작성한 것 | 오류 관리 목록을 기반으로 데이터 정제 요건 목록을 작성하고 이 목록의 항목별로 데이터 정제요청서 작성 | . 4. 데이터 정제보고서 . 정제된 원천 데이터가 정상적으로 정제되었는지 확인한 결과를 문서로 작성한 것 | 정제 요청 데이터와 정제된 데이터 항목을 눈으로 직접 비교하여 확인 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/03/theory33.html",
            "relUrl": "/theory/2021/04/03/theory33.html",
            "date": " • Apr 3, 2021"
        }
        
    
  
    
        ,"post68": {
            "title": "데이터 검증",
            "content": "1. 데이터 검증 . 원천 시스템의 데이터를 목적 시스템의 데이터로 전환하는 과정이 정상적으로 수행되었는지 여부를 확인하는 과정 | . 2. 검증 방법에 따른 분류 . 로그 검증: 데이터 전환 과정에서 작성하는 추출, 전환, 적재 로그 검증 . | 기본 항목 검증: 로그 검증 외에 별도 요청된 검증 항목에 대해 검증 . | 응용 프로그램 검증: 응용 프로그램을 통한 데이터 전환의 정합성 검증 . | 응용 데이터 검증: 사전에 정의된 업무 규칙을 기준으로 데이터 전환의 정합성 검증 . | 값 검증: 숫자 항목의 합계 검증, 코드 데이터의 범위 검증, 속성 변경에 따른 값 검증 수행 . | . 3. 검증 단계에 따른 분류 . 추출: 원천 시스템 데이터에 대한 정합성 확인(로그 검증) | 전환: 매핑 정의서에 정의된 내용 정확히 반영되었는지, 오류 여부 확인(로그 검증) | DB 적재: SAM 파일을 적재하는 과정에서 발생할 수 있는 오류나 데이터 누락 여부 등 확인(로그 검증) | DB 적재 후: 적재 완료 후 정합성 확인(기본 항목 검증) | 전환 완료 후: 추가 검증을 통해 데이터 전환의 정합성 검증(응용 프로그램 검증, 응용 데이터 검증) | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/04/02/theory32.html",
            "relUrl": "/theory/2021/04/02/theory32.html",
            "date": " • Apr 2, 2021"
        }
        
    
  
    
        ,"post69": {
            "title": "데이터 전환",
            "content": "1. 데이터 전환 . 운영 중인 기존 정보 시스템에 축적되어 있는 데이터를 추출하여 새로 개발할 정보 시스템에서 운영할 수 있도록 변환한 후 적재하는 일련의 과정 . | ETL(Extraction, Transformation, Load) 과정이라고 함 | 데이터 이행 또는 데이터 이관이라고도 함 | . 2. 데이터 전환 계획서 . 데이터 전환이 필요한 대상을 분석하여 데이터 전환 작업에 필요한 모든 계획을 기록하는 문서 . | 항목 . 데이터 전환 개요 | 데이터 전환 대상 및 범위 | 데이터 전환 환경 구성 | 데이터 전환 조직 및 역할 | 데이터 전환 일정 | 데이터 전환 방안 | 데이터 정비 방안 | 비상 계획 | 데이터 복구 대책 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/31/theory31.html",
            "relUrl": "/theory/2021/03/31/theory31.html",
            "date": " • Mar 31, 2021"
        }
        
    
  
    
        ,"post70": {
            "title": "소프트웨어 개발 프레임워크",
            "content": "1. 소프트웨어 개발 프레임워크 . 소프트웨어 개발에 공통적으로 사용되는 구성 요소와 아키텍처를 일반화하여 손쉽게 구현할 수 있도록 여러 가지 기능들을 제공하는 반제품 형태의 소프트웨어 시스템 | 선행 사업자의 기술에 의존하지 않는 표준화된 개발 기반으로 인해 사업자 종속성이 해소됨 | 주요 기능 예외 처리 | 트랜잭션 처리 | 메모리 공유 | 데이터 소스 관리 | 서비스 관리 | 쿼리 서비스 | 로깅 서비스 | 사용자 인증 서비스 | . | 종류 스프링 프레임워크 | 전자정부 프레임워크 | 닷넷 프레임워크 | . | . 2. 스프링 프레임워크 . 자바 플랫폼을 위한 오픈 소스 경량형 애플리케이션 프레임워크 | 동적인 웹 사이트의 개발을 위해 다양한 서비스 제공 | 전자정부 표준 프레임워크의 기반 기술로 사용 | . 3. 전자정부 프레임워크 . 대한민국의 공공부문 정보화 사업 시 효율적인 정보 시스템의 구축을 지원하기 위해 필요한 기능 및 아키텍처를 제공하는 프레임워크 | 개발 프레임워크의 표준 정립으로 응용 소프트웨어의 표준화, 품질 및 재사용성 향상이 목적 | 오픈 소스 기반의 범용화 이룰 수 있음 | 공개된 기술을 활용해 특정 업체의 종속성을 배제하고 사업별 공통 컴포넌트의 중복 개발 방지 | . 4. 닷넷 프레임워크(.NET Framework) . Windows 프로그램의 개발 및 실행 환경을 제공하는 프레임워크 | 통합 인터넷 전략을 위해 Microsoft 사에서 개발 | 코드 실행을 관리하는 CLR(Common Language Runtime) 이라는 이름의 가상머신 상에서 작동 | . 5. 소프트웨어 개발 프레임워크의 특성 . 모듈화(Modularity) . 캡슐화를 통해 모듈화를 강화하고 설계 및 구현의 변경에 따른 영향 최소화하여 소프트웨어 품질 향상 | 개발 표준에 의한 모듈화로 인해 유지 보수 용이 | . | 재사용성(Reusability) . 재사용 가능한 모듈을 제공하여 예산 절감, 생산성 향상, 품질 보증이 가능 | . | 확장성(Extensibility) . 다형성을 통한 인터페이스 확장이 가능하여 다양한 형태와 기능을 가진 애플리케이션 개발 가능 | . | 제어의 역흐름(Inversion of Control) . 개발자가 관리하고 통제해야 하는 객체들의 제어를 프레임워크에 넘김으로써 생산성 향상 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/30/theory30.html",
            "relUrl": "/theory/2021/03/30/theory30.html",
            "date": " • Mar 30, 2021"
        }
        
    
  
    
        ,"post71": {
            "title": "소프트웨어 개발 방법론 테일러링",
            "content": "1. 소프트웨어 개발 방법론 테일러링 . 프로젝트 상황 및 특성에 맞도록 정의된 소프트웨어 개발 방법론의 절차, 사용 기법 등을 수정 및 보완하는 작업 | . 프로젝트 특징 정의 -&gt; 표준 프로세스 선정 및 검증 -&gt; 상위 수준의 커스터마이징 -&gt; 세부 커스터마이징 -&gt; 테일러링 문서화 . 2. 소프트웨어 개발 방법론 테일러링 고려사항 . 내부적 기준 . 목표 환경: 시스템의 개발 환경과 유형이 서로 다른 경우 | 요구사항: 우선적으로 고려할 요구사항이 서로 다른 경우 | 프로젝트 규모: 비용, 인력, 기간 등 프로젝트 규모가 서로 다른 경우 | 보유 기술: 프로세스, 개발 방법론, 산출물, 구성원의 능력 등이 서로 다른 경우 | . | 외부적 기준 . 법적 제약사항: 프로젝트별로 적용될 IT Compliance(기업 운영 시 IT 분야에서 반드시 지켜야 하는 법적 규제 사항)가 서로 다른 경우 . | 표준 품질 기준: 금융, 제도 등 분야별 표준 품질 기준이 서로 다른 경우 . | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/29/theory29.html",
            "relUrl": "/theory/2021/03/29/theory29.html",
            "date": " • Mar 29, 2021"
        }
        
    
  
    
        ,"post72": {
            "title": "소프트웨어 개발 표준",
            "content": "1. 소프트웨어 개발 표준 . 소프트웨어 개발 단계에서 수행하는 품질 관리에 사용되는 국제 표준을 의미 . | 주요 소프트웨어 개발 표준 . ISO/IEC 12207 . CMMI(능력 성숙도 통합 모델) . SPICE(소프트웨어 처리 개선 및 능력 평가 기준) . | . 2. ISO/IEC 12207 . ISO(국제표준화기구)에서 만든 표준 소프트웨어 생명 주기 프로세스임 | 소프트웨어의 개발, 운영, 유지보수 등을 체계적으로 관리하기 위한 소프트웨어 생명 주기 표준 제공 | 구분(기본, 지원, 조직) 기본 생명 주기 프로세스: 획득, 공급, 개발, 운영, 유지보수 프로세스 | 지원 생명 주기 프로세스: 품질 보증, 검증, 확인, 활동 검토, 감사, 문서화, 형상 관리, 문제 해결 프로세스 | 조직 생명 주기 프로세스: 관리, 기반 구조, 훈련, 개선 프로세스 | . | . 3. CMMI(Capability Maturity Model Integration) . 소프트웨어 개발 조직의 업무 능력 및 조직의 성숙도를 평가하는 모델 | 성숙도 단계: 초기, 관리, 정의, 정량적 관리, 최적화 초기: 정의된 프로세스 없음, 작업자 능력에 따라 성공 여부 결정 | 관리: 규칙화된 프로세스, 특정한 프로젝트 내의 프로세스 정의 및 수행 | 정의: 표준화된 프로세스, 조직의 표준 프로세스 활용하여 업무 수행 | 정량적 관리: 예측 가능한 프로세스, 프로젝트를 정량적으로 관리 및 통제 | 최적화: 지속적 개선 프로세스, 프로세스 역량 향상을 위해 지속적인 프로세스 개선 | . | . 4. SPICE(Software Process Improvement and Capability dEtermination) . 소프트웨어의 품질 및 생산성 향상을 위해 소프트웨어 프로세스를 평가 및 개선하는 국제 표준 | 공식 명칭: ISO/IEC 15504 | . 5. SPICE의 구성 . 고객-공급자 프로세스 소프트웨어를 개발하여 고객에게 전달하는 것을 지원 | SW의 정확한 운용 및 사용을 위한 프로세스로 구성 | 구성 요소: 인수, 공급, 요구 도출, 운영 | 프로세스 수: 10개 | . | 공학 프로세스 시스템과 소프트웨어 제품의 명세화, 구현, 유지보수를 하는데 사용되는 프로세스로 구성 | 구성 요소: 개발, 소프트웨어 유지보수 | 프로세스 수: 9개 | . | 지원 프로세스 다른 프로세스에 의해 이용되는 프로세스로 구성 | 구성 요소: 문서화, 형상, 품질 보증, 검증, 확인, 리뷰, 감사, 품질 문제 해결 | 프로세스 수: 8개 | . | 관리 프로세스 프로젝트 관리자에 의해 사용되는 프로세스로 구성 | 구성 요소: 관리, 프로젝트 관리, 품질 및 위험 관리 | 프로세스 수: 4개 | . | 조직 프로세스 조직의 업무 목적 수립과 조직의 업무 목표 달성을 위한 프로세스로 구성 | 구성 요소: 조직 배치, 개선 활동 프로세스, 인력 관리, 기반 관리, 측정 도구, 재사용 | 프로세스 수: 9개 | . | . 6. SPICE의 프로세스 수행 능력 단계 . 불완전-수행-관리-확립-예측-최적화 . 불완전: 프로세스가 구현되지 않았거나 목적을 달성하지 못한 단계 | 수행: 프로세스가 수행되고 목적이 달성된 단계 | 관리: 정의된 자원의 한도 내에서 그 프로세스가 작업 산출물을 인도하는 단계 | 확립: 소프트웨어 공학 원칙에 기반하여 정의된 프로세스가 수행되는 단계 | 예측: 프로세스가 목적 달성을 위해 통제되고, 양적인 측정을 통해서 일관되게 수행되는 단계 | 최적화: 프로세스 수행을 최적화하고, 지속적인 개선을 통해 업무 목적을 만족시키는 단계 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/28/theory28.html",
            "relUrl": "/theory/2021/03/28/theory28.html",
            "date": " • Mar 28, 2021"
        }
        
    
  
    
        ,"post73": {
            "title": "소프트웨어 개발 방법론 결정",
            "content": "1. 소프트웨어 개발 방법론 결정 . 프로젝트 관리와 재사용 현황을 소프트웨어 개발 방법론에 반영하고, 확정된 소프트웨어 생명 주기와 개발 방법론에 맞춰 소프트웨어 개발 단계, 활동, 작업, 절차 등을 정의하는 것임 | . 프로젝트 관리와 재사용 현황을 소프트웨어 개발 방법론에 반영 | 개발 단계별 작업 및 절차를 소프트웨어 생명 주기에 맞춰 수립 | 결정된 sw 개발 방법론의 개발 단계별 활동 목적, 작업 내용, 산출물에 대한 메뉴얼을 작성 | 2. 프로젝트 관리(Project Management) . 주어진 기간 내에 최소의 비용으로 사용자를 만족시키는 시스템을 개발하기 위한 전반적인 활동 . 일정 관리: 작업 순서, 작업 기간 산정, 일정 개발, 일정 통제 | 비용 관리: 비용 산정, 비용 예산 편성, 비용 통제 | 인력 관리: 프로젝트 팀 편성, 자원 산정, 프로젝트 조직 정의, 프로젝트 팀 개발, 자원 통제, 프로젝트 팀 관리 | 위험 관리: 위험 식별, 위험 평가, 위험 대처, 위험 통제 | 품질 관리: 품질 계획, 품질 보증 수행, 품질 통제 수행 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/27/theory27.html",
            "relUrl": "/theory/2021/03/27/theory27.html",
            "date": " • Mar 27, 2021"
        }
        
    
  
    
        ,"post74": {
            "title": "프로젝트 일정 계획",
            "content": "1. 프로젝트 일정 계획 . 프로젝트의 프로세스를 이루는 소작업을 파악하고 예측된 노력을 각 소작업에 분배하여 소작업의 순서와 일정을 정하는 것 | 사용되는 기능: WBS, PERT/CPM, 간트 차트 | . 2. PERT(Program Evaluation and Review Technique, 프로그램 평가 및 검토 기술) . 프로젝트에 필요한 전체 작업의 상호 관계를 표시하는 네트워크 | 각 작업별로 다음과 같이 단계를 나누어 종료 결정 낙관적인 경우 | 가능성이 있는 경우 | 비관적인 경우 | . | 개발 경험이 없어 소요 기간 예측이 어려운 프로젝트 일정 계획에 사용 | 노드와 간선으로 구성되며 원 노드에는 작업을, 간선에는 낙관치, 기대치, 비관치 표시 | 결정 경로, 작업에 대한 경계 시간, 작업 간의 상호 관련성 등을 알 수 있음 | . 작업 예측치 = (비관치+ 4*기대치 + 낙관치) / 6 . 평방 편차 = [(비관치-낙관치) / 6]^2 . 3. CPM(Critical Path Method, 임계 경로 기법) . 프로젝트 완성에 필요한 작업을 나열하고 작업에 필요한 소요 기간을 예측하는데 사용하는 기법 | 노드와 간선으로 구성된 네트워크로 노드는 작업, 간선은 작업 사이의 전후 의존 관계 나타냄 | 원형 노드는 각각의 작업을 의미하며, 작업 이름과 소요 기간 표시 | 박스 노드는 이정표를 의미하며, 이정표 이름과 예상 완료 시간 표시 | 간선을 나타내는 화살표의 흐름에 따라 각 작업 진행. 전 작업이 완료되어야 다음 작업 진행 가능 | 임계 경로: 제시된 그림에서 굵은 선(최장 경로) | . 4. 간트 차트 . 프로젝트의 각 작업들이 언제 시작하고 언제 종료되는지에 대한 작업 일정을 막대 도표를 이용하여 표시하는 프로젝트 일정표 | 시간선 차트라고도 함 | 중간 목표 미달성 시 그 이유와 기간을 예측할 수 있게 함 | 사용자와의 문제점이나 예산의 초과 지출 등도 관리 | 자원 배치와 인원 게획에 유용하게 사용됨 | 이정표, 작업 일정, 작업 기간, 산출물로 구성 | 수평 막대의 길이는 각 작업의 기간 | . -낙관치: 모든 상황이 좋아 최대로 빨리 진행될 때 걸리는 시간 . -기대치: 모든 상황이 정상적으로 진행될 때 걸리는 시간 . -비관치: 모든 상황에 장애가 생겨 가장 늦게 진행될 때 걸리는 시간 .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/26/theory26.html",
            "relUrl": "/theory/2021/03/26/theory26.html",
            "date": " • Mar 26, 2021"
        }
        
    
  
    
        ,"post75": {
            "title": "수학적 산정 기법",
            "content": "1. 수학적 산정 기법 . 상향식 비용 산정 기법으로, 경험적 추정 모형, 실험적 추정 모형이라고도 함 . | 개발 비용 산정의 자동화를 목표로 함 . | 사용되는 공식은 과거의 유사한 프로젝트를 기반으로 유도된 것 . COCOMO(COnstructive COst MOdel) 모형 . Putnam 모형 . 기능 점수(FP) 모형 . | . 2. COCOMO 모형 . 원시 프로그램의 규모인 LOC(원시 코드 라인 수)에 의한 비용 산정 기법 | 개발할 소프트웨어의 규모를 예측한 후 이를 소프트웨어 종류에 따라 다르게 책정되는 비용 산정 방정식에 대입하여 비용을 산정함 | 비용 산정 결과는 프로젝트를 완성하는 데 필요한 노력(Man-Month)로 나타남 | 보헴(Bohem)이 제안 | . 3. COCOMO의 소프트웨어 개발 유형 . 조직형(Organic Mode) 기관 내부에서 개발된 중.소규모의 소프트웨어 | 일괄 자료 처리나 과학기술 계산용, 비즈니스 자료 처리용 등의 ` 5만 라인 이하`의 SW 개발 | 사무 처리용, 업무용, 과학용 응용 소프트웨어 개발에 적합 | . | 반분리형(Semi-Detached Mode) 조직형과 내장형의 중간형 | 트랜잭션 처리 시스템이나 운영체제, 데이터베이스 관리 시스템 등의 30만 라인 이하의 SW 개발 | 컴파일러, 인터프리터와 같은 유틸리티 개발에 적합 | . | 내장형(Embedded Mode) 초대형 규모 | 트랜잭션 처리 시스템이나 운영체제 등의 30만 라인 이상의 SW 개발 | 신호기 제어 시스템, 미사일 유도 시스템, 실시간 처리 시스템 등의 시스템 프로그램 개발에 적합 | . | . 4. COCOMO 모형의 종류 . 기본형(Basic) COCOMO . SW의 크기와 개발 유형만을 이용하여 비용 산정 | . | 중간형(Intermediate) COCOMO . 기본형 COCOMO 공식을 토대로 사용하나 아래 4가지 특성에 의해 비용 산정 . 제품의 특성 . 컴퓨터의 특성 . 개발 요원의 특성 . 프로젝트 특성 . | . | 발전형(Detailed) COCOMO . 중간형 COCOMO를 보완하여 만들어진 모형 | 개발 공정별로 보다 자세하고 정확하게 노력 산출하여 비용 산정 | 소프트웨어 환경과 구성 요소가 사전에 정의되어 있어야 하며 개발 과정의 후반부에 주로 적용 | . | . 5. Putnam 모형 . 소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 예상하는 모형 | 푸트남이 제안한 것으로, 생명 주기 예측 모형이라고도 함 | 시간에 따른 함수로 표현되는 Rayleigh-Norden 곡선의 노력 분포도를 기초로 함 | 대형 프로젝트의 노력 분포 산정에 이용 | 개발 기간이 늘어날수록 프로젝트 적용 인원의 노력 감소 | . 6. 기능 점수(FP, Function Point) 모형 . 소프트웨어의 기능을 증대시키는 요인별로 가중치를 부여하고 가중치를 합산하여 총 기능 점수 산출하며, 총 기능 점수와 영향도를 이용하여 기능 점수(FP)를 구한 후 이를 이용해 비용 산정하는 기법 | 알브레히트가 제안 | 소프트웨어 기능 증대 요인 자료 입력(입력 양식) | 정보 출력(출력 보고서) | 명령어(사용자 질의수) | 데이터 파일 | 필요한 외부 루틴과의 인터페이스 | . | . 7. 비용 산정 자동화 추정 도구 . SLIM Rayleigh-Norden 곡선과 Putnam 예측 모델을 기초로 하여 개발된 자동화 추정 도구 | . | ESTIMACS 다양한 프로젝트와 개인별 요소를 수용하도록 FP 모형을 기초로 하여 개발된 자동화 추정 도구 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/25/theory25.html",
            "relUrl": "/theory/2021/03/25/theory25.html",
            "date": " • Mar 25, 2021"
        }
        
    
  
    
        ,"post76": {
            "title": "상향식 비용 산정 기법",
            "content": "1. 상향식 비용 산정 기법 . 프로젝트의 세부적인 작업 단위별로 비용을 산정한 후 집계하여 전체 비용을 산정하는 방법 | . LOC(원시 코드 라인 수, source Line Of Code) 기법 . 개발 단계별 인월수(Effort per Task) 기법 . 수학적 산정 기법 . 2. LOC 기법 . 소프트웨어 각 기능의 원시 코드 라인 수의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정하는 기법 | 측정 용이, 이해하기 쉬워 가장 많이 사용 | 예측치를 이용하여 생산성, 노력, 개발 기간 등의 비용 산정 | . 예측치 = (a+4m+b)/6 *a=낙관치, b=비관치, m=기대치(중간치) . 산정 공식 노력(인월) = 개발 기간 * 투입 인원 = LOC / 1인당 월평균 생산 코드 라인 수 | 개발 비용 = 노력(인월) * 단위 비용(1인당 월평균 인건비) | 개발 기간 = 노력(인월) /투입 인원 | 생산성 = LOC / 노력(인월) | . | ex. LOC 기법에 의하여 예측된 총 라인 수가 30000라인, 개발에 참여할 프로그래머가 5명, 프로그래머들의 평균 생산성이 월간 300라인일 때 개발에 소요되는 기간은? 노력(인월) = LOC/1인당 월평균 생산 코드 라인 수 = 30000/300=100명 | 개발 기간 = 노력(인월)/투입 인원 = 100/5 = 20개월 | . | . 3. 개발 단계별 인원수 기법 . LOC 기법을 보완하기 위한 기법으로, 각 기능을 구현시키는 데 필요한 노력을 생명 주기의 각 단계별로 산정함 | LOC 기법보다 더 정확함 | . 비관치, 낙관치, 기대치 . 비관치: 가장 많이 측정된 코드 라인 수 | 낙관치: 가장 적게 측정된 코드 라인 수 | 기대치: 측정된 모든 코드 라인 수의 평균 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/24/theory24.html",
            "relUrl": "/theory/2021/03/24/theory24.html",
            "date": " • Mar 24, 2021"
        }
        
    
  
    
        ,"post77": {
            "title": "하향식 비용 산정 기법",
            "content": "1. 하향식 비용 산정 기법 . 과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회의를 통해 비용을 산정하는 비과학적인 방법 | 전체 비용을 선정한 후 각 작업별 비용 세분화 | . 전문가 감정 기법 . 델파이 기법 . 2. 전문가 감정 기법 . 조직 내에 있는 경험 많은 두 명 이상의 전문가에게 비용 산정을 의뢰하는 기법 | 가장 편리하고 신속하게 비용 산정 | 의뢰자로부터 믿음을 얻을 수 있음 | 개인적이고 주관적 | . 3. 델파이 기법 . 전문가 감정 기법의 주관적인 편견을 보완하기 위해 많은 전문가의 의견을 종합하여 산정하는 기법 | 편견, 분위기에 지배되지 않도록 한 명의 조정자와 여러 전문가로 구성 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/23/theory23.html",
            "relUrl": "/theory/2021/03/23/theory23.html",
            "date": " • Mar 23, 2021"
        }
        
    
  
    
        ,"post78": {
            "title": "비용 산정 기법",
            "content": "1. 소프트웨어 비용 산정 . 개발에 소요되는 인원, 자원, 기간 등으로 소프트웨어의 규모를 확인하여 개발 계획 수립에 필요한 비용을 산정하는 것 | 비용 너무 높게 산정할 경우 예산 낭비와 일의 효율성 저하 초래 | 비용 너무 낮게 산정할 경우 개발자의 부담이 가중되고 품질 문제 발생 | 하향식 비용 산정 기법, 상향식 비용 산정 기법 | . 2. 소프트웨어 비용 결정 요소 . 프로젝트 요소 제품 복잡도: 소프트웨어 종류에 따라 발생할 수 있는 문제점 난이도 | 시스템 크기: 소프트웨어의 규모에 따라 개발해야 할 시스템의 크기 | 요구되는 신뢰도: 일정 기간 내 주어진 조건 하에서 프로그램이 필요한 기능을 수행하는 정도 | . | 자원 요소 인적 자원: 소프트웨어 개발 관련자들이 갖춘 능력 혹은 자질 | 하드웨어 자원: 개발 시 필요한 장비와 워드프로세서, 프린터 등의 보조 장비 | 소프트웨어 자원: 필요한 언어 분석기, 문서화 도구 등의 개발 지원 도구 | . | 생산성 요소 개발자 능력: 개발자들이 갖춘 전문지식, 경험, 이해도, 책임감, 창의력 등 | 개발 기간: 소프트웨어 개발 기간 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/22/theory22.html",
            "relUrl": "/theory/2021/03/22/theory22.html",
            "date": " • Mar 22, 2021"
        }
        
    
  
    
        ,"post79": {
            "title": "S/W 공학의 발전적 추세",
            "content": "1. 소프트웨어 재사용(Software Reuse) . 이미 개발되어 인정받은 소프트웨어를 다른 소프트웨어 개발이나 유지에 사용하는 것 | 소프트웨어 개발의 품질과 생산성을 높이기 위한 방법 | 기존에 개발된 소프트웨어와 경험, 지식 등을 새로운 소프트웨어에 적용함 | 합성 중심(Composition-Based) : 전자 칩과 같은 소프트웨어 부품, 즉 블록을 만들어서 끼워 맞춰 소프트웨어를 완성시키는 방법. 블록 구성 방법이라고도 함 | 생성 중심(Generation-Based) : 추상화 형태로 써진 명세를 구체화하여 프로그램을 만드는 방법. 패턴 구성 방법이라고도 함 | . 2. 소프트웨어 재공학 . 새로운 요구에 맞도록 기존 시스템을 이용하여 보다 나은 시스템을 구축하고, 새로운 기능을 추가하여 소프트웨어 성능을 향상시키는 것 | 유지보수 비용이 소프트웨어 개발 비용의 대부분을 차지하기 때문에 유지보수의 생산성 향상을 통해 소프트웨어 위기를 해결하는 방법 | 기존 소프트웨어의 데이터와 기능들의 개조 및 개선을 통해 유지보수성과 품질을 향상 | 소프트웨어 재공학의 이점 품질 향상 | 생산성 증가 | 수명 연장 | 오류 감소 | . | . 3. CASE(Computer Aided Software Engineering) . 소프트웨어 개발 과정에서 사용되는 요구 분석, 설계, 구현, 검사 및 디버깅 과정 전체 또는 일부를 컴퓨터와 전용 소프트웨어 도구를 사용하여 자동화하는 것 | 객체지향 시스템, 구조적 시스템 등 다양한 시스템에서 활용되는 자동화 도구 | 소프트웨어 생명 주기의 전체 단계를 연결하고 자동화하는 통합된 도구 제공 | 소프트웨어 개발 도구와 방법론이 결합. 정형화된 구조 및 방법을 소프트웨어 개발에 적용하여 생산성 향상을 구현 | CASE의 주요 기능 소프트웨어 생명 주기 전 단계의 연결 | 다양한 소프트웨어 개발 모형 지원 | 그래픽 지원 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/20/theory21.html",
            "relUrl": "/theory/2021/03/20/theory21.html",
            "date": " • Mar 20, 2021"
        }
        
    
  
    
        ,"post80": {
            "title": "소프트웨어 개발 방법론",
            "content": "1. 소프트웨어 개발 방법론 . 소프트웨어 개발, 유지보수 등에 필요한 여러 가지 일들의 수행 방법과 이러한 일들을 효율적으로 수행하려는 과정에서 필요한 각종 기법 및 도구를 체계적으로 정리하여 표준화한 것 . | 목적: 소프트웨어의 생산성과 품질 향상 | 주요 소프트웨어 개발 방법론 구조적 방법론 | 정보공학 방법론 | 객체지향 방법론 | 컴포넌트 기반(CBD) 방법론 | 제품 계열 방법론 | 애자일 방법론 | . | . 2. 구조적 방법론 . 정형화된 분석 절차에 따라 사용자 요구사항을 파악하여 문서화하는 처리 중심의 방법론 | 1960년대까지 가장 많이 적용 | 쉬운 이해 및 검증이 가능한 프로그램 코드를 생성하는 것이 목적 | 복잡한 문제를 다루기 위해 분할과 정복 원리 적용 | . 타당성 검토-&gt;계획-&gt;요구사항-&gt;설계-&gt;구현-&gt;시험-&gt;운용/유지보수 . 3. 정보공학 방법론 . 정보 시스템의 개발을 위해 계획, 분석, 설계, 구축에 정형화된 기법들을 통합 및 적용하는 자료 중심의 방법론 | 정보 시스템 개발 주기를 이용해 대규모 정보 시스템을 구축하는데 적합함 | . 정보 전략 계획 수립-&gt;업무 영역 분석-&gt;업무 시스템 설계-&gt;업무 시스템 구축 . 4. 객체지향 방법론 . 현실 세계의 개체(Entity)를 기계의 부품처럼 하나의 객체(Object)로 만들어 기계의 부품을 조립하듯이 객체들을 조립해서 필요한 소프트웨어를 구현하는 방법론 | 구조적 기법의 문제점으로 인한 소프트웨어 위기의 해결책으로 채택 | 구성 요소: 객체, 클래스, 메세지 | 기본 원칙: 캡슐화, 정보 은닉, 추상화, 상속성, 다형성 | . 요구 분석-&gt;설계-&gt;구현-&gt;테스트 및 검증-&gt;인도 . 5. 컴포넌트 기반(CBD: Component Based Design) 방법론 . 기존 시스템이나 소프트웨어를 구성하는 컴포넌트들을 조합하여 하나의 새로운 애플리케이션을 만드는 방법론 | 컴포넌트의 재사용이 가능-&gt;시간, 노력 절감 | 새로운 기능 간단하게 추가 가능 -&gt; 확장성 보장 | 유지 보수 비용 최소화, 생산성 및 품질 향상 | . 개발 준비-&gt;분석-&gt;설계-&gt;구현-&gt;테스트-&gt;전개-&gt;인도 . 6. 제품 계열 방법론 . 특정 제품에 적용하고 싶은 공통된 기능을 정의하여 개발하는 방법론 | 임베디드 소프트웨어를 만드는데 적합함 영역 공학: 영역 분석, 영역 설계, 핵심 자산을 구현 | 응용 공학: 제품 요구 분석, 제품 설계, 제품을 구현 | . | 영역 공학과 응용 공학의 연계를 위해 제품의 요구사항, 아키텍처, 조립 생산이 필요 | . 객체, 클래스, 메시지 . 객체: 데이터와 데이터를 처리하는 함수를 묶어 놓은 하나의 sw 모듈 | 클래스: 공통된 속성과 연산을 갖는 객체의 집합으로 객체의 일반적 타입 | 메시지: 객체들 간에 상호작용을 하는 데 사용되는 명령 또는 요구 사항 | . 캡슐화, 정보은닉, 추상화, 상속성, 다형성 . 캡슐화: 데이터와 데이터를 처리하는 함수를 하나로 묶는 것 | 정보 은닉: 다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통해 접근을 허용하는 것 | 추상화: 불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에 중점을 두어 개략화하는 것 | 상속성: 이미 정의된 상위 클래스의 모든 속성과 연산을 하위 클래스가 물려받는 것 | 다형성: 메시지에 의해 객체가 연산을 수행하게 될 때 하나의 메시지에 대해 각 객체가 가지고 있는 고유한 방법으로 응답할 수 있는 능력 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/20/theory20.html",
            "relUrl": "/theory/2021/03/20/theory20.html",
            "date": " • Mar 20, 2021"
        }
        
    
  
    
        ,"post81": {
            "title": "패키지 다이어그램",
            "content": "1. 패키지 다이어그램 . 유스케이스나 클래스 등의 요소들을 그룹화한 패키지 간의 의존 관계를 표현한 것임 | 패키지는 또 다른 패키지의 요소가 될 수 있음 | 대규모 시스템에서 주요 요소 간의 종속성을 파악하는 데 사용함 | . 2. 패키지 다이어그램의 구성 요소 . 다음은 회원이 상품 주문 시 패키지들 간의 의존 관계를 표현한 패키지 다이어그램임 | . . 패키지 구성 설명 , , , 패키지가 존재함 | 패키지는 과 패키지를 포함하고 있음 | 패키지는 &#39;결제 인증&#39;과 &#39;환불&#39; 객체를 포함하고 있음 | . | 의존 관계 설명 과 패키지 간의 의존 관계 패키지는 주문자를 확인하기 위해 패키지를 이용함 | «import» 관계이므로 패키지에 포함된 객체들을 직접 가져와서 이용할 수 있는 관계임 | . | 패키지와 패키지의 &#39;결제 인증&#39; 객체와 의존 관계 패키지는 주문된 상품의 결제를 위해 패키지의 &#39;결제 인증&#39; 객체를 이용함 | «access» 관계이므로 인터페이스를 통해 접근하여 이용할 수 있는 관계임 | . | . | . 구성 요소 표현 방법 의미 . 패키지 | | - 객체들을 그룹화한 것- 단순 표기법: 패키지 안에 패키지 이름만 표현- 확장 표기법: 패키지 안에 요소까지 표현 | . 객체 | | 유스케이스, 클래스, 인터페이스, 테이블 등 패키지에 포함될 수 있는 다양한 요소들 | . 의존 관계 | | - 패키지와 패키지, 패키지와 객체 간을 점선 화살표로 연결하여 표현함- 스테레오타입을 이용해 의존 관계를 구체적으로 표현할 수 있음- 의존 관계의 표현 형태는 사용자가 임의로 작성할 수 있으며, 대표적으로 import와 access가 사용됨- «import»: 패키지에 포함된 객체들을 직접 가져와서 이용하는 관계- «access»: 인터페이스를 통해 패키지 내의 객체에 접근하여 이용하는 관계 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/19/theory19.html",
            "relUrl": "/theory/2021/03/19/theory19.html",
            "date": " • Mar 19, 2021"
        }
        
    
  
    
        ,"post82": {
            "title": "상태 다이어그램",
            "content": "1. 상태 다이어그램 . 객체들 사이에 발생하는 이벤트에 의한 객체들의 상태 변화를 그림으로 표현한 것 | 객체의 상태란 객체가 갖는 속성 값의 변화를 의미함 | 특정 객체가 어떤 이벤트에 의해 상태 변환 과정이 진행되는지 확인하는 데 사용됨 | 시스템에서 상태 변환 이벤트를 확인할 필요가 있는 객체만을 대상으로 그림 | . 2. 상태 다이어그램의 구성 요소 . 다음은 상품결제 객체의 상태 변화를 표현한 상태 다이어그램임 | . . 상태의 상태 변화 결제 과정이 시작되면 객체는 상태로 전환됨 | ‘결제정보 입력’ 이벤트에 의해 상태로 전환됨 | . | 상태의 상태 변화 ‘결제정보 입력’ 이벤트에 의해 상태로 전환됨 | ‘결제정보 일치’ 이벤트에 의해 상태로 전환됨 | ‘결제정보 불일치’ 이벤트에 의해 상태로 전환됨 | . | 상태의 상태 변화 ‘결제정보 불일치’ 이벤트에 의해 상태로 전환됨 | ‘결제 재시도’ 이벤트에 의해 상태로 전환됨 | . | 상태의 상태 변화 ‘결제정보 일치’ 이벤트에 의해 상태로 전환됨 | . | . 구성 요소 표현 방법 의미 . 상태 | | 객체의 상태를 표현한 것 | . 시작 상태 | | 상태의 시작을 표현한 것 | . 종료 상태 | | 상태의 종료를 표현한 것 | . 상태 전환 | | 상태 사이의 흐름, 변화를 화살표로 표현한 것 | . 이벤트 | | - 상태에 변화를 주는 현상- 이벤트에는 조건, 외부 신호, 시간의 흐름 등이 있음 | . 프레임 | | 상태 다이어그램의 범위를 표현한 것 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/18/theory18.html",
            "relUrl": "/theory/2021/03/18/theory18.html",
            "date": " • Mar 18, 2021"
        }
        
    
  
    
        ,"post83": {
            "title": "커뮤니케이션 다이어그램",
            "content": "1. 커뮤니케이션 다이어그램 . 시스템이나 객체들이 메시지를 주고받으며 상호작용하는 과정과 객체들 간의 연관을 그림으로 표현한 것임 | 동작에 참여하는 객체들 사이의 관계를 파악하는 데 사용됨 | 클래스 다이어그램에서 관계가 제대로 표현됐는지 점검하는 용도로도 사용됨 | 초기에는 협업 다이어그램이라고도 불렸음 | . 2. 커뮤니케이션 다이어그램의 구성 요소 . 다음은 회원의 상품 주문 과정을 표현한 커뮤니케이션 다이어그램임 | . . 상품 주문 과정에서 상호 작용하는 객체들 간의 관계 | 액터는 , , &lt;신발 : 신규주문&gt;, &lt;카드 : 결제화면&gt; 객체와 관계되어 있음 | 객체는 객체와 관계되어 있음 | 객체는 &lt;신발 : 신규주문&gt; 객체와 관계되어 있음 | &lt;신발 : 신규주문&gt; 객체는 시스템과 관계되어 있음 | &lt;카드 : 결제화면&gt; 객체는 시스템과 관계되어 있음 | . 구성 요소 표현 방법 의미 . 액터 | | 시스템으로부터 서비스를 요청하는 외부 요소로, 사람이나 외부 시스템을 의미함 | . 객체 | | 메시지를 주고받는 주체 | . 링크 | | - 객체들 간의 관계를 표현한 것- 액터와 객체, 객체와 객체 간에 실선을 그어 표현함 | . 메시지 | | - 객체가 상호 작용을 위해 주고받는 내용- 화살표의 방향은 메시지를 받는 쪽으로 향하게 표현함- 일정한 순서에 의해 처리되는 메시지의 경우 숫자로 순서를 표시함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/16/theory17.html",
            "relUrl": "/theory/2021/03/16/theory17.html",
            "date": " • Mar 16, 2021"
        }
        
    
  
    
        ,"post84": {
            "title": "시퀀스 다이어그램",
            "content": "1. 동적 모델링 . 시스템의 내부 구성 요소들의 상태 변화 과정과 과정에서 발생하는 상호 작용을 표현한 것임 | 시스템 내부 구성 요소들 간에 이루어지는 동작이라는 관점에서 표현함 | 시스템이 실행될 때 구성 요소들 간의 메시지 호출, 즉 오퍼레이션을 통한 상호 작용에 초점을 둠 | 동적 모델링의 종류 시퀀스 다이어그램 | 커뮤니케이션 다이어그램 | 상태 다이어그램 | . | . 2. 시퀀스 다이어그램 . 시스템이나 객체들이 메시지를 주고받으며 상호 작용하는 과정을 그림으로 표현한 것 | 시스템이나 객체들의 상호 작용 과정에서 주고받는 메시지를 표현함 | 각 동작에 참여하는 시스템이나 객체들의 수행 기간을 확인할 수 있음 | 클래스 내부에 있는 객체들을 기본 단위로 하여 그들의 상호 작용을 표현함 | . 3. 시퀀스 다이어그램의 구성 요소 . 다음은 회원의 상품 주문 과정에 재고 시스템과 결제 시스템이 관계되어 상호 작용하는 과정을 표현한 시퀀스 다이어그램임 . . | 액터 로그인 버튼을 클릭한다 | ID와 비밀번호를 입력한다 | 로그인이 완료되면 상품 선택 화면에서 주문할 상품을 선택한다 | 주문할 상품에 대한 재고 확인이 완료되면 결제 화면에서 결제 정보를 입력한다 | 결제가 완료되어 “결제 및 주문 완료” 메시지를 확인한 후 소멸됨 | . | 객체 으로부터 입력받은 ID와 비밀번호가 올바른지 객체에게 확인을 요청함 | “로그인 완료” 메시지를 받으면 에게 상품 선택 화면을 출력한 후 소멸됨 | . | 객체 입력받은 ID와 비밀번호를 확인함 | “로그인 완료” 메시지를 전송한 후 소멸됨 | . | 객체 이 주문할 상품을 선택하면 선택된 상품에 대한 &lt;신발 : 신규주문&gt; 객체를 생성한 후 소멸됨 | . | &lt;신발 : 신규주문&gt; 객체 “주문생성” 메시지를 받으면 새로운 객체로 생성됨 | 에게 주문한 상품에 대한 재고 확인을 요청함 | “재고 있음” 메시지를 받으면 에게 결제 화면을 출력한 후 소멸됨 | . | &lt;카드 : 결제화면&gt; 객체 이 결제 정보를 입력하면 에게 결제 정보 확인을 요청함 | “결제 승인” 메시지를 받으면 에게 &quot;결제 및 주문 완료&quot; 메시지를 전송한 후 소멸됨 | . | 액터 이 주문한 상품에 대한 재고를 확인함 | &lt;신발 : 신규주문&gt; 객체에게 “재고 있음” 메시지를 전송한 후 소멸됨 | . | 액터 이 입력한 결제 정보를 확인함 | &lt;카드 : 결제화면&gt;에게 “결제 승인” 메시지를 전송한 후 소멸됨 | . | . 구성 요소 표현 방법 의미 . 액터 | | 시스템으로부터 서비스를 요청하는 외부 요소로, 사람이나 외부 시스템을 의미함 | . 객체 | | 메시지를 주고받는 주체 | . 생명선 | | - 객체가 메모리에 존재하는 기간으로, 객체 아래쪽에 점선을 그어 표현함- 객체 소멸(X)이 표시된 기간까지 존재함 | . 실행 상자(활성 상자) | | 객체가 메시지를 주고받으며 구동되고 있음을 표현함 | . 메시지 | | 객체가 상호 작용을 위해 주고받는 메시지 | . 객체 소멸 | | 해당 객체가 더 이상 메모리에 존재하지 않음을 표현한 것 | . 프레임 | | 다이어그램의 전체 또는 일부를 묶어 표현한 것 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/16/theory16.html",
            "relUrl": "/theory/2021/03/16/theory16.html",
            "date": " • Mar 16, 2021"
        }
        
    
  
    
        ,"post85": {
            "title": "클래스 다이어그램",
            "content": "1. 정적 모델링 . 사용자가 요구한 기능을 구현하는데 필요한 자료들의 논리적인 구조를 표현한 것 | 시스템에 의해 처리되거나 생성될 객체들 사이에 어떤 관련이 있는지를 구조적인 관점에서 표현함 | 정적 모델링은 객체들을 클래스로 추상화하여 표현함 | UML을 이용한 정적 모델링의 대표적인 것이 클래스 다이어그램임 | . 2. 클래스 다이어그램 . 클래스와 클래스가 가지는 속성, 클래스 사이의 관계를 표현한 것 | 시스템을 구성하는 요소에 대해 이해할 수 있는 구조적 다이어그램임 | 시스템 구성 요소를 문서화하는 데 사용됨 | . 3. 클래스 다이어그램의 구성 요소 . 다음은 프로야구 리그에 필요한 정보의 일부를 표현한 클래스 다이어그램임 | . . 리그에는 10개의 팀이 참가한다 . . | 리그는 한 개 이상의 경기장에서 경기가 진행된다 . . | 매 경기는 두 팀이 진행하며, 두 팀은 한 번 이상의 경기를 진행한다 . . | 한 팀에는 한 명 이상의 선수가 있다 . . | 한 경기장에서는 한 경기 이상이 진행되며, 경기는 여러 경기장에서 진행된다 . . | 한 팀에서 최소 9명 이상의 선수가 한 경기에 출전하며, 경기에 출전하지 못하는 선수도 있고 여러 경기에 출전하는 선수도 있다 . . | 선수는 주전선수와 후보선수가 있다 . | 선수의 경력은 0보다 큰 값이 입력되어야 한다 . | 승점이 5 이상인 선수들은 연봉을 조정할 수 있으며, 연봉은 승점만큼 증가한다 . | . 구성 요소 표현 방법 내용 . 클래스 | | - 각가의 객체들이 갖는 속성과 오퍼레이션(동작)을 표현한 것- 일반적으로 3개의 구획으로 나눠 클래스의 이름, 속성, 오퍼레이션을 표기함- 속성(Attribute): 클래스의 상태나 정보를 표현함- 오퍼레이션(Operation): 클래스가 수행할 수 있는 동작으로, 함수라고도 함 | . 제약조건 | | - 속성에 입력될 값에 대한 제약조건이나 오퍼레이션 수행 전후에 지정해야 할 조건이 있다면 이를 적음- 클래스 안에 제약조건을 기술할 때는 중괄호 { } 를 이용함 | . 관계(Relationships) |   | - 관계는 클래스와 클래스 사이의 연관성을 표현함- 클래스 다이어그램에 표현하는 관계에는 연관 관계, 집합 관계, 포함 관계, 일반화 관계, 의존 관계가 있음 | . 4. 연관 클래스 . 연관 관계에 있는 두 클래스에 추가적으로 표현해야 할 속성이나 오퍼레이션이 있는 경우 생성하는 클래스임 | 두 클래스의 연관 관계를 나타내는 선의 가운데로부터 점선을 연관 클래스로 이어 표시함 | 연관 클래스의 이름은 연관 관계의 이름을 이용해 지정함 | . 팀이 경기에 참여하는 상황에서 참여횟수에 참여결과 속성을 어디에 두어야 할지를 생각해 보자. 먼저 ‘팀’ 클래스에 참여횟수와 참여결과 속성을 둔다면 팀이 어느 경기에 참여한 것인지 모호해짐. 또한 ‘경기’ 클래스에 참여횟수와 참여결과 속성을 둔다면 어느 팀이 참여한 것인지 모호해짐. 이런 경우 ‘팀’이나 ‘경기’ 클래스의 속성이 아닌 ‘참여하다’라는 연관 관계에 대한 연관 클래스를 만들어 ‘참여횟수’와 ‘참여결과’ 속성을 연관 클래스의 속성으로 다루면 됨 . ​ .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/14/theory15.html",
            "relUrl": "/theory/2021/03/14/theory15.html",
            "date": " • Mar 14, 2021"
        }
        
    
  
    
        ,"post86": {
            "title": "활동 다이어그램",
            "content": "1. 활동 다이어그램 . 사용자의 관점에서 시스템이 수행하는 기능을 처리 흐름에 따라 순서대로 표현한 것 | 하나의 유스케이스/유스케이스 사이에 발생하는 복잡한 처리의 흐름 명확하게 표현 | 자료 흐름도와 유사 | . 2. 활동 다이어그램의 구성 요소 . 다음은 회원의 상품 주문 과정에 결제 시스템과 재고 시스템이 관계되어 발생하는 처리의 흐름을 표현한 활동 다이어그램임 | . . 액터 회원이 상품을 주문하기 위해 로그인 단추를 클릭한 후 회원 정보를 입력함 | 입력된 정보가 잘못됐으면 회원 정보를 다시 입력받고, 그렇지 않으면 주문 상품 선택으로 이동함 | 회원이 주문할 상품을 선택하면 흐름이 ‘결제 인증’과 ‘상품 재고 확인’으로 분할되어 진행됨 | 상품 주문을 완료하고 액티비티를 종료함 | . | 시스템 주문한 상품에 대한 결제 인증을 진행함 | 인증에 성공하면 ‘주문 완료’로 이동하고, 인증에 실패하면 ‘인증 재시도’로 이동함 | 다시 진행한 결제 인증이 성공하면 ‘주문 완료’로 이동하고, 이번에도 인증이 실패하면 결제 인증에 대한 처리 흐름을 종료함 | . | 시스템 주문한 상품에 대한 재고를 확인함 | 재고가 있으면 액티비티의 흐름을 ‘주문 완료’로 이동하고, 재고가 없으면 회원이 다른 상품을 선택할 수 있도록 ‘주문 상품 선택’으로 이동함 | . | . 구성 요소 표현 방법 내용 . 액션/액티비티 | -액션 -액티비티 | - 액션: 더 이상 분해할 수 없는 단일 작업- 액티비티: 몇 개의 액션으로 분리될 수 있는 작업 | . 시작 노드 | | 액션이나 액티비가 시작됨을 표현한 것 | . 종료 노드 | | 액티비티 안의 모든 흐름이 종료됨을 표현한 것 | . 조건(판단) 노드 | | - 조건에 따라 제어의 흐름이 분리됨을 표현한 것- 들어오는 제어 흐름은 한 개이고 나가는 제어 흐름은 여러 개임 | . 병합 노드 | | - 여러 경로의 흐름이 하나로 합쳐짐을 표현한 것- 들어오는 제어 흐름은 여러 개이고 나가는 제어 흐름은 한 개임 | . 포크 노드 | | - 액티비티의 흐름이 분리되어 수행됨을 표현한 것- 들어오는 액티비티 흐름은 한 개이고 나가는 액티비티 흐름은 여러 개임 | . 조인 노드 | | - 분리되어 수행되던 액티비티의 흐름이 다시 합쳐짐을 표현한 것- 들어오는 액티비티 흐름은 여러 개이고 나가는 액티비티 흐름은 한 개임 | . 스윔레인 | | - 액티비티 수행을 담당하는 주체를 구분하는 선- 가로 또는 세로 실선을 그어 구분함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/14/theory14.html",
            "relUrl": "/theory/2021/03/14/theory14.html",
            "date": " • Mar 14, 2021"
        }
        
    
  
    
        ,"post87": {
            "title": "유스케이스 다이어그램",
            "content": "1. 기능 모델링 . 사용자의 요구사항을 분석하여 개발될 시스템이 갖춰야 할 기능을 정리한 후 사용자와 공유하기 위해 그림으로 표현하는 것 | 개발될 시스템의 전반적인 형태를 기능에 초점을 맞춰 표현 | 기능 모델링의 종류 유스 케이스 다이어그램 | 액티비티 다이어그램 | . | . 2. 유스케이스 다이어그램 . 개발될 시스템을 이용해 수행할 수 있는 기능을 사용자의 관점에서 표현한 것 | 외부 요소와 시스템 간의 상호 작용 확인 가능 | 사용자의 요구사항을 분석하기 위한 도구로 사용됨 | 시스템의 범위 파악 가능 | . 3. 유스케이스 다이어그램의 구성 요소 . . 고객은 회원과 비회원으로 구분된다 | 회원은 상품조회, 상품주문, 배송조회, 리뷰작성 기능을 사용할 수 있다. | 비회원은 상품조회 기능만 사용할 수 있다. | 고객은 이름이나 브랜드로 상품을 조회할 수 있다. | 회원이 상품주문, 배송조회, 리뷰작성 기능을 사용하려면 반드시 로그인을 수행해야 한다. | 회원이 리뷰작성을 할 때 필요한 경우 사진 업로드 기능을 사용할 수 있다. | 회원이 상품주문을 완료하려면 재고 시스템을 통해 재고 여부를 확인해야 한다. | 회원이 상품주문을 완료하려면 결제 시스템을 통해 승인을 얻어야 한다. | 회원은 배송업체를 통해 배송조회를 할 수 있다. | . 구성 요소 표현 방법 내용 . 시스템/시스템 범위 | 사각형 | 시스템 내부의 유스케이스들을 사각형으로 묶어 시스템의 범위를 표현 | . 액터 | -주액터 -부액터 | -시스템과 상호 작용하는 모든 외부 요소-주로 사람이나 외부 시스템을 의미-주액터: 시스템을 사용함으로써 이득을 얻는 대상(주로 사람)-부액터: 주액터의 목적 달성을 위해 시스템에 서비스를 제공하는 외부 시스템(조직, 기관) | . 유스케이스 | 타원 | 사용자가 보는 관점에서 시스템이 액터에게 제공하는 서비스나 기능을 표현한 것 | . 관계 | -포함-확장-일반화 | -액터와 유스케이스, 유스케이스와 유스케이스 사이에서 나타날 수 있음-포함(Include) 관계, 확장(Extends) 관계, 일반화(Generalization) 관계 | . 포함관계 . 두 개 이상의 유스케이스에 공통적으로 적용되는 기능을 별도로 분리하여 새로운 유스케이스로 만든 경우 | 새롭게 만든 포함되는 유스케이스 쪽으로 점선 화살표를 연결한 후 화살표 위에 «include»라고 표기 | . 확장관계 . 유스케이스가 특정 조건에 부합되어 기능이 확장될 때 | 확장될 유스케이스에서 원래의 유스케이스 쪽으로 점선 화살표를 연결한 후 화살표 위에 «extends»라고 표기 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/13/theory13.html",
            "relUrl": "/theory/2021/03/13/theory13.html",
            "date": " • Mar 13, 2021"
        }
        
    
  
    
        ,"post88": {
            "title": "UML-다이어그램",
            "content": "1. 다이어그램(Diagram) . 사물과 관계를 도형으로 표현한 것 | 여러 관점에서 시스템을 가시화한 뷰 제공 -&gt; 의사소통에 도움 | 정적 모델링 - 구조적 다이어그램 | 동적 모델링 - 행위 다이어그램 | . 2. 구조적(Structural) 다이어그램(클객컴배복패) . 종류 내용 . 클래스 다이어그램(Class Diagram) | 클래스와 클래스가 가지는 속성, 클래스 사이의 관계 표현 | . 객체 다이어그램(Object Diagram) | -클래스에 속한 사물(객체)들, 즉 인스턴스를 특정 시점의 객체와 객체 사이 관계로 표현-럼바우(Rumbaugh) 객체지향 분석 기법에서 객체 모델링에 활용됨 | . 컴포넌트 다이어그램(Component Diagram) | -실제 구현 모듈인 컴포넌트 간의 관계나 컴포넌트 간의 인터페이스 표현-구현 단계에서 사용 | . 배치 다이어그램(Deployment Diagram) | -결과물, 프로세스, 컴포넌트 등 물리적 요소들의 위치를 표현-구현 단계에서 사용 | . 복합체 구조 다이어그램(Composite Structure Diagram) | 클래스나 컴포넌트가 복합 구조를 갖는 경우 그 내부 구조를 표현 | . 패키지 다이어그램(Package Diagram) | 유스케이스나 클래스 등의 모델 요소들을 그룹화한 패키지들의 관계 표현 | . 3. 행위(Behavioral) 다이어그램의 종류 -동적(유시커상활상타) . 종류 내용 . 유스케이스 다이어그램(Use Case Diagram) | -사용자의 요구를 분석하는 것으로, 기능 모델링 작업에 사용-사용자(Actor)와 사용 사례(Use Case)로 구성 | . 시퀀스 다이어그램(Sequence Diagram) | 상호 작용하는 시스템이나 객체들이 주고받는 메시지를 표현 | . 커뮤니케이션 다이어그램(Communication Diagram) | 동작에 참여하는 객체들이 주고받는 메시지와 객체들 간의 연관 관계를 표현 | . 상태 다이어그램(State Diagram) | -하나의 객체가 자신이 속한 클래스의 상태 변화 혹은 다른 객체와의 상호 작용에 따라 상태가 어떻게 변화하는지 표현-럼바우 객체지향 분석 기법에서 동적 모델링에 활용됨 | . 활동 다이어그램(Activity Diagram) | 시스템이 어떤 기능을 수행하는지 객체의 처리 로직이나 조건에 따른 처리의 흐름을 순서에 따라 표현 | . 상호작용 개요 다이어그램(Interaction Overview Diagram) | 상호작용 다이어그램 간의 제어 흐름을 표현 | . 타이밍 다이어그램(Timing Diagram) | 객체 상태 변화와 시간 제약을 명시적으로 표현 | . 4. 스테레오 타입(Stereotype) . UML에서 표현하는 기본 기능 외에 추가적인 기능을 표현하는 것 . | 길러멧이라고 부르는 겹화살표(&lt;&lt;&gt;&gt;) 사이에 표현할 형태 기술 . | 표현 형태 의미 . «include» | 연결된 다른 UML 요소에 대해 포함 관계에 있는 경우 | . «extend» | 연결된 다른 UML 요소에 대해 확장 관계에 있는 경우 | . «interface» | 인터페이스를 정의하는 경우 | . «exception» | 예외를 정의하는 경우 | . «constructor» | 생성자 역할을 수행하는 경우 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/12/theory12.html",
            "relUrl": "/theory/2021/03/12/theory12.html",
            "date": " • Mar 12, 2021"
        }
        
    
  
    
        ,"post89": {
            "title": "UML-관계(Relationship)",
            "content": "1. 관계(Relationship) . 사물과 사물 사이의 연관성을 표현하는 것 | 관계의 종류 연관 관계 | 집합 관계 | 포함 관계 | 일반화 관계 | 의존 관계 | 실체화 관계 | . | . 2. 연관(Association) 관계 . 2개 이상의 사물이 서로 관련되어 있는 관계 | 실선으로 연결하여 표현 | 화살표로 방향성 표현 | 양방향 관계의 경우 화살표 생략하고 실선으로만 연결 | 다중도를 선 위에 표기 | . 다중도 의미 . 1 | 1개의 객체가 연관되어 있음 | . n | n개의 객체가 연관되어 있음 | . 0..1 | 연관된 객체가 없거나 1개만 존재함 | . 0..* 또는 * | 연관된 객체가 없거나 다수일 수 있음 | . 1..* | 연관된 객체가 적어도 1개 이상 | . n..* | 연관된 객체가 적어도 n개 이상 | . n..m | 연관된 객체가 최소 n개에서 최대 m개임 | . 예제 1) 사람이 집을 소유하는 관계이다. 사람은 자기가 소유하고 있는 집에 대해 알고 있지만 집은 누구에 의해 자신이 소유되고 있는지 모른다는 의미 . 사람1———-&gt;1집 | ‘사람’ 쪽 다중도가 1이므로 집은 한 사람에 의해서만 소유될 수 있음 | ‘집’ 쪽 다중도가 1이므로 사람은 집을 하나만 소유할 수 있음 | . 예제 2) 선생님은 학생을 가르치고 학생은 선생님으로부터 가르침을 받는 것과 같이 선생님과 학생은 서로 관계가 있다. . 선생님1..———1.. 학생 | 선생님 쪽 다중도가 1..*이므로 학생은 한 명 이상의 선생님으로부터 가르침을 받는다. | 학생 쪽 다중도가 1..*이므로 선생님은 한 명 이상의 학생을 가르친다. | . 3. 집합(Aggregation) 관계 . 하나의 사물이 다른 사물에 포함 되어 있는 단계 . | 포함하는 쪽(전체, whole)과 포함되는 쪽(부분, part)이 서로 독립적임 . | 포함되는 쪽(부분)에서 포함하는 쪽(전체)로 속이 빈 마름모를 연결하여 표현 . . | . 4. 포함(Composition) 관계 . 집합 관계의 특수 형태로, 포함하는 사물의 변화가 포함되는 사물에게 영향을 미치는 관계 . | 포함하는 쪽과 포함되는 쪽은 서로 독립될 수 없고 생명주기 함께함 . | 포함되는 쪽(부분)에서 포함하는 쪽(전체)로 속이 채워진 마름모를 연결하여 표현 . ex. 문◆——-키 : 문을 열 수 있는 키는 하나이며, 해당 키로 다른 문은 열 수 없고 문이 없어지면 키도 필요 없다. . | . 5. 일반화(Generalization) 관계 . 하나의 사물이 다른 사물에 비해 더 일반적이거나 구체적인 관계 . | 일반적인 개념을 상위(부모), 구체적인 개념을 하위(자식)라고 부름 . | 구체적(하위)인 사물에서 일반적(상위)인 사물 쪽으로 속이 빈 화살표를 연결하여 표현 . ex. 아메리카노와 에스프레소는 커피이다. . | . 6. 의존(Dependency) 관계 . 연관 관계와 같이 사물 사이에 서로 연관은 있으나 필요에 의해 서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계 . | 소유 관계는 아니지만 사물의 변화가 다른 사물에도 영향을 미치는 관계 . | 영향을 주는 사물(이용자)이 영향을 받는 사물(제공자) 쪽으로 점선 화살표를 연결하여 표현 . ex. 등급——&gt;할인율 : 등급이 높으면 할인율을 적용하고, 등급이 낮으면 할인율을 적용하지 않는다. . | . 7. 실체화(Realization) 관계 . 실체화 관계는 사물이 할 수 있거나 해야 하는 기능으로, 서로를 그룹화할 수 있는 관계 . | 사물에서 기능 쪽으로 속이 빈 점선 화살표를 연결하여 표현 . ex. 날 수 있다 ◀️—-비행기 : 비행기는 날 수 있고 새도 날 수 있으므로 날 수 있다는 행위로 그룹화 가능 . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/11/theory11.html",
            "relUrl": "/theory/2021/03/11/theory11.html",
            "date": " • Mar 11, 2021"
        }
        
    
  
    
        ,"post90": {
            "title": "UML(Unified Modeling Language)의 개요",
            "content": "1. UML(Unified Modeling Language) : 공통된 표현법 . 시스템 분석, 설계, 구현 등 시스템 개발 과정에서 시스템 개발자와 고객 또는 개발자 상호 간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어 | Rumbaugh(OMT), Booch, Jacobason 등의 객체지향 방법론의 장점 통합 | OMG(Object Management Group)에서 표준으로 지정하였음 | UML의 구성 요소 사관다 사물(Things) | 관계(Relationships) | 다이어그램(Diagram) | . | . 2. 사물(객체) . 다이어그램 안에서 관계가 형성될 수 있는 대상 | 모델을 구성하는 가장 중요한 기본 요소 | 사물의 종류 구조 사물(Structural Things) 시스템의 개념적, 물리적 요소 표현 | 클래스, 유스케이스, 컴포넌트, 노드 등 | . | 행동 사물(Behavioral Things) 시간과 공간에 따른 요소들의 행위를 표현 | 상호작용, 상태 머신 등 | . | 그룹 사물(Grouping Things) 요소들을 그룹으로 묶어서 표현 | 패키지 | . | 주해 사물(Annotation Things) 부가적인 `설명이나 제약조건 등을 표현 | 노트 | . | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/10/theory10.html",
            "relUrl": "/theory/2021/03/10/theory10.html",
            "date": " • Mar 10, 2021"
        }
        
    
  
    
        ,"post91": {
            "title": "요구사항 분석 CASE와 HIPO",
            "content": "1. 요구사항 분석용 CASE(자동화 도구) . 요구사항을 자동으로 분석하고, 요구사항 분석 명세서 기술하도록 개발된 도구 . sadt -시스템 정의, 요구사항 분석, 시스템/소프트웨어 설계를 위한 도구-SoftTecth 사에서 개발-구조적 요구 분석을 하기 위해 블록 다이어그램을 채택한 자동화 도구 . SREM =RSL/REVS | -TRW 사가 실시간 처리 소프트웨어 시스템에서 요구사항을 명확히 기술하도록 할 목적으로 개발한 도구-RSL과 REVS를 사용하는 자동화 도구 | . PSL/PSA | -PSL과 PSA를 사용하는 자동화 도구-미시간 대학에서 개발 | . TAGS | -시스템 공학 방법 응용에 대한 자동 접근 방법-개발 주기의 전 과정에 이용할 수 있는 통합 자동화 도구 | . | . 2. HIPO(Hierarchy Input Process Output) . 시스템의 분석 및 설계 또는 문서화에 사용되는 기법으로, 시스템 실행 과정인 입력.처리.출력의 기능을 표현한 것 . | 하향식 소프트웨어 개발을 위한 문서화 도구 . | 기능과 자료의 의존 관계 동시에 표현 가능 . | 기호, 도표를 이용하여 보기 쉽고 이해하기 쉬움 . | HIPO Chart: 시스템의 기능을 여러 개의 고유 모듈로 분할하여 이들 간의 인터페이스를 계층 구조로 표현한 것 . 가시적 도표(Visual Table of Contents, 도식 목차) | 총체적 도표(Overview Diagram, 총괄 도표, 개요 도표) | 세부적 도표(Detail Diagram, 상세 도표) | . ​ . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/09/theory9.html",
            "relUrl": "/theory/2021/03/09/theory9.html",
            "date": " • Mar 9, 2021"
        }
        
    
  
    
        ,"post92": {
            "title": "요구사항 분석",
            "content": "1. 요구사항 분석 . 소프트웨어 개발의 실제적인 첫 단계 | 개발 대상에 대한 사용자의 요구사항을 이해하고 문서화하는 활동 | 사용자 요구의 타당성을 조사, 비용.일정에 대한 제약 설정 | 사용자 요구를 정확하게 추출하여 목표 정함 | . 2. 구조적 분석 기법 . 자료의 흐름과 처리를 중심으로 하는 요구사항 분석 방법 | 도형 중심의 분석용 도구와 분석 절차를 이용하여 사용자의 요구사항 파악, 문서화 | 하향식 방법(전체-&gt;상세)을 사용하여 시스템을 세분화 | 분석의 중복 배제 | 주요 구조적 분석 기법 도구 자료 흐름도(DFD) | 자료 사전(DD) | 소단위 명세서(Mini-Spec.) | 개체 관계도(ERD) | 상태 전이도(STD) | 제어 명세서 | . | . 3. 자료 흐름도(DFD) . 자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술 | 자료 흐름 그래프, 버블 차트라고도 함 | 자료 흐름과 처리를 중심으로 하는 구조적 분석 기법에 이용됨 | . 4. 자료 흐름도 기본 기호 . 기호 의미 . 프로세스(Process) | 자료를 변환시키는 시스템의 한 부분(처리 과정)을 나타내며 처리, 기능, 변환, 버블이라고도 함 | . 자료 흐름(Data Flow) | 자료의 이동(흐름)이나 연관관계를 나타냄 | . 자료 저장소(Data Store) | 시스템에서의 자료 저장소(파일, 데이터베이스)를 나타냄 | . 단말(Terminator) | 시스템과 교신하는 외부 개체로, 입력 데이터가 만들어지고 출력 데이터를 받음 | . . 5. 자료 사전(DD) . 자료 흐름도에 있는 자료를 더 자세히 정의하고 기록한 것 . | 메타데이터: 데이터를 설명하는 데이터. 데이터의 데이터 . | 기호 의미 . = | 정의: ~로 구성되어 있다 | . + | 연결: 그리고 | . () | 생략: 생략 가능한 자료 | . [] | 선택: 또는 | . {} | 반복: 아래에 최소, 위에 최대 횟수 표시 | . * * | 설명: 주석 | .   |   | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/08/theory8.html",
            "relUrl": "/theory/2021/03/08/theory8.html",
            "date": " • Mar 8, 2021"
        }
        
    
  
    
        ,"post93": {
            "title": "요구사항 개발 프로세스",
            "content": "1. 요구사항 개발 프로세스 . 개발 대상에 대한 요구사항을 체계적으로 도출.분석한 후 명세서에 정리한 다음 확인 및 검증 하는 일련의 구조화된 활동 | 타당성 조사(Feasibility Study)가 선행되어야 함 | 요구사항 개발은 요구공학의 한 요소 | . 도출(Elicitation) -&gt; 분석(Analysis) -&gt; 명세(Specification) -&gt; 확인(Validation) . 2. 요구사항 도출(수집) . 시스템 개발에 관련된 사람들이 서로 의견을 교환하여 요구사항을 어떻게 수집할 것인지를 식별하고 이해하는 과정 | 개발자와 고객 사이의 관계가 만들어지고 이해관계자가 식별됨 | 소프트웨어 개발 생명 주기(SDLC) 동안 지속적으로 반복됨 | 주요 도출 기법 청취와 인터뷰 | 설문 | 브레인스토밍 | 워크샵 | 프로토타이핑 | 유스케이스 | . | . 3. 요구사항 분석 . 사용자의 요구사항 중 명확하지 않거나 모호하여 이해되지 않는 부분을 발견하고 이를 걸러내기 위한 과정 | 타당성을 조사하고 비용과 일정에 대한 제약 설정 | 상충되는 요구사항 중재 | 사용되는 도구 자료 흐름도(DFD) | 자료 사전(DD) | . | . 4. 요구사항 명세 . 분석된 요구사항을 바탕으로 모델을 작성하고 문서화하는 것 | 기능 요구사항 빠짐없이 기술 | 비기능 요구사항 필요한 것만 기술 | 소단위 명세가 사용될 수 있음 | . 5. 요구사항 확인(검증) . 개발 자원을 요구사항에 할당하기 전에 요구사항 명세서가 정확하고 완전하게 작성되었는지 검토하는 활동 | 이해관계자들이 검토해야 함 | 요구사항 관리 도구를 이용하여 요구사항 정의 문서들에 대해 형상 관리(SCM) 수행 | . 6. 요구공학 . 무엇을 개발해야 하는지 요구사항을 정의하고, 분석 및 관리하는 프로세스를 연구하는 학문 | 요구사항 변경의 원인과 처리 방법을 이해, 품질 개선하여 프로젝트 실패 최소화 | . 7. 요구사항 명세 기법 . 구분 정형 명세 기법 비정형 명세 기법 . 기법 | 수학적 원리, 모델 기반 | 상태/기능/객체 중심 | . 작성 방법 | 수학적 기호, 정형화된 표기법 | 일반 명사, 동사 등의 자연어 기반 서술/다이어그램 | . 특징 | -요구사항을 정확하고 간결하게 표현 가능-요구사항에 대한 결과 일관적이므로 완전성 검증 가능-표기법이 어려워 사용자가 이해하기 어려움 | -자연어의 사용으로 인해 일관성 떨어지고 해석 달라질 수 있음-내용의 이해가 쉬워 의사소통 용이 | . 종류 | VDM, Z, Petri-net, CSP | FSM, Decision Table, ER모델링, State Chart(SADT) | . 타당성 조사 . 개발 프로세스가 비즈니스 목적에 부합되는지, 예산은 적정한지 등에 대한 정보를 수집, 평가한 보고서를 토대로 수행 . 형상 관리(SCM) . 소프트웨어 개발 단계의 각 과정에서 만들어지는 프로그램, 설명 문서, 데이터 등을 통칭하여 형상이라고 함 . 형상 관리: 형상들의 변경 사항을 관리하는 일련의 활동 .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/07/theory7.html",
            "relUrl": "/theory/2021/03/07/theory7.html",
            "date": " • Mar 7, 2021"
        }
        
    
  
    
        ,"post94": {
            "title": "요구사항 정의",
            "content": "1. 요구사항 . 요구사항은 소프트웨어가 어떤 문제를 해결하기 위해 제공하는 서비스에 대한 설명 과 정상적으로 운영되는데 필요한 제약조건 | 소프트웨어 개발이나 유지 보수 과정에서 필요한 기준과 근거를 제공 | 개발에 참여하는 이해관계자들 간의 의사소통을 원활하게 하는 데 도움 | 유형 기능 요구사항(Functional requirements) | 비기능 요구사항(Non-functional requirements) | 사용자 요구사항(User requirements) | 시스템 요구사항(System requirements) | . | . 2. 기능 요구사항 . 시스템이 무엇을 하는지, 어떤 기능을 하는지 등의 기능이나 수행과 관련된 요구사항 | 시스템의 입력이나 출력으로 무엇이 포함되어야 하는지에 대한 사항 | 시스템이 어떤 데이터를 저장하거나 연산을 수행해야 하는지에 대한 사항 | 시스템이 반드시 수행해야 하는 기능 | 사용자가 시스템을 통해 제공받기 원하는 기능 | . 3. 비기능 요구사항 . 품질이나 제약사항과 관련된 요구사항 | 시스템 장비 구성 요구사항 | 성능 요구사항 | 인터페이스 요구사항 | 데이터 구축에 필요한 요구사항 | 테스트 요구사항 | 보안 요구사항 | 품질 요구사항: 가용성, 정합성, 상호 호환성, 대응성, 이식성, 확장성, 보안성 등 | 제약사항 | 프로젝트 관리 요구사항 | 프로젝트 자원 요구사항 | . 4. 사용자 요구사항 . 사용자 관점에서 본 시스템이 제공해야 할 요구사항 | 사용자를 위한 것으로, 친숙한 표현으로 이해하기 쉽게 작성 | . 5. 시스템 요구사항 . 개발자 관점에서 본 시스템 전체가 사용자와 다른 시스템에 제공해야 할 요구사항 | 전문적이고 기술적인 용어로 표현 | 소프트웨어 요구사항이라고도 함 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/06/theory6.html",
            "relUrl": "/theory/2021/03/06/theory6.html",
            "date": " • Mar 6, 2021"
        }
        
    
  
    
        ,"post95": {
            "title": "개발 기술 환경 파악의 개요",
            "content": "1. 개발 기술 환경 파악의 개요 . 개발하고자 하는 소프트웨어와 관련된 운영체제(OS), 데이터베이스 관리 시스템(DBMS), 미들웨어 등을 선정할 때 고려해야 할 사항을 기술하고 오픈소스를 사용할 때 주의해야 할 내용 제시 . 2. 운영체제(OS) . 운영체제는 컴퓨터 시스템의 자원을 효율적으로 관리하며 사용자가 컴퓨터를 편리하고 효율적으로 사용할 수 있도록 환경을 제공하는 소프트웨어 | 컴퓨터 사용자와 컴퓨터 하드웨어 간의 인터페이스로서 동작하는 시스템 소프트웨어의 일종 | 다른 응용 프로그램이 유용한 작업을 할 수 있도록 환경 제공 | 운영체제 관련 요구사항 식별 시 고려사항 가용성 | 성능 | 기술 지원 | 구축 비용 | 주변 기기 | . | . 3. 데이터베이스 관리 시스템(DBMS) . 데이터베이스 관리 시스템은 사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성하고 데이터베이스를 관리해주는 소프트웨어 | 기존의 파일 시스템이 갖는 데이터의 종속성과 중복성의 문제를 해결하기 위해 제안된 시스템 | 모든 응용 프로그램들이 데이터베이스를 공용할 수 있도록 관리 | DBMS 관련 요구사항 식별 시 고려사항 가용성 | 성능 | 기술 지원 | 구축 비용 | 상호 호환성 | . | . 4. 웹 애플리케이션 서버(WAS) . 사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어 | 데이터 접근, 세션 관리, 트랜잭션 관리 등을 위한 라이브러리 제공 | 주로 데이터베이스 서버와 연동해서 사용 | WAS 관련 요구사항 식별 시 고려사항 가용성 | 성능 | 기술 지원 | 구축 비용 | . | . 5. 오픈 소스(Open Source) . 오픈 소스는 누구나 별다른 제한 없이 사용할 수 있도록 소스 코드를 공개한 소프트웨어 | 오픈 소스 라이선스 만족 | 오픈 소스 관련 요구사항 식별 시 고려사항 라이선스의 종류 | 사용자 수 | 기술의 지속 가능성 | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/05/theory5.html",
            "relUrl": "/theory/2021/03/05/theory5.html",
            "date": " • Mar 5, 2021"
        }
        
    
  
    
        ,"post96": {
            "title": "현행 시스템 파악",
            "content": "1. 현행 시스템 파악 절차 . 프로세스 현행 시스템 내용 . 1단계 | 시스템 구성 파악 | 조직의 주요 업무를 담당하는 기간 업무와 이를 지원하는 지원 업무로 구분하여 기술 | .   | 시스템 기능 파악 | 현재 제공하는 기능들을 주요 기능과 하부 기능, 세부 기능으로 구분하여 계층형으로 표시 | .   | 시스템 인터페이스 파악 | 단위 업무 시스템 간에 주고받는 데이터의 종류, 형식, 프로토콜, 연계 유형, 주기 등을 명시 | . 2단계 | 아키텍처 구성 파악 | 최상위 수준에서 계층별로 표현한 아키텍처 구성도 작성 | .   | 소프트웨어 구성 파악 | 소프트웨어들의 제품명, 용도, 라이선스 적용 방식, 라이선스 수 등을 명시 | . 3단계 | 하드웨어 구성 파악 | 단위 업무 시스템들이 운용되는 서버의 주요 사양과 수량, 서버의 이중화 적용 여부 명시 | .   | 네트워크 구성 파악 | 서버의 위치, 서버 간의 네트워크 연결 방식을 네트워크 구성도로 작성 | . *서버의 주요 사양 . 서버의 CPU 처리 속도, 메모리 크기, 하드디스크의 용량 등을 파악해서 명시 . *서버의 이중화 . 운용 서버에 장애가 발생했을 때 대기 서버에서 서비스를 계속 유지할 수 있도록 대기 서버에도 동일하게 복제되도록 관리하는 것 .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/04/theory4.html",
            "relUrl": "/theory/2021/03/04/theory4.html",
            "date": " • Mar 4, 2021"
        }
        
    
  
    
        ,"post97": {
            "title": "XP 기법",
            "content": "1. XP(eXtreme Programming) . 수시로 발생하는 고객의 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성 향상 | 짧고 반복적 개발 주기, 단순한 설계, 고객의 적극적 참여를 통해 소프트웨어 빠르게 개발하는 것 목표 | 릴리즈 기간 짧게 반복 -&gt; 고객의 요구사항 반영에 대한 가시성 높임 | XP의 5가지 핵심 가치(용단의 피존) 용기 | 단순성 | 의사소통 | 피드백 | 존중 | . | . 2. XP 개발 프로세스 . 프로세스 내용 . 릴리즈 계획 수립 | -부분/전체 개발 완료 시점에 대한 일정 수립-부분적으로 기능이 완료된 제품 제공하는 것: 릴리즈 | . 이터레이션(주기) | 개발 작업 진행 과정 (1~3주) | . 승인 검사(인수 테스트) | 한 이터레이션 내 부분 완료 제품 구현되면 수행하는 테스트 | . 소규모 릴리즈 | 릴리즈의 규모를 축소한 것(요구사항에 유연하게 대응) | . 3. XP의 주요 실천 방법 . 실천 방법 내용 . 짝 프로그래밍(Pair Programming) | 다른 사람과 함께 프로그래밍 수행하여 개발 책임 나눠 갖는 환경 조성 | . 공동 코드 소유(Collective Ownership) | 개발 코드에 대한 권한과 책임 공동 소유 | . 테스트 주도 개발(Test-Driven Development) | -실제 코드 작성 전 테스트케이스 먼저 작성하여 무엇을 해야할지 정확히 파악-테스트가 지속적으로 진행될 수 있도록 자동화된 테스팅 도구(구조, 프레임워크) 사용 | . 전체 팀(Whole Team) | 개발에 참여하는 모든 구성원(고객 포함)들은 각자 자신의 역할이 있고 책임 가져야 함 | . 계속적인 통합(Continuous Integration) | 모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리될 때마다 지속적으로 통합됨 | . **리팩토링(Refactoring)** | -프로그램 기능의 변경 없이 시스템을 재구성-목적: 프로그램을 쉽게 이해하고 수정하여 빠르게 개발 | . 소규모 릴리즈(Small Release) | 릴리즈 기간을 짧게 반복하여 요구 변화에 신속히 대응 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/03/theory3.html",
            "relUrl": "/theory/2021/03/03/theory3.html",
            "date": " • Mar 3, 2021"
        }
        
    
  
    
        ,"post98": {
            "title": "스크럼 기법",
            "content": "1. 스크럼(Scrum) . 팀이 중심이 되어 개발의 효율성을 높이는 기법 | 팀원 스스로가 스크럼 팀을 구성하고 개발 작업 스스로 해결 | . 2. 스크럼 팀 . 구성원 역할 . 제품 책임자(PO) | -요구사항이 담긴 백로그를 작성하는 주체-이해관계자들 중 개발될 제품에 대한 이해도가 높고 요구사항을 책임지고 이해를 결정할 사람 | . 스크럼 마스터(SM) | 스크럼 팀의 가이드 역할 | . 개발팀(DT) | 위 구성원 제외 모든 팀원. 개발 수행 | . 백로그: 제품 개발에 필요한 모든 요구사항의 우선순위를 부여한 목록 . 3. 스크럼 개발 프로세스 . Product Backlog -&gt; Sprint Backlog(스프린트 계획 회의) -&gt; 스프린트 수행(매일 일일 스크럼 회의) -&gt; 스프린트 검토 회의, 스프린트 회고 . 프로세스 내용 . 스프린트 계획 회의 | 제품 백로그 중 이번 스프린트에서 수행할 작업 대상으로 단기 일정 수립 | . 스프린트 | 개발 작업 진행. 2~4주 기간 | . 일일 스크럼 회의 | - 모든 팀원이 매일 약 15분 동안 진행 상황 점검- 남은 작업 시간 소멸 차트에 표시 | . 스프린트 검토 회의 | 부분/전체 완성 제품이 요구사항에 잘 부합하는지 테스팅 | . 스프린트 회고 | 정해놓은 규칙 준수 여부 및 개선 사항 확인, 기록 | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/02/theory2.html",
            "relUrl": "/theory/2021/03/02/theory2.html",
            "date": " • Mar 2, 2021"
        }
        
    
  
    
        ,"post99": {
            "title": "소프트웨어 생명 주기",
            "content": "1. 소프트웨어 생명 주기 . 소프트웨어를 개발하기 위한 설계, 운용, 유지보수 등의 과정을 각 단계별로 나눈 것 | sw 개발 단계 + 각 단계별 주요 활동 + 활동 결과 산출물 폭포수 모형 | 프로토타입 모형 | 나선형 모형 | 애자일 모형 | . | . 2. 폭포수 모형 . 각 단계를 확실히 매듭짓고 철저하게 검토 후 다음 단계로 진행 | 이전 단계로 돌아갈 수 없음 | 가장 오래되고 폭넓게 사용된 전통적인 모형 | 적용한 경험과 성공 사례 많음 | 각 단계 종료 시 명확한 결과물 산출 필요 | . 3. 프로토타입 모형 . 실제 개발될 소프트웨어에 대한 견본품(프로토타입)을 만들어 최종 결과물 예측하는 모형 | 사용자와 시스템 사이의 인터페이스에 중점을 두어 개발 | . 4. 나선형 모형 . 여러 번의 소프트웨어 개발 과정 반복하여 점진적으로 최종 완성하는 모형 | 보헴(Bohem)이 제안 | 폭포수, 프로토타입의 장점 + 위험 분석 기능 추가 | 누락되거나 추가된 요구사항 추가 가능 | 유지보수 과정 불필요 | . 계획 수립 -&gt; 위험 분석 -&gt; 개발 및 검증 -&gt; 고객 평가 -&gt; 계획 수립 .. . 5. 애자일 모형 . 고객의 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하며 개발하는 모형 | 고객과의 소통에 초점을 맞춘 방법론 통칭 | 폭포수 모형과 대조적 | 대표적 개발 모형 스크럼(Scrum) | XP(eXtreme Programming) | 칸반(Kanban) | Lean | 기능 중심 개발(FDD: Feature Driven Development) | . | 4가지 핵심 가치 개인과 상호작용 &gt; 프로세스, 도구 | 실행되는 SW &gt; 방대한 문서 | 고객과 협업 &gt; 계약 협상 | 변화에 반응 &gt; 계획 | . | . 6. 소프트웨어 공학 . 소프트웨어 위기를 극복하기 위한 방안으로 연구된 학문 . 여러 방법론과 도구, 관리 기법을 통한 SW의 품질과 생산성 향상 목적 | 기본 원칙 현대적인 프로그래밍 기술을 계속적으로 적용해야 한다. | 개발된 sw의 품질이 유지되도록 지속적으로 검증해야 한다. | sw 개발 관련 사항 및 결과에 대한 명확한 기록을 유지해야 한다. | . | .",
            "url": "https://eunkyung99.github.io/gang/theory/2021/03/01/theory1.html",
            "relUrl": "/theory/2021/03/01/theory1.html",
            "date": " • Mar 1, 2021"
        }
        
    
  
    
        ,"post100": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://eunkyung99.github.io/gang/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "김은경 . 한국외국어대학교 컴퓨터.전자시스템공학부 18학번 데이터와 웹 개발, 교육에 관심이 많은 개발자입니다. . 📧 kek9520@naver.com . 🔗 깃허브 페이지 . ✍🏻 블로그 페이지 . . 🔎한 눈에 보기 . *자세히 보기: 원본 페이지 . *하이퍼링크 항목을 클릭하면 상세 설명 페이지로 이동합니다. . . 👩🏻‍🎓 현재 . 한국외국어대학교 글로벌캠퍼스 컴퓨터.전자시스템공학부 4학년 | 데이터, 웹 개발에 관심이 많은 개발자 | 전공심화+스페인어통.번역학과 부전공 | 총 학점: 4.2 / 4.5 (130학점 이수) | 전공 학점: 4.25 / 4.5 (74학점 이수) | . 👩🏻‍💼 프로젝트 . 2020.07-2020.08 제이엠스마트 현장 실습(2개월) | 웹 개발 업무 수행 php, HTML, javascript 사용 | . | 2020.11~2021.08 학부연구생 연구 진행(10개월) . 압축 적용 Erasure coding 성능 실험 . | RISC-V VP 기반 CNN 딥러닝 가속기 시스템에서 Object Detection 일부 구현 . | . | 2021.01-2021.02 SJSU SVSTIP 해외교육 카페 추천 앱 개발 프로젝트 | 무료 호스팅 사이트 서버 구축 및 DB 관리 | Java 기반 안드로이드 앱 개발 | 팀 2등 상, 개인 우수상(3명 중 1명) 수상 | . | 2021.03-2021.05 캡스톤 프로젝트 키오스크 대치 앱 시스템 개발 | AWS 서버, 데이터베이스 구축 및 관리 | kotlin 기반 안드로이드 앱 개발 | . | 2021.09- 메디칼스탠다드 인턴(4개월) 웹 개발 업무 수행 - 하이퍼링크 수정 | node.js 사용 | . | . 🌟 외부 활동 . 2018.11 교내 이공계 학술제 참가 | 교내 빅데이터 학회 소속 - 데이터 분석 공부 dacon 대회 공부 | . | 2021.07 삼성 SDS 알고리즘 교육 수료 | 2021.08 교내 알고리즘 특강 교육 수료 | . 🎖️ 자격증 . 토익 895 / 990 2021.04 취득 | 오픽 IH 2021.08 취득 | ADsP(데이터 분석 준전문가) 2021.03 취득 | SQLD(SQL 개발자) 2021.03 취득 | 정보처리기사 2021.08 취득 | . 👩🏻‍🏫 교육 활동 . 2019.03-2019.06 교내 튜터링 프로그램 참가 과 후배들에게 C 언어 튜터링 진행 | . | 2019.07-2019.08 월드프렌즈 봉사활동 코스타리카🇨🇷에서 IT 교육 진행 | . | 2021.07~ 한국외대 SW 봉사단 초등학생 대상 sw 관련 수업 보조 sw와 3D 입체 교육 수업 | sw와 환경 융합 교육 수업 | . | . | . 🏆 수상 내역 . 교내 TOPCIT 성적 우수상(2021.05 응시) | . 👩🏻‍🎨 성격 . 부족한 점 → 배우려는 자세 | 정리, 발표하는 습관 → 원활한 소통 | 다양한 분야에 관심이 많음 | 응용하는 것을 좋아함 | . . Web Programming . AI &amp; Data Study . Application . Education . 전공이수학점 내역 .",
          "url": "https://eunkyung99.github.io/gang/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Pages",
          "content": "준비중입니다 :) .",
          "url": "https://eunkyung99.github.io/gang/pages/",
          "relUrl": "/pages/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  

  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://eunkyung99.github.io/gang/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}